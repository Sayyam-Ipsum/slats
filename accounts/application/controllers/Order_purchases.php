<?phpdefined('BASEPATH') or die('No direct script access allowed');/** * @property Account $Account * @property Currency $Currency * @property Item $Item * @property Transaction $Transaction * @property Warehouse $Warehouse */class Order_purchases extends MY_Controller{    public $Transaction = NULL;    public function __construct()    {        parent::__construct();        $this->pageTitle = $this->lang->line('order_purchases');        $this->load->model('Transaction');        $this->load->model('Account');    }    public function index()    {        if ($this->input->is_ajax_request()) {            $this->_render_json($this->Transaction->load_op_data_tables(Transaction::OrderPurchaseTransType, true));        } else {            $ops = $this->Transaction->load_all_order_purchases_not_transfered_to_PU();            foreach ($ops as $op) {                $data['ops'][$op['id']] = "#" . $op['auto_no'] . " - " . $op['account_name'];            }            $this->session->unset_userdata('previous_url');            $this->session->set_userdata('previous_url', 'order_purchases/index');            $this->pageTitle = $this->lang->line('order_purchases');            $this->load->model('Transaction_item');            $data['records'] = $this->Transaction->paginate_op(Transaction::OrderPurchaseTransType, true);            $data['title'] = $this->lang->line('order_purchases');            $this->load->view('templates/header', [                '_page_title' => $this->lang->line('order_purchases'),/*                '_moreCss' => ['css/dataTables.bootstrap.min', 'css/fixedHeader.dataTables.min', 'css/bootstrap-select.min']*/                '_moreCss' => ['css/dataTables.bootstrap.min', 'css/fixedHeader.dataTables.min']            ]);            $this->load->view('order_purchases/index', $data);            //$this->load->view('templates/footer', ['_moreJs' => ['jquery.dataTables.min', 'dataTables.bootstrap.min', 'dataTables.datetime.format', 'jquery.dataTable.pagination.input', 'bootstrap-select.min', 'order_purchases/index']]);            $this->load->view('templates/footer', ['_moreJs' => ['jquery.dataTables.min', 'dataTables.bootstrap.min', 'dataTables.datetime.format', 'jquery.dataTable.pagination.input', 'order_purchases/index']]);        }    }    public function add()    {        $this->save(Transaction::OrderPurchaseTransType, 0);    }    public function edit($id = '0')    {        if ($this->violet_auth->get_user_type() !== 'Master Admin') {            $trans = $this->Transaction->check_if_user_can_edit($id);            if ($trans["check"] === 1) {                $this->save(Transaction::OrderPurchaseTransType, $id);            } else {                $this->load->model('User');                $user_name = $this->User->get_user_name($trans["edit_user_id"])['user_name'];                $this->session->set_flashdata('message', 'Warning: this Order Purchase (#' . $trans["auto_no"] . ') is locked by ' . $user_name . '.');                redirect('order_purchases/index');            }        } else {            $this->save(Transaction::OrderPurchaseTransType, $id);        }    }    private function save($transType, $id = '0')    {        $fetched = ($id > 0 ? $this->Transaction->fetch(_gnv($id)) : false);        $post = $this->input->post(['trans', 'transItems', 'submitBtn'], true);        if ((!$fetched) and ($this->Transaction->set_next_auto_number($transType))) {            $this->Transaction->set_field('auto_no', $this->Transaction->set_next_auto_number($transType));        }        if ($post['submitBtn']) {            if ((!$fetched) and ($this->Transaction->set_next_auto_number($transType))) {                $post['trans']['auto_no'] = $this->Transaction->set_next_auto_number($transType);                $this->Transaction->set_field('user_id', $this->violet_auth->get_user_id());            }            $this->Transaction->set_fields($post['trans']);            $this->Transaction->set_field('trans_type', $transType);            $this->Transaction->set_field('fiscal_year_id', $this->violet_auth->get_fiscal_year_id());            $this->Transaction->set_field('user2_id', $this->violet_auth->get_user_id());            $saved = $fetched ? $this->Transaction->update() : $this->Transaction->insert();            if ($saved) {                if (!$fetched) {                    //insert trans_items                    $this->Transaction->save_purchases_items($post['transItems'], 0);                    //insert journal                    $total = $this->Transaction->calculate_purchase_total($post['transItems'], $post['trans']['discount']);                    $trans_id = $this->Transaction->fetch_transaction_id_by_autono($post['trans']['auto_no'], $transType);                    $this->Transaction->save_transaction_in_journals($post['trans'], $trans_id["0"]["id"], $total, "OP");                    // redirect('order_purchases/edit/' . $this->Transaction->get_field('id'));                    if ($post['submitBtn'] === "Save") {                        redirect('order_purchases/edit/' . $this->Transaction->get_field('id'));                    } else {                        redirect('order_purchases/exit/' . $this->Transaction->get_field('id'));                    }                } elseif ($fetched) {                    //delete trans_items                    $this->load->model('Transaction_item');                    $trans_items_id = $this->Transaction_item->fetch_trans_items_id_for_edit($this->Transaction->get_field('id'));                    foreach ($trans_items_id as $t) {                        $this->Transaction_item->delete($t["id"]);                    }                    //insert trans_items                    // $this->Transaction->save_purchases_items($post['transItems'], 0);                    $this->load->model('Warehouse');                    $this->load->model('Transaction_item');                    $transaction_id = _gnv($this->Transaction->get_field('id'));                    $warehouse_id = $this->Warehouse->get_warehouse_id_by_warehouse_and_shelf($post['trans']["warehouse"], $post['trans']["shelf"]);                    foreach ($post['transItems'] as $item) {                        $this->Transaction_item->reset_fields();                        $this->Transaction_item->set_fields($item);                        $this->Transaction_item->set_field('price', trim($item["price"]));                        $this->Transaction_item->set_field('cost', trim($item["cost"]));                        $this->Transaction_item->set_field('transaction_id', $transaction_id);                        $this->Transaction_item->set_field('warehouse_id', $warehouse_id["id"]);                        $this->Transaction_item->set_field('mvt_type', 0);                        if (is_numeric(trim($item["cost"]))) {                            $cost = doubleval(trim($item["cost"]));                        } else {                            $cost = 0;                        }                        if (is_numeric(trim($item["price"]))) {                            $price = doubleval(trim($item["price"]));                        } else {                            $price = 0;                        }                        $this->Transaction_item->set_field('net_cost', $price * (1 + ($cost / 100)));                        $this->Transaction_item->insert();                    }                    //delete journal                    $this->load->model('Journal');                    $journal_id = $this->Journal->fetch_journal_id_by_transaction_id($this->Transaction->get_field('id'));                    if (isset($journal_id["id"])) {                        // Access the element with the given index                        $this->Journal->delete($journal_id["id"]);                    } else {                        // The index does not exist in the array                        // Handle the error here                    }                    //insert journal                    $total = $this->Transaction->calculate_purchase_total($post['transItems'], $post['trans']['discount']);                    $this->Transaction->save_transaction_in_journals($post['trans'], $this->Transaction->get_field('id'), $total, "OP");                    // redirect($this->session->userdata('previous_url'));                    if ($post['submitBtn'] === "Save") {                        redirect('order_purchases/edit/' . $this->Transaction->get_field('id'));                    } else {                        redirect('order_purchases/exit/' . $this->Transaction->get_field('id'));                    }                }            } elseif ($this->Transaction->is_valid()) {                // redirect($this->session->userdata('previous_url'));                redirect('order_purchases/edit/' . $this->Transaction->get_field('id'));            }        }        $data = $this->_load_related_models($fetched, $transType);        if ($fetched) {            $data["status"] = $this->Transaction->get_field('status');        } else {            $data["status"] = 0;        }       /* $data['suppliers'] = $this->Account->fetch_all_accounts_by_account_type('Supplier');        $account_options = array();        foreach ($data['suppliers'] as $supplier) {            $account_options[$supplier['id']] = $supplier['description'];        }        $data['account_options'] = $account_options;*/        $this->load->view('templates/header', [            '_moreCss' => ['js/air-datepicker/css/datepicker.min'],            '_page_title' => $data['transTypeText']        ]);        $this->load->view('order_purchases/order_purchase_form', $data);        $this->load->view('templates/footer', [            '_moreJs' => [                'air-datepicker/js/datepicker.min', 'air-datepicker/js/i18n/datepicker.en',                'jquery.autocomplete.min', 'transactions/purchase', 'accounts/account_modal', 'items/item_modal'            ]        ]);    }    private function _load_related_models($fetched, $transType)    {        $data = [];        $this->load->model(['Currency', 'User']);        $data['transTypeText'] = ($fetched ? 'Edit ' : 'Add New ') . $this->Transaction->get_transaction_types_list()[$transType];        $data['transType'] = $this->Transaction->get_transaction_types_list()[$transType];        $data['currenciesList'] = $this->Currency->load_currencies_list();        $data['types'] = array(            "Individual" => "Individual", "Carage" => "Carage"        );        $data['account_type'] = array(            "Customer" => "Customer", "Supplier" => "Supplier",            "Cash" => "Cash", "Expenses" => "Expenses",            "Bank" => "Bank", "Sale VAT" => "Sale VAT",            "Purchase VAT" => "Purchase VAT"        );        $this->load->model('Configuration');        $TVA1 = $this->Configuration->fetch_TVA1()["valueStr"];        $TVA2 = $this->Configuration->fetch_TVA2()["valueStr"];        $TVA = [0, doubleval($TVA1), doubleval($TVA2)];        $data['TVA'] = array_combine($TVA, $TVA);        $data["account_id"] = '';        if ($fetched) {            $this->load->model('Account');            $account = $this->Account->load($this->Transaction->get_field('account_id'));            $data['account'] = "{$account['account_number']} - {$account['account_name']}";            $account2 = $this->Account->load($this->Transaction->get_field('account2_id'));            $data['account2'] = "{$account2['account_number']} - {$account2['account_name']}";            $this->load->model('Transaction_item');            $data['trans_items'] = $this->Transaction_item->load_all_trans_items_for_op($this->Transaction->get_field('id'));            $this->load->model('Warehouse');            $w = $this->Warehouse->load_warehouses_list();            $data['warehouses_list'] = array_combine($w, $w);            $data['warehouse'] = [];            $data['shelf'] = [];            $data['shelf_list'] = [];            foreach ($data['trans_items'] as $t) {                $res = $this->Warehouse->fetch_warehouse_and_shelf($t["warehouse_id"]);                $data['trans_warehouse'] = $res['warehouse'];                $data['trans_shelf'] = $res['shelf'];                array_push($data['warehouse'], $res['warehouse']);                array_push($data['shelf'], $res['shelf']);                $s = $this->Warehouse->fetch_all_warehouse_shelfs($res['warehouse']);                $s = array_combine($s, $s);                array_push($data['shelf_list'], $s);                $data['trans_shelf_list'] = $s;            }            if ($data['trans_items'] === []) {                $data['trans_warehouse'] = $w[0];                $sh = $this->Warehouse->fetch_all_warehouse_shelfs($w[0]);                $s = array_combine($sh, $sh);                $data['trans_shelf_list'] = $s;                $data['trans_shelf'] = $sh[0];            }            $data['trans_date'] = $this->Transaction->get_field('trans_date');            $data['value_date'] = $this->Transaction->get_field('value_date');            $data['user_add'] = $this->User->get_user_name($this->Transaction->get_field('user_id'))['user_name'];            if ($this->User->get_user_name($this->Transaction->get_field('user2_id')) !== null && isset($this->User->get_user_name($this->Transaction->get_field('user2_id'))['user_name'])) {                $data['user_edit'] = $this->User->get_user_name($this->Transaction->get_field('user2_id'))['user_name'];            } else {                $data['user_edit'] = "N/A";            }            $data['created_on'] = $this->Transaction->get_transaction_created_on_field($this->Transaction->get_field('id'))['created_on'];        } else {            $data['account'] = '';            $data['account2'] = '';            $data['trans_items'] = [];            $this->load->model('Warehouse');            $w = $this->Warehouse->load_warehouses_list();            $data['w_list'] = $w;            $data['warehouses_list'] = array_combine($w, $w);            $data['trans_date'] = date("d-m-Y");            $data['value_date'] = date("d-m-Y");            $data['user_add'] = '';            $data['user_edit'] = '';            $data['trans_warehouse'] = '';            $data['trans_shelf_list'] = '';            $data['trans_shelf'] = '';            $data['created_on'] = '';        }        return $data;    }    public function delete($id)    {        $user_type = $this->violet_auth->get_user_type();        if ($user_type == 'Master Admin') {            if ($this->Transaction->delete($id)) {                $this->session->set_flashdata('message_success', 'Deleted Successfully');                redirect('order_purchases/index');            } else {                $this->session->set_flashdata('message', 'Sorry, Something Went Wrong!');                redirect('order_purchases/index');            }        } else {            $this->session->set_flashdata('message', 'Sorry, you have no permission to delete Order Purchase!');            redirect('order_purchases/index');        }    }    public function to_purchase($id)    {        $transType = "PU";        $fetched = ($id > 0 ? $this->Transaction->fetch(_gnv($id)) : false);        $post = $this->input->post(['trans', 'transItems', 'submitBtn'], true);        if (($this->Transaction->set_next_auto_number($transType))) {            $this->Transaction->set_field('auto_no', $this->Transaction->set_next_auto_number($transType));        }        if ($post['submitBtn']) {            $post['trans']['auto_no'] = $this->Transaction->set_next_auto_number($transType);            $this->Transaction->set_fields($post['trans']);            $this->Transaction->set_field('id', '');            $this->Transaction->set_field('relation_id', $id);            $this->Transaction->set_field('trans_type', $transType);            $this->Transaction->set_field('fiscal_year_id', $this->violet_auth->get_fiscal_year_id());            $this->Transaction->set_field('user2_id', $this->violet_auth->get_user_id());            $this->Transaction->set_field('user_id', $this->violet_auth->get_user_id());            $saved = $this->Transaction->insert();            if ($saved) {                $this->load->model('Warehouse');                $this->load->model('Transaction_item');                $transaction_id = _gnv($this->Transaction->get_field('id'));                foreach ($post['transItems'] as $item) {                    $warehouse_id = $this->Warehouse->get_warehouse_id_by_warehouse_and_shelf($item["warehouses"], $item["shelfs"]);                    $this->Transaction_item->reset_fields();                    $this->Transaction_item->set_fields($item);                    $this->Transaction_item->set_field('transaction_id', $transaction_id);                    $this->Transaction_item->set_field('warehouse_id', $warehouse_id["id"]);                    $this->Transaction_item->set_field('mvt_type', 1);                    $this->Transaction_item->set_field('relation_id', $id);                    $this->Transaction_item->set_field('net_cost', $item["price"] * (1 + ($item["cost"] / 100)));                    $this->Transaction_item->insert();                }                //update items qty                $this->Transaction->update_items_qty($post['transItems']);                $total = $this->Transaction->calculate_purchase_total($post['transItems'], $post['trans']['discount']);                $this->load->model('Account');                $trans_id = $this->Transaction->fetch_transaction_id_by_autono($post['trans']['auto_no'], $transType);                $this->Transaction->save_transaction_in_journals($post['trans'], $trans_id["0"]["id"], $total, "PU");                $journal_id = $this->Transaction->fetch_journal_id_by_transaction_id($trans_id["0"]["id"], $transType);                $name1 = $this->Account->fetch_account_name_by_id($post['trans']['account_id']);                $name2 = $this->Account->fetch_account_name_by_id($post['trans']['account2_id']);                $this->Transaction->save_in_journal_accounts($journal_id[0]["id"], $post['trans']['account_id'], $post['trans']['auto_no'], $total, "-1", $name2["0"]["account_name"], "Purchase");                $this->Transaction->save_in_journal_accounts($journal_id[0]["id"], $post['trans']['account2_id'], $post['trans']['auto_no'], $total, "1", $name1["0"]["account_name"], "Purchase");                $this->load->model('Journal');                //update balance debit credit for account 1                $balance = $this->Journal->calculate_account_balance($post['trans']['account_id'])["total"];                $credit = $this->Journal->calculate_account_credit($post['trans']['account_id'])["total"];                $debit = $this->Journal->calculate_account_debit($post['trans']['account_id'])["total"];                $this->Account->update_account_credit_debit_balance($post['trans']['account_id'], $balance, $credit, $debit);                //update balance debit credit for account 2                $balance = $this->Journal->calculate_account_balance($post['trans']['account2_id'])["total"];                $credit = $this->Journal->calculate_account_credit($post['trans']['account2_id'])["total"];                $debit = $this->Journal->calculate_account_debit($post['trans']['account2_id'])["total"];                $this->Account->update_account_credit_debit_balance($post['trans']['account2_id'], $balance, $credit, $debit);                //update cost                foreach ($post['transItems'] as $t) {                    $last_trans_date = $this->Transaction->fetch_last_trans_date_of_purchase_or_transfer_of_item($t["item_id"]);                    if ($last_trans_date !== null) {                        $last_trans_item_id = $this->Transaction->fetch_last_purchase_or_transfer_of_item_using_trans_date($t["item_id"], $last_trans_date["trans_date"]);                        $last = $this->Transaction_item->fetch_trans_item_data($last_trans_item_id["transaction_item_id"]);                        $this->load->model('Currency');                        $currency_code = $this->Currency->fetch_currency_code($last['currency_id'])["currency_code"];                        $this->Transaction->update_cost_and_price_of_item($last, $last['currency_rate'], $currency_code);                    }                }                $this->Transaction->update_status($id);                $this->Transaction->update_relation_id($id, $trans_id["0"]["id"]);                $this->Transaction->update_edit_user_id_and_locked($trans_id["0"]["id"], 0, '');                if ($post['submitBtn'] == 'Save') {                    redirect('purchases/edit/' . $this->Transaction->get_field('id'));                } else {                    redirect('purchases/index');                }            } elseif ($this->Transaction->is_valid()) {                redirect('purchases/index');            }        }        $data = $this->_load_related_models($fetched, $transType);        $data['trans_date'] = date('d-m-Y');        $data['value_date'] = date('d-m-Y');        $data['trans_items'] = [];        $data['transTypeText'] = "Order Purchases to Receiving";        $this->load->view('templates/header', [            '_moreCss' => ['js/air-datepicker/css/datepicker.min'],            '_page_title' => $data['transTypeText']        ]);        $this->load->view('order_purchases/order_purchase_form', $data);        $this->load->view('templates/footer', [            '_moreJs' => [                'air-datepicker/js/datepicker.min', 'air-datepicker/js/i18n/datepicker.en',                'jquery.autocomplete.min', 'transactions/purchase', 'accounts/account_modal', 'items/item_modal'            ]        ]);    }    public function preview($id)    {        $this->load->model('Account');        $this->load->model('Transaction_item');        $this->load->model('Configuration');        $this->load->model('Currency');        $this->load->model('Warehouse');        $data['trans'] = $this->Transaction->load_trans_data_by_trans_id($id);        $data['customer_info'] = $this->Account->fetch_account_info($data['trans']["account_id"]);        $data['sales_info'] = $this->Account->fetch_account_info($data['trans']["account2_id"]);        $data['trans_items'] = $this->Transaction_item->load_all_trans_items($id);        $total = 0;        foreach ($data['trans_items'] as $k => $t) {            $res = $this->Warehouse->fetch_warehouse_and_shelf($t['warehouse_id']);            $data['trans_items'][$k]["warehouse"] = $res["warehouse"];            $data['trans_items'][$k]["shelf"] = $res["shelf"];            $data['trans_items'][$k]["total"] = (floatval($t["price"]) * (1 + (floatval($t["cost"]) / 100)) * (1 - (floatval($t["discount"]) / 100))) * floatval($t["qty"]);            $total += $data['trans_items'][$k]["total"];        }        $data['sub_total'] = number_format($total, 2, '.', '');        $data['total'] = number_format(floatval($total) - floatval($data['trans']["discount"]), 2, '.', '');        $data['company_name'] = $this->Configuration->fetch_company_name()["valueStr"];        $data['company_address'] = $this->Configuration->fetch_company_address()["valueStr"];        $data['company_phone'] = $this->Configuration->fetch_company_phone()["valueStr"];        $data['company_email'] = $this->Configuration->fetch_company_email()["valueStr"];        $data['company_website'] = $this->Configuration->fetch_company_website()["valueStr"];        $data['currency'] = $this->Currency->fetch_currency_code($data['trans']["currency_id"])["currency_code"];        $data['title'] = "Order Purchase";        $this->load->view('templates/header', [            '_moreCss' => ['js/air-datepicker/css/datepicker.min'],            '_page_title' => "Print"        ]);        $this->load->view('transactions/preview', $data);        $this->load->view('templates/footer', [            '_moreJs' => [                'air-datepicker/js/datepicker.min', 'air-datepicker/js/i18n/datepicker.en',                'jquery.autocomplete.min', 'sales/preview'            ]        ]);    }    public function import_data()    {        $data = $this->_load_related_models('', "OP");        $post = $this->input->post(null, true);        if ($post) {            if ($_FILES["file"]["name"] !== "") {                $path = $_FILES["file"]["tmp_name"];                require_once APPPATH . "libraries/PHPExcel/Classes/PHPExcel.php";                $object = PHPExcel_IOFactory::load($path);                foreach ($object->getWorksheetIterator() as $worksheet) {                    $highestRow = $worksheet->getHighestRow();                    $highestColumn = $worksheet->getHighestColumn();                    for ($row = 2; $row <= $highestRow; $row++) {                        $artical_number = $worksheet->getCellByColumnAndRow(1, $row)->getValue();                        if ($artical_number !== NULL) {                            $qty = $worksheet->getCellByColumnAndRow(3, $row)->getValue();                            $price = $worksheet->getCellByColumnAndRow(4, $row)->getValue();                            if (!is_numeric($qty)) {                                $this->session->set_flashdata('message', '*Rejected: all Qty values in Excel File must be Numeric*');                                redirect("order_purchases/index");                            }                            if (!is_numeric($price)) {                                $this->session->set_flashdata('message', '*Rejected: all Price values in Excel File must be Numeric*');                                redirect("order_purchases/index");                            }                            $excel_data[] = array(                                'artical_number' => $artical_number,                                'qty' => $qty,                                'price' => $price                            );                        }                    }                }                if ($highestColumn === "E") {                    $this->load->model('Item');                    foreach ($excel_data as $d) {                        $check = $this->Item->check_if_item_artical_number_exists($d["artical_number"])['count'];                        if ($check === "0") {                            $barcode = $this->Item->generate_autonumber();                            $this->Item->add_new_item_in_import_excel_PU($barcode, $barcode, $d["artical_number"], $d["artical_number"]);                        }                    }                    $s = $this->Warehouse->fetch_all_warehouse_shelfs($data['w_list'][0]);                    $shelf_list = array_combine($s, $s);                    foreach ($excel_data as $k => $e) {                        $item = $this->Item->fetch_item_data_by_artical_nb($e["artical_number"]);                        $data['trans_items'][$k]["item_id"] = $item["id"];                        $data['trans_items'][$k]["barcode"] = $item["barcode"];                        $data['trans_items'][$k]["EAN"] = $item["EAN"];                        $data['trans_items'][$k]["description"] = $item["description"];                        $data['trans_items'][$k]["artical_number"] = $e["artical_number"];                        $data['trans_items'][$k]["qty"] = $e["qty"];                        $data['trans_items'][$k]["price"] = $e["price"];                        $data['trans_items'][$k]["discount"] = 0;                        $data['trans_items'][$k]["cost"] = 0;                        $data['trans_items'][$k]["mvt_type"] = 0;                        $data["warehouse"][$k] = $data['w_list'][0];                        $data["shelf"][$k] = $s[0];                        $data['shelf_list'][$k] = $shelf_list;                    }                    $data["status"] = 0;                    $data["auto_no"] = $this->Transaction->set_next_auto_number("OP");                    $this->load->view('templates/header', [                        '_moreCss' => ['js/air-datepicker/css/datepicker.min'],                        '_page_title' => $data['transTypeText']                    ]);                    $this->load->view('order_purchases/import_excel_op_form', $data);                    $this->load->view('templates/footer', [                        '_moreJs' => [                            'air-datepicker/js/datepicker.min', 'air-datepicker/js/i18n/datepicker.en',                            'jquery.autocomplete.min', 'transactions/purchase', 'accounts/account_modal', 'items/item_modal'                        ]                    ]);                } else {                    $this->session->set_flashdata('message', '*Rejected: The selected Excel File columns number not equal to 5*');                    redirect("order_purchases/index");                }            } else {                $this->session->set_flashdata('message', '*Please Select an Excel File*');                redirect("order_purchases/index");            }        }    }    public function duplicate($id)    {        $trans = $this->Transaction->load_trans_data_by_trans_id($id);        $auto_no = $trans['auto_no'];        $trans['auto_no'] = $this->Transaction->set_next_auto_number('OP');        $trans['id'] = '';        $trans['relation_id'] = '';        $this->load->model('Transaction_item');        $trans_items = $this->Transaction_item->load_all_trans_items($id);        // var_dump($trans_items);        // exit;        $this->Transaction->set_fields($trans);        $saved = $this->Transaction->insert();        if ($saved) {            //insert trans_items            foreach ($trans_items as $item) {                $item['id'] = '';                $item['transaction_id'] = $this->Transaction->get_field('id');                $this->Transaction_item->reset_fields();                $this->Transaction_item->set_fields($item);                $this->Transaction_item->insert();            }            //insert journal            $total = $this->Transaction->calculate_purchase_total($trans_items, $trans['discount']);            $this->Transaction->save_transaction_in_journals($trans, $this->Transaction->get_field('id'), $total, "OP");            $this->session->set_flashdata('message_success_header', '*Order Purchase #' . $auto_no . ' duplicated Successfully. The new Order Purchase is #' . $this->Transaction->get_field('auto_no') . '*');        } else {            $this->session->set_flashdata('message', '*Sorry, Something Went Wrong!*');        }        redirect('order_purchases/index');    }    public function exit($id)    {        $this->Transaction->update_edit_user_id_and_locked($id, 0, '');        redirect('order_purchases/index');    }    public function bulk_receiving()    {        $post = $this->input->post(null, true);        if ($post) {            if (array_key_exists('op_ids', $post)) {                if (count($post['op_ids']) > 1) {                    $this->load->model(['Transaction_item', 'Transaction']);                    $trans_items = [];                    $count = 0;                    $supplier = '';                    $trans = [];                    $ops_str = '';                    foreach ($post['op_ids'] as $k => $op) {                        $trans = $this->Transaction->load_trans_data_by_trans_id($op);                        if ($k !== 0) {                            $ops_str .= ", #" . $trans['auto_no'];                            if ($supplier !== $trans['account_id']) {                                $count++;                                break;                            }                        } else {                            $supplier = $trans['account_id'];                            $ops_str .= "#" . $trans['auto_no'];                        }                        $op_items = $this->Transaction_item->load_all_trans_items_for_op($op);                        foreach ($op_items as $i) {                            unset($i['id']);                            unset($i['transaction_id']);                            $ti = $i;                            $ti['relation_id'] = $op;                            $trans_items[] = $ti;                        }                    }                    // var_dump($trans_items);                    // exit;                    if ($count !== 0) {                        $this->session->set_flashdata('message', '*Sorry, All Selected Order Purchases Must Belong To Same Supplier!*');                        redirect('order_purchases/index');                    } else {                        if ($trans) {                            $transType = 'PU';                            $pu_data = array(                                'auto_no' => $this->Transaction->set_next_auto_number($transType),                                'user_id' => $this->violet_auth->get_user_id(),                                'trans_type' => $transType,                                'account_id' => $trans['account_id'],                                'account2_id' => $trans['account2_id'],                                'currency_id' => $trans['currency_id'],                                'currency_rate' => $trans['currency_rate'],                                'trans_date' => date('d-m-Y'),                                'value_date' => date('d-m-Y'),                                'fiscal_year_id' => $this->violet_auth->get_fiscal_year_id()                            );                            $this->Transaction->set_fields($pu_data);                            $saved = $this->Transaction->insert();                            if ($saved) {                                $this->load->model('Account');                                // $this->Transaction->save_purchases_items($trans_items, 1);                                foreach ($trans_items as $item) {                                    $this->Transaction_item->reset_fields();                                    $this->Transaction_item->set_fields($item);                                    $this->Transaction_item->set_field('transaction_id', $this->Transaction->get_field('id'));                                    $this->Transaction_item->set_field('mvt_type', 1);                                    $this->Transaction_item->set_field('relation_id', $item['relation_id']);                                    $this->Transaction_item->set_field('net_cost', $item["price"] * (1 + ($item["cost"] / 100)));                                    $this->Transaction_item->insert();                                }                                $total = $this->Transaction->calculate_purchase_total($trans_items, 0);                                $trans_id = $this->Transaction->get_field('id');                                $this->Transaction->save_transaction_in_journals($pu_data, $trans_id, $total, "PU");                                $journal_id = $this->Transaction->fetch_journal_id_by_transaction_id($trans_id, $transType);                                $name1 = $this->Account->fetch_account_name_by_id($pu_data['account_id']);                                $name2 = $this->Account->fetch_account_name_by_id($pu_data['account2_id']);                                $this->Transaction->save_in_journal_accounts($journal_id[0]["id"], $pu_data['account_id'], $pu_data['auto_no'], $total, "-1", $name2["0"]["account_name"], "Purchase");                                $this->Transaction->save_in_journal_accounts($journal_id[0]["id"], $pu_data['account2_id'], $pu_data['auto_no'], $total, "1", $name1["0"]["account_name"], "Purchase");                                //update cost                                foreach ($trans_items as $t) {                                    $last_trans_date = $this->Transaction->fetch_last_trans_date_of_purchase_or_transfer_of_item($t["item_id"]);                                    if ($last_trans_date !== null) {                                        $last_trans_item_id = $this->Transaction->fetch_last_purchase_or_transfer_of_item_using_trans_date($t["item_id"], $last_trans_date["trans_date"]);                                        $last = $this->Transaction_item->fetch_trans_item_data($last_trans_item_id["transaction_item_id"]);                                        $this->load->model('Currency');                                        $currency_code = $this->Currency->fetch_currency_code($last['currency_id'])["currency_code"];                                        $this->Transaction->update_cost_and_price_of_item($last, $last['currency_rate'], $currency_code);                                    } else {                                        $this->load->model('Item');                                        $open_cost = $this->Item->fetch_open_cost_of_item($t["item_id"])["open_cost"];                                        $this->Item->update_item_cost_by_item_id($t["item_id"], $open_cost);                                        $this->Item->update_item_purchase_cost_by_item_id($t["item_id"], 0);                                    }                                }                                //update items qty                                $this->Transaction->update_items_qty($trans_items);                                $this->load->model('Journal');                                //update balance debit credit for account 1                                $balance = $this->Journal->calculate_account_balance($pu_data['account_id'])["total"];                                $credit = $this->Journal->calculate_account_credit($pu_data['account_id'])["total"];                                $debit = $this->Journal->calculate_account_debit($pu_data['account_id'])["total"];                                $this->Account->update_account_credit_debit_balance($pu_data['account_id'], $balance, $credit, $debit);                                //update balance debit credit for account 2                                $balance = $this->Journal->calculate_account_balance($pu_data['account2_id'])["total"];                                $credit = $this->Journal->calculate_account_credit($pu_data['account2_id'])["total"];                                $debit = $this->Journal->calculate_account_debit($pu_data['account2_id'])["total"];                                $this->Account->update_account_credit_debit_balance($pu_data['account2_id'], $balance, $credit, $debit);                                //update relation_id = pu_id for all selected order purchases                                foreach ($post['op_ids'] as $op_id) {                                    $this->Transaction->update_status($op_id);                                    $this->Transaction->update_relation_id($op_id, $trans_id);                                }                                $this->session->set_flashdata('message_success', '*Receiving #' . $pu_data['auto_no'] . ' Created Successfully by Bulk Receiving of Order purchases: ' . $ops_str . '*');                                redirect('order_purchases/index');                            } else {                                $this->session->set_flashdata('message', '*Sorry, Something Went Wrong!*');                                redirect('order_purchases/index');                            }                        } else {                            $this->session->set_flashdata('message', '*Sorry, Something Went Wrong!*');                            redirect('order_purchases/index');                        }                    }                } else {                    $this->session->set_flashdata('message', '*Please, Select At least 2 Order Purchases For Bulk Receiving!*');                    redirect('order_purchases/index');                }            } else {                $this->session->set_flashdata('message', '*Please, Select At least 2 Order Purchases For Bulk Receiving!*');                redirect('order_purchases/index');            }        } else {            $this->session->set_flashdata('message', '*Please, Select At least 2 Order Purchases For Bulk Receiving!*');            redirect('order_purchases/index');        }        // var_dump(array_key_exists('op_ids', $post));    }    public function change_status()    {        $itemId = $this->input->post('itemId');        $status = 0;        $item = $this->Transaction->load_trans_data_by_trans_id($itemId);        if ($item['status'] == 0) {            $status = 1;        } elseif ($item['status'] == 1) {            $status = 0;        }        $data = array(            'status' => $status        );        $this->db->where('id', $itemId);        $this->db->update('transactions', $data);    }}