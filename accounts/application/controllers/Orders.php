<?phpdefined('BASEPATH') or die('No direct script access allowed');/** * @property Account $Account * @property Currency $Currency * @property Item $Item * @property Transaction $Transaction * @property Transaction_item $Transaction_item * @property Warehouse $Warehouse */class Orders extends MY_Controller{    public $Transaction = NULL;    public function __construct()    {        parent::__construct();        $this->pageTitle = $this->lang->line('orders');        $this->load->model('Transaction');    }    public function index()    {        if ($this->input->is_ajax_request()) {            $this->_render_json($this->Transaction->load_order_sales_data_tables(Transaction::OrderTransType));        } else {            $this->session->unset_userdata('previous_url');            $this->session->set_userdata('previous_url', 'orders/index');            $this->pageTitle = $this->lang->line('Orders');            $this->load->model('Transaction_item');            $data['records'] = $this->Transaction->paginate_order_sales_data(Transaction::OrderTransType);            $data['title'] = $this->lang->line('sale_orders');            $this->load->view('templates/header', [                '_page_title' => "Orders",                '_moreCss' => ['css/dataTables.bootstrap.min', 'css/fixedHeader.dataTables.min']            ]);            $this->load->view('orders/index', $data);            // $this->load->view('templates/footer', ['_moreJs' => ['jquery.dataTables.min', 'dataTables.bootstrap.min', 'dataTables.fixedHeader.min', 'dataTables.datetime.format', 'jquery.dataTable.pagination.input', 'orders/index']]);            $this->load->view('templates/footer', ['_moreJs' => ['jquery.dataTables.min', 'dataTables.bootstrap.min', 'jquery.dataTable.pagination.input', 'orders/index']]);        }    }    public function add()    {        $this->save(Transaction::OrderTransType, 0);    }    public function edit($id = '0')    {        if ($this->violet_auth->get_user_type() !== 'Master Admin') {            $trans = $this->Transaction->check_if_user_can_edit($id);            if ($trans["check"] === 1) {                // if ($trans["edit_user_id"] !== $this->violet_auth->get_user_id()) {                // 	$this->Transaction->update_edit_user_id_and_locked($id, 1, $this->violet_auth->get_user_id());                // }                $this->save(Transaction::OrderTransType, $id);            } else {                $this->load->model('User');                $user_name = $this->User->get_user_name($trans["edit_user_id"])['user_name'];                $this->session->set_flashdata('message', 'Warning: this order (#' . $trans["auto_no"] . ') is locked by ' . $user_name . '.');                redirect('orders/index');            }        } else {            $this->save(Transaction::OrderTransType, $id);        }    }    private function save($transType, $id = '0')    {        $fetched = ($id > 0 ? $this->Transaction->fetch(_gnv($id)) : false);        $post = $this->input->post(['trans', 'transItems', 'submitBtn'], true);        if ((!$fetched) and ($this->Transaction->set_next_auto_number($transType))) {            $this->Transaction->set_field('auto_no', $this->Transaction->set_next_auto_number($transType));        }        if ($post['submitBtn']) {            $customer_acc = $post['trans']['account_id'];            $os_date = date("Y-m-d", strtotime($post['trans']['trans_date']));            if ((!$fetched) and ($this->Transaction->set_next_auto_number($transType))) {                $post['trans']['auto_no'] = $this->Transaction->set_next_auto_number($transType);                $this->Transaction->set_field('user_id', $this->violet_auth->get_user_id());            }            $this->Transaction->set_fields($post['trans']);            $this->Transaction->set_field('trans_type', $transType);            $this->Transaction->set_field('fiscal_year_id', $this->violet_auth->get_fiscal_year_id());            $this->Transaction->set_field('user2_id', $this->violet_auth->get_user_id());            if ($fetched) {                $this->Transaction->set_field('locked', 0);                $this->Transaction->set_field('edit_user_id', '');            }            $saved = $fetched ? $this->Transaction->update() : $this->Transaction->insert();            if ($saved) {                if (!$fetched) {                    $this->Transaction->save_transaction_items($post['transItems'], 0);                    $total = $this->Transaction->calculate_transaction_total($post['transItems'], $post['trans']['discount'], $post['trans']['TVA']);                    $trans_id = $this->Transaction->fetch_transaction_id_by_autono($post['trans']['auto_no'], $transType);                    $this->Transaction->save_transaction_in_journals($post['trans'], $trans_id["0"]["id"], $total, "OS");                    if ($post['submitBtn'] === "Save") {                        redirect('orders/edit/' . $this->Transaction->get_field('id'));                    } else {                        redirect('orders/index');                    }                } elseif ($fetched) {                    $this->load->model('Journal');                    $journal_id = $this->Journal->fetch_journal_id_by_transaction_id($this->Transaction->get_field('id'));                    $this->Journal->delete($journal_id["id"]);                    //insert journal                    $total = $this->Transaction->calculate_transaction_total($post['transItems'], $post['trans']['discount'], $post['trans']['TVA']);                    $this->Transaction->save_transaction_in_journals($post['trans'], $this->Transaction->get_field('id'), $total, "OS");                    //delete trans_items                    $this->load->model('Transaction_item');                    $trans_items_id = $this->Transaction_item->fetch_trans_items_id_for_edit($this->Transaction->get_field('id'));                    foreach ($trans_items_id as $t) {                        $this->Transaction_item->delete($t["id"]);                    }                    //insert trans_items                    $this->Transaction->save_transaction_items($post['transItems'], 0);                    // edit related order purchase items                    $related_op_items = $this->Transaction_item->load_related_order_purchase_items($id);                    if ($related_op_items) {                        //delete all related order purchase items                        $edited_ops = [];                        foreach ($related_op_items as $item) {                            $this->Transaction_item->delete($item['id']);                            $edited_ops[$item['transaction_id']] = $item['transaction_id'];                        }                        //re-add new order purchase items                        $ops = [];                        foreach ($post['transItems'] as $k => $p) {                            if ($p['account_id']) {                                $OP = [];                                $item = $this->Item->load_item_data($p['item_id']);                                $OP = $p;                                $OP['cost'] = 0;                                $OP['item_cost'] = $item[0]['cost'];                                $OP['price'] = $item[0]['cost'];                                $OP['item_profit'] = 0;                                $ops[$p['account_id']][] = $OP;                            }                        }                        // var_dump($ops);exit;                        $order_sale_id = $this->Transaction->get_field('id');                        foreach ($ops as $supplier => $op) {                            $order_purchase = $this->Transaction->load_transaction_by_date_and_type('OP', $os_date, $supplier);                            if (!$order_purchase) {                                $this->Transaction->reset_fields();                                $post['trans']['auto_no'] = $this->Transaction->set_next_auto_number('OP');                                $post['trans']['account_id'] = $supplier;                                $this->load->model('Account');                                $sup_data = $this->Account->load_account_data($supplier);                                $this->load->model('Currency');                                $currency = $this->Currency->load_currency_data($sup_data['currency_id']);                                $purchases_acc = $this->Account->load_account_by_account_type_and_currency_id('Purchases', $sup_data['currency_id']);                                $post['trans']['account2_id'] = $purchases_acc['id'];                                $this->Transaction->set_fields($post['trans']);                                $this->Transaction->set_field('id', '');                                $this->Transaction->set_field('account2_id', $purchases_acc['id']);                                $this->Transaction->set_field('currency_id', $sup_data['currency_id']);                                $this->Transaction->set_field('currency_rate', $currency['currency_rate']);                                $this->Transaction->set_field('trans_type', 'OP');                                $this->Transaction->set_field('order_id', $order_sale_id);                                $this->Transaction->set_field('fiscal_year_id', $this->violet_auth->get_fiscal_year_id());                                $this->Transaction->set_field('user_id', $this->violet_auth->get_user_id());                                $this->Transaction->set_field('user2_id', $this->violet_auth->get_user_id());                                $saved2 = $this->Transaction->insert();                                if ($saved2) {                                    foreach ($op as $i) {                                        $warehouse_id = $this->Warehouse->get_warehouse_id_by_warehouse_and_shelf($i["warehouses"], $i["shelfs"]);                                        $this->Transaction_item->reset_fields();                                        $this->Transaction_item->set_fields($i);                                        $this->Transaction_item->set_field('transaction_id', $this->Transaction->get_field('id'));                                        $this->Transaction_item->set_field('warehouse_id', $warehouse_id["id"]);                                        $this->Transaction_item->set_field('account_id', $customer_acc);                                        $this->Transaction_item->set_field('discount', "0");                                        $this->Transaction_item->set_field('mvt_type', "0");                                        $this->Transaction_item->set_field('net_cost', "0");                                        $this->Transaction_item->set_field('relation_id', $order_sale_id);                                        $res = $this->Transaction_item->insert();                                        $this->Transaction_item->update_trans_item_relation_id($order_sale_id, $i['item_id'], $this->Transaction->get_field('id'));                                    }                                    $total = $this->Transaction->calculate_transaction_total($post['transItems'], $post['trans']['discount'], $post['trans']['TVA']);                                    $this->load->model('Journal');                                    $this->Journal->reset_fields();                                    $this->Transaction->save_transaction_in_journals($post['trans'], $this->Transaction->get_field('id'), $total, 'OP');                                }                            } else {                                foreach ($op as $i) {                                    $warehouse_id = $this->Warehouse->get_warehouse_id_by_warehouse_and_shelf($i["warehouses"], $i["shelfs"]);                                    $this->Transaction_item->reset_fields();                                    $this->Transaction_item->set_fields($i);                                    $this->Transaction_item->set_field('transaction_id', $order_purchase['id']);                                    $this->Transaction_item->set_field('warehouse_id', $warehouse_id["id"]);                                    $this->Transaction_item->set_field('account_id', $customer_acc);                                    $this->Transaction_item->set_field('discount', "0");                                    $this->Transaction_item->set_field('mvt_type', "0");                                    $this->Transaction_item->set_field('net_cost', "0");                                    $this->Transaction_item->set_field('relation_id', $order_sale_id);                                    $this->Transaction_item->insert();                                }                            }                        }                        // if ($edited_ops) {                        // 	foreach ($edited_ops as $tr) {                        // 		$trans_items = $this->Transaction_item->load_all_trans_items_for_op($tr);                        // 		if (!$trans_items) {                        // 			$this->Transaction->delete($tr);                        // 		}                        // 	}                        // }                    }                    // end of edit order purchase items                    if ($post['submitBtn'] === "Save") {                        redirect('orders/edit/' . $id);                    } else {                        redirect('orders/index');                    }                }            } elseif ($this->Transaction->is_valid()) {                redirect('orders/index');            }        }        $data = $this->_load_related_models($fetched, $transType);        if ($fetched) {            $data["status"] = $this->Transaction->get_field('status');        } else {            $data["status"] = 0;            $data["delivered"] = 0;        }        $this->load->view('templates/header', [            '_moreCss' => ['js/air-datepicker/css/datepicker.min'],            '_page_title' => $data['transTypeText']        ]);        $this->load->view('orders/order_form', $data);        $this->load->view('templates/footer', [            '_moreJs' => [                'air-datepicker/js/datepicker.min', 'air-datepicker/js/i18n/datepicker.en',                'jquery.autocomplete.min', 'transactions/order_sales', 'accounts/account_modal', 'items/item_modal'            ]        ]);    }    private function _load_related_models($fetched, $transType)    {        $data = [];        $this->load->model(['Currency', 'User']);        $data['transTypeText'] = ($fetched ? 'Edit ' : 'Add New ') . $this->Transaction->get_transaction_types_list()[$transType];        $data['transType'] = $this->Transaction->get_transaction_types_list()[$transType];        $data['currenciesList'] = $this->Currency->load_currencies_list();        $data['types'] = array(            "Individual" => "Individual", "Carage" => "Carage"        );        $data['account_type'] = array(            "Customer" => "Customer", "Supplier" => "Supplier",            "Cash" => "Cash", "Expenses" => "Expenses",            "Bank" => "Bank", "Sale VAT" => "Sale VAT",            "Purchase VAT" => "Purchase VAT"        );        $data["delivery_type"] = array(            " " => " ", "Delivery" => "SLATS Delivery",            "Self Pickup" => "Self Pickup", "DHL" => "DHL", "Post" => "Post"        );        $this->load->model('Account');        $suppliers = $this->Account->load_all_accounts_by_account_type("Supplier");        $data['suppliers'][''] = '';        foreach ($suppliers as $s) {            $data['suppliers'][$s['id']] = $s['account_name'];        }        $this->load->model('Configuration');        $TVA1 = $this->Configuration->fetch_TVA1()["valueStr"];        $TVA2 = $this->Configuration->fetch_TVA2()["valueStr"];        $TVA = [0, doubleval($TVA1), doubleval($TVA2)];        $data['TVA'] = array_combine($TVA, $TVA);        $this->load->model('Configuration');        $TVA1 = $this->Configuration->fetch_TVA1()["valueStr"];        $TVA2 = $this->Configuration->fetch_TVA2()["valueStr"];        $TVA = [0, doubleval($TVA1), doubleval($TVA2)];        $data['TVA'] = array_combine($TVA, $TVA);        // $drivers = $this->User->load_all_users_with_type_driver();        // $employees = $this->User->load_all_users_with_type_employee();        $all_users = $this->User->load_all_users();        $drivers = $employees = $all_users;        $data['drivers'] = [0 => ""];        foreach ($drivers as $d) {            $data['drivers'][$d["id"]] = $d["user_name"];        }        $data['employees'] = [0 => ""];        foreach ($employees as $e) {            $data['employees'][$e["id"]] = $e["user_name"];        }        $this->load->model('Warehouse');        $w = $this->Warehouse->load_warehouses_list();        $data['warehouse_list'] = array_combine($w, $w);        if ($fetched) {            $this->load->model('Account');            $account = $this->Account->load($this->Transaction->get_field('account_id'));            $data['account'] = "{$account['account_number']} - {$account['account_name']}";            $account2 = $this->Account->load($this->Transaction->get_field('account2_id'));            $data['account2'] = "{$account2['account_number']} - {$account2['account_name']}";            $this->load->model('Transaction_item');            $data['trans_items'] = $this->Transaction_item->load_all_trans_items_for_QO_AND_OS($this->Transaction->get_field('id'));            $data['trans_date'] = $this->Transaction->get_field('trans_date');            $data['value_date'] = $this->Transaction->get_field('value_date');            $data['warehouses_list'] = [];            foreach ($data['trans_items'] as $i => $t) {                $warehouse_shelf = $this->Warehouse->fetch_warehouse_and_shelf($t["warehouse_id"]);                $data['warehouse'][$i] = $warehouse_shelf['warehouse'];                $data['shelf'][$i] = $warehouse_shelf['shelf'];                $result = $this->Warehouse->fetch_item_in_inventory($t["item_id"]);                if ($result !== []) {                    $data['warehouses_list'][$i][$warehouse_shelf['warehouse']] = $warehouse_shelf['warehouse'];                    foreach ($result as $r) {                        $data['warehouses_list'][$i][$r["warehouse"]] = $r["warehouse"];                    }                    $shelfs = $this->Warehouse->fetch_item_warehouse_shelfs($t["item_id"], $warehouse_shelf['warehouse']);                    $data['shelf_list'][$i][$warehouse_shelf['shelf']] = $warehouse_shelf['shelf'];                    foreach ($shelfs as $s) {                        $data['shelf_list'][$i][$s['shelf']] = $s['shelf'];                    }                } else {                    $order_warehouses = $this->Warehouse->fetch_all_order_warehouses();                    foreach ($order_warehouses as $o) {                        $data['warehouses_list'][$i][$o["warehouse"]] = $o["warehouse"];                    }                    $order_shelfs = $this->Warehouse->fetch_shelf_of_order_warehouse($warehouse_shelf['warehouse']);                    foreach ($order_shelfs as $os) {                        $data['shelf_list'][$i][$os['shelf']] = $os['shelf'];                    }                }            }            $user_add = $this->User->get_user_name($this->Transaction->get_field('user_id'));            if ($user_add) {                $data['user_add'] = $user_add['user_name'];            } else {                $data['user_add'] = '';            }            $user_edit = $this->User->get_user_name($this->Transaction->get_field('user2_id'));            if ($user_edit) {                $data['user_edit'] = $user_edit['user_name'];            } else {                $data['user_edit'] = '';            }            $data['created_on'] = $this->Transaction->get_transaction_created_on_field($this->Transaction->get_field('id'))['created_on'];        } else {            $data['account'] = '';            $data['account2'] = '';            $data['trans_items'] = [];            $data['trans_date'] = date("d-m-Y");            $data['value_date'] = date("d-m-Y");            $data['user_add'] = '';            $data['user_edit'] = '';            $data['created_on'] = '';        }        return $data;    }    public function delete($id)    {        $this->load->model('Transaction_item');        $trans = $this->Transaction->load_trans_data_by_trans_id($id);        $related_op_items = $this->Transaction_item->load_related_order_purchase_items($id);        // var_dump($related_op_items);exit;        if ($related_op_items) {            $trans_to_delete = [];            foreach ($related_op_items as $item) {                $this->Transaction_item->delete($item['id']);                $trans_to_delete[$item['transaction_id']] = $item['transaction_id'];            }            if ($trans_to_delete) {                foreach ($trans_to_delete as $tr) {                    $trans_items = $this->Transaction_item->load_all_trans_items_for_op($tr);                    if (!$trans_items) {                        $this->Transaction->delete($tr);                    }                }            }        }        if ($trans["relation_id"]) {            $this->Transaction->update_transfered($trans["relation_id"], '');        }        if ($this->Transaction->delete($id)) {            // $this->add_msg($this->lang->line('record_deleted'), 'success');            redirect('orders/index');        } else {            // $this->add_msg($this->lang->line('record_not_deleted'), 'warning');            redirect('orders/index');        }    }    public function lookup_accounts()    {        $this->load->model('Account');        $this->_render_json(            $this->Account->search_suggestions(trim($this->input->get('query', true)))        );    }    public function lookup_items()    {        $this->load->model('Item');        $this->_render_json(            $this->Item->search_suggestions(trim($this->input->get('query', true)))        );    }    public function to_invoice($id)    {        $sale = $this->Transaction->check_if_OS_transfered_SA($id);        $case = 0;        if ($sale) {            if (!$sale['id']) {                $case = 1;            }        } else {            $case = 1;        }        if ($case == 1) {            $transType = "SA";            $fetched = ($id > 0 ? $this->Transaction->fetch(_gnv($id)) : false);            $post = $this->input->post(['trans', 'transItems', 'submitBtn'], true);            if (($fetched) and ($this->Transaction->set_next_auto_number($transType))) {                $this->Transaction->set_field('auto_no', $this->Transaction->set_next_auto_number($transType));            }            if ($post['submitBtn']) {                //var_dump($post['trans']);exit;                //var_dump($post['trans']['delivered']);exit;                $post['trans']['auto_no'] = $this->Transaction->set_next_auto_number($transType);                $this->Transaction->set_fields($post['trans']);                $this->Transaction->set_field('id', '');                $this->Transaction->set_field('delivered', $post['trans']['delivered']);                $this->Transaction->set_field('relation_id', $id);                $this->Transaction->set_field('trans_type', $transType);                $this->Transaction->set_field('fiscal_year_id', $this->violet_auth->get_fiscal_year_id());                $this->Transaction->set_field('user_id', $this->violet_auth->get_user_id());                $this->Transaction->set_field('user2_id', $this->violet_auth->get_user_id());                $saved = $this->Transaction->insert();                if ($saved) {                    $this->Transaction->save_transaction_items($post['transItems'], -1);                    $total = $this->Transaction->calculate_transaction_total($post['transItems'], $post['trans']['discount'], $post['trans']['TVA']);                    $trans_id = $this->Transaction->fetch_transaction_id_by_autono($post['trans']['auto_no'], $transType);                    $this->Transaction->save_transaction_in_journals($post['trans'], $trans_id["0"]["id"], $total, "SA");                    $this->load->model('Account');                    $journal_id = $this->Transaction->fetch_journal_id_by_transaction_id($trans_id["0"]["id"], $transType);                    $name1 = $this->Account->fetch_account_name_by_id($post['trans']['account_id']);                    $name2 = $this->Account->fetch_account_name_by_id($post['trans']['account2_id']);                    $this->Transaction->save_in_journal_accounts($journal_id["0"]["id"], $post['trans']['account2_id'], $post['trans']['auto_no'], $total, "-1", $name1["0"]["account_name"], "Sale");                    $this->Transaction->save_in_journal_accounts($journal_id["0"]["id"], $post['trans']['account_id'], $post['trans']['auto_no'], $total, "1", $name2["0"]["account_name"], "Sale");                    //update items qty                    $this->Transaction->update_items_qty($post['transItems']);                    $this->load->model('Journal');                    //update balance debit credit for account 1                    $balance = $this->Journal->calculate_account_balance($post['trans']['account_id'])["total"];                    $credit = $this->Journal->calculate_account_credit($post['trans']['account_id'])["total"];                    $debit = $this->Journal->calculate_account_debit($post['trans']['account_id'])["total"];                    $this->Account->update_account_credit_debit_balance($post['trans']['account_id'], $balance, $credit, $debit);                    //update balance debit credit for account 2                    $balance = $this->Journal->calculate_account_balance($post['trans']['account2_id'])["total"];                    $credit = $this->Journal->calculate_account_credit($post['trans']['account2_id'])["total"];                    $debit = $this->Journal->calculate_account_debit($post['trans']['account2_id'])["total"];                    $this->Account->update_account_credit_debit_balance($post['trans']['account2_id'], $balance, $credit, $debit);                    $this->Transaction->update_transfered($id, 1);                    //get qu by relation id                    $qu_id = $this->Transaction->fetch_transaction_relation_id_by_id($id, Transaction::OrderTransType);                    $this->Transaction->update_to_invoice($qu_id);                    //$this->Transaction->update_status($id);                    $this->load->model('Transaction_item');                    $trans_items = $this->Transaction_item->load_all_trans_items_for_QO_AND_OS($id);                    foreach ($trans_items as $item) {                        $updated = $this->Transaction_item->updated_pickedup_qty($item['id'], $item['qty']);                    }                    redirect('sales/index');                } elseif ($this->Transaction->is_valid()) {                    redirect('sales/index');                }            }            $this->load->model('Item');            $data = $this->_load_related_models_for_to_invoice($fetched, $transType);            $data["status"] = 0;            $data["delivered"] = 0;            $data['transTypeText'] = "Order to Invoice";            $this->load->view('templates/header', [                '_moreCss' => ['js/air-datepicker/css/datepicker.min'],                '_page_title' => $data['transTypeText']            ]);            $this->load->view('order_to_invoice/form', $data);            $this->load->view('templates/footer', [                '_moreJs' => [                    'air-datepicker/js/datepicker.min', 'air-datepicker/js/i18n/datepicker.en',                    'jquery.autocomplete.min', 'transactions/ordertoinvoice', 'accounts/account_modal', 'items/item_modal'                ]            ]);        } else {            $this->session->set_flashdata('message', 'Warning: this Order was already transferd to Sale.');            redirect('orders/index');        }    }    public function missing_products($id)    {        $transType = "MP";        $this->load->model('Configuration');        $lc_currency = $this->Configuration->fetch_local_currency()['valueInt'];        $fetched = ($id > 0 ? $this->Transaction->fetch(_gnv($id)) : false);        $post = $this->input->post(['trans', 'transItems', 'submitBtn'], true);        if (($fetched) and ($this->Transaction->set_next_auto_number($transType))) {            $this->Transaction->set_field('auto_no', $this->Transaction->set_next_auto_number($transType));        }        if ($post['submitBtn']) {            $this->load->model('Item');            $mp_id = $this->Transaction->fetch_MP_id();            if ($mp_id === NULL) {                $this->Transaction->set_field('id', '');                $this->Transaction->set_field('relation_id', $id);                $this->Transaction->set_field('auto_no', "1");                $this->Transaction->set_field('currency_id', $lc_currency);                $this->Transaction->set_field('currency_rate', 1);                $this->Transaction->set_field('account_id', 1);                $this->Transaction->set_field('account2_id', 1);                $this->Transaction->set_field('trans_date', date("d-m-Y"));                $this->Transaction->set_field('value_date', NULL);                $this->Transaction->set_field('trans_type', $transType);                $this->Transaction->set_field('fiscal_year_id', $this->violet_auth->get_fiscal_year_id());                $this->Transaction->set_field('user_id', $this->violet_auth->get_user_id());                $saved = $this->Transaction->insert();                if ($saved) {                    $this->Transaction->save_transaction_items_without_warehouse_id($post['transItems'], 0);                    redirect('orders/index');                } elseif ($this->Transaction->is_valid()) {                    redirect('orders/index');                }            } else {                $this->load->model('Transaction_item');                $MP_trans_items = $this->Transaction_item->load_all_trans_items_for_QO_AND_OS($mp_id["id"]);                $this->Transaction->update_and_save_transaction_items_for_MP($post['transItems'], $MP_trans_items, 0, $mp_id["id"]);                redirect('orders/index');            }        }        $data = $this->_load_related_models_for_MP($fetched, $transType);        $data["status"] = 0;        $data['trans_date'] = date("d-m-Y");        $data['value_date'] = date("d-m-Y");        $data['transTypeText'] = "Order Missing Products";        $this->load->view('templates/header', [            '_moreCss' => ['js/air-datepicker/css/datepicker.min'],            '_page_title' => $data['transTypeText']        ]);        $this->load->view('orders/order_form', $data);        $this->load->view('templates/footer', [            '_moreJs' => [                'air-datepicker/js/datepicker.min', 'air-datepicker/js/i18n/datepicker.en',                'jquery.autocomplete.min', 'transactions/order_sales'            ]        ]);    }    private function _load_related_models_for_MP($fetched, $transType)    {        $data = [];        $this->load->model(['Currency', 'User']);        $data['transTypeText'] = ($fetched ? 'Edit ' : 'Add New ') . $this->Transaction->get_transaction_types_list()[$transType];        $data['transType'] = $this->Transaction->get_transaction_types_list()[$transType];        $data['currenciesList'] = $this->Currency->load_currencies_list();        $drivers = $this->User->load_all_users_with_type_driver();        $employees = $this->User->load_all_users_with_type_employee();        $data['drivers'] = [0 => ""];        $this->load->model('Configuration');        $TVA1 = $this->Configuration->fetch_TVA1()["valueStr"];        $TVA2 = $this->Configuration->fetch_TVA2()["valueStr"];        $TVA = [0, doubleval($TVA1), doubleval($TVA2)];        $data['TVA'] = array_combine($TVA, $TVA);        $data["delivery_type"] = array(            " " => " ", "Delivery" => "Delivery",            "Self Pickup" => "Self Pickup",        );        foreach ($drivers as $d) {            $data['drivers'][$d["id"]] = $d["user_name"];        }        $data['employees'] = [0 => ""];        foreach ($employees as $e) {            $data['employees'][$e["id"]] = $e["user_name"];        }        if ($fetched) {            $this->load->model('Account');            $account = $this->Account->load($this->Transaction->get_field('account_id'));            $data['account'] = "{$account['account_number']} - {$account['account_name']}";            $account2 = $this->Account->load($this->Transaction->get_field('account2_id'));            $data['account2'] = "{$account2['account_number']} - {$account2['account_name']}";            $this->load->model('Transaction_item');            $trans_items = $this->Transaction_item->load_all_trans_items_for_QO_AND_OS($this->Transaction->get_field('id'));            $this->load->model(['Item']);            $data['trans_items'] = $this->Item->find_missing_products($trans_items);            if ($data['trans_items'] === []) {                $this->session->set_flashdata('message', '*No Missing Products*');                redirect('orders/index');            }            $this->load->model('Warehouse');            $data['warehouses_list'] = [];            foreach ($data['trans_items'] as $i => $t) {                $warehouse_shelf = $this->Warehouse->fetch_warehouse_and_shelf($t["warehouse_id"]);                $data['warehouse'][$i] = $warehouse_shelf['warehouse'];                $data['shelf'][$i] = $warehouse_shelf['shelf'];                $result = $this->Warehouse->fetch_item_in_inventory($t["item_id"]);                $order_warehouses = $this->Warehouse->fetch_all_order_warehouses();                foreach ($order_warehouses as $o) {                    $data['warehouses_list'][$i][$o["warehouse"]] = $o["warehouse"];                }                $order_shelfs = $this->Warehouse->fetch_shelf_of_order_warehouse($warehouse_shelf['warehouse']);                foreach ($order_shelfs as $os) {                    $data['shelf_list'][$i][$os['shelf']] = $os['shelf'];                }            }        } else {            $data['account'] = '';            $data['account2'] = '';            $data['trans_items'] = [];        }        return $data;    }    private function _load_related_models_for_to_invoice($fetched, $transType)    {        $data = [];        $this->load->model(['Currency', 'User']);        $data['transTypeText'] = ($fetched ? 'Edit ' : 'Add New ') . $this->Transaction->get_transaction_types_list()[$transType];        $data['transType'] = $this->Transaction->get_transaction_types_list()[$transType];        $data['currenciesList'] = $this->Currency->load_currencies_list();        $data['types'] = array(            "Individual" => "Individual", "Carage" => "Carage"        );        $data['account_type'] = array(            "Customer" => "Customer", "Supplier" => "Supplier",            "Cash" => "Cash", "Expenses" => "Expenses",            "Bank" => "Bank", "Sale VAT" => "Sale VAT",            "Purchase VAT" => "Purchase VAT"        );        $data["delivery_type"] = array(            " " => " ", "Delivery" => "SLATS Delivery",            "Self Pickup" => "Self Pickup", "DHL" => "DHL", "Post" => "Post"        );        $data["payment_methods"] = array(            " " => " ", "Cash" => "Cash", "TWINT" => "TWINT", "PayPal" => "PayPal",            "Postcard" => "Postcard", "Bank Transfer" => "Bank Transfer"        );        $this->load->model('Configuration');        $TVA1 = $this->Configuration->fetch_TVA1()["valueStr"];        $TVA2 = $this->Configuration->fetch_TVA2()["valueStr"];        $TVA = [0, doubleval($TVA1), doubleval($TVA2)];        $data['TVA'] = array_combine($TVA, $TVA);        // $drivers = $this->User->load_all_users_with_type_driver();        // $employees = $this->User->load_all_users_with_type_employee();        $all_users = $this->User->load_all_users();        $drivers = $employees = $all_users;        $data['drivers'] = [0 => ""];        foreach ($drivers as $d) {            $data['drivers'][$d["id"]] = $d["user_name"];        }        $data['employees'] = [0 => ""];        foreach ($employees as $e) {            $data['employees'][$e["id"]] = $e["user_name"];        }        $this->load->model('Warehouse');        $w = $this->Warehouse->load_warehouses_list();        $data['warehouse_list'] = array_combine($w, $w);        $data['trans_date'] = date("d-m-Y");        $add_days = 6;        $data['value_date'] = date('d-m-Y', strtotime($data['trans_date']) + (24 * 3600 * $add_days));        if ($fetched) {            $this->load->model('Account');            $account = $this->Account->load($this->Transaction->get_field('account_id'));            $data['account'] = "{$account['account_number']} - {$account['account_name']}";            $account2 = $this->Account->load($this->Transaction->get_field('account2_id'));            $data['account2'] = "{$account2['account_number']} - {$account2['account_name']}";            $this->load->model('Transaction_item');            $data['trans_items'] = $this->Transaction_item->load_all_trans_items_for_QO_AND_OS($this->Transaction->get_field('id'));            if ($data['trans_items'] !== []) {                $missing_products = $this->Item->find_missing_products($data['trans_items']);            }            $data['warehouse'] = [];            $data['shelf'] = [];            $data['shelf_list'] = [];            foreach ($data['trans_items'] as $t) {                $res = $this->Warehouse->fetch_warehouse_and_shelf($t["warehouse_id"]);                array_push($data['warehouse'], $res['warehouse']);                array_push($data['shelf'], $res['shelf']);                $s = $this->Warehouse->fetch_all_warehouse_shelfs($res['warehouse']);                $s = array_combine($s, $s);                array_push($data['shelf_list'], $s);            }        } else {            $data['account'] = '';            $data['account2'] = '';            $data['trans_items'] = [];        }        return $data;    }    public function preview($id)    {        $this->load->model('Account');        $this->load->model('Transaction_item');        $this->load->model('Configuration');        $this->load->model('Currency');        $this->load->model('Warehouse');        $data['trans'] = $this->Transaction->load_trans_data_by_trans_id($id);        $data['customer_info'] = $this->Account->fetch_account_info($data['trans']["account_id"]);        $data['sales_info'] = $this->Account->fetch_account_info($data['trans']["account2_id"]);        $data['trans_items'] = $this->Transaction_item->load_all_trans_items_for_QO_AND_OS($id);        $total = 0;        $subtotal = 0;        $tva_amount = 0;        foreach ($data['trans_items'] as $k => $t) {            $res = $this->Warehouse->fetch_warehouse_and_shelf($t['warehouse_id']);            $data['trans_items'][$k]["warehouse"] = $res["warehouse"];            $data['trans_items'][$k]["shelf"] = $res["shelf"];            $data['trans_items'][$k]["total"] = doubleval($t["price"]) * doubleval($t["qty"]) * (1 - (doubleval($t["discount"]) / 100));            $subtotal += $data['trans_items'][$k]["total"];            $data['trans_items'][$k]["sub_total"] = doubleval($t["price"]) * doubleval($t["qty"]);        }        $sub_total = $subtotal;        $data['sub_total'] = number_format($sub_total, 2, '.', '');        $tva_amount = ($subtotal + doubleval($data['trans']['delivery_charge'])) * (doubleval($data['trans']['TVA']) / 100);        $data['tva_amount'] = number_format($tva_amount, 2, '.', '');        $total = (($subtotal + doubleval($data['trans']['delivery_charge']) - doubleval($data['trans']["discount"])) * (1 + (doubleval($data['trans']['TVA']) / 100))) + doubleval($data['trans']["pfand"]);        $data['total'] = number_format($total, 2, '.', '');        $data['company_name'] = $this->Configuration->fetch_company_name()["valueStr"];        $data['company_address'] = $this->Configuration->fetch_company_address()["valueStr"];        $data['company_phone'] = $this->Configuration->fetch_company_phone()["valueStr"];        $data['company_email'] = $this->Configuration->fetch_company_email()["valueStr"];        $data['company_website'] = $this->Configuration->fetch_company_website()["valueStr"];        $data['currency'] = $this->Currency->fetch_currency_code($data['trans']["currency_id"])["currency_code"];        $data['pfand_note'] = "Austauschartikel (zzgl. " . $data['trans']['pfand'] . " " . $data['currency'] . " Pfand / exkl. 7.7% MwSt) wird dem Kunden bei der Rücksendung des Altteils zurückerstattet";        $data['title'] = "Order";        $this->load->view('templates/header', [            '_moreCss' => ['js/air-datepicker/css/datepicker.min'],            '_page_title' => "Print"        ]);        $this->load->view('orders/preview', $data);        $this->load->view('templates/footer', [            '_moreJs' => [                'air-datepicker/js/datepicker.min', 'air-datepicker/js/i18n/datepicker.en',                'jquery.autocomplete.min', 'sales/preview'            ]        ]);    }    public function view($id)    {        $data = [];        $this->load->model(['Currency', 'User', 'Account', 'Transaction_item']);        $data['transType'] = $this->Transaction->get_transaction_types_list()[Transaction::QuatationTransType];        $data['currenciesList'] = $this->Currency->load_currencies_list();        $data['trans'] = $this->Transaction->load_trans_data_by_trans_id($id);        $account = $this->Account->load($data['trans']['account_id']);        $data['account'] = "{$account['account_number']} - {$account['account_name']}";        $account2 = $this->Account->load($data['trans']['account2_id']);        $data['account2'] = "{$account2['account_number']} - {$account2['account_name']}";        $data['trans_items'] = $this->Transaction_item->load_all_trans_items_for_QO_AND_OS($id);        $subtotal = 0;        foreach ($data['trans_items'] as $k => $t) {            $data['trans_items'][$k]["total"] = doubleval($t["price"]) * doubleval($t["qty"]) * (1 - (doubleval($t["discount"]) / 100));            $subtotal += $data['trans_items'][$k]["total"];            $data['trans_items'][$k]["sub_total"] = doubleval($t["price"]) * doubleval($t["qty"]);        }        $data['final_subtotal'] = number_format($subtotal, 2, '.', '');        $total = (($subtotal + doubleval($data['trans']['delivery_charge'])) * (1 + (doubleval($data['trans']['TVA']) / 100))) - doubleval($data['trans']["discount"]) + doubleval($data['trans']["pfand"]);        $data['final_total'] = number_format($total, 2, '.', '');        if (!$data['trans']['user_id'] || $data['trans']['user_id'] == "0") {            $data['user_add'] = '';        } else {            $data['user_add'] = $this->User->get_user_name($data['trans']['user_id'])['user_name'];        }        if (!$data['trans']['user2_id'] || $data['trans']['user2_id'] == "0") {            $data['user_edit'] = '';        } else {            $data['user_edit'] = $this->User->get_user_name($data['trans']['user2_id'])['user_name'];        }        if (!$data['trans']['employee_id'] || $data['trans']['employee_id'] == "0") {            $data['employee_name'] = '';        } else {            $data['employee_name'] = $this->User->get_user_name($data['trans']['employee_id'])['user_name'];        }        if (!$data['trans']['driver_id'] || $data['trans']['driver_id'] == "0") {            $data['driver_name'] = '';        } else {            $data['driver_name'] = $this->User->get_user_name($data['trans']['driver_id'])['user_name'];        }        if ($data['trans']['delivery_type'] === "Post" || $data['trans']['delivery_type'] === "DHL") {            $data["dt_hide"] = 1;        } else {            $data["dt_hide"] = 0;        }        if ($data['trans']['delivery_type'] === "Delivery") {            $data['trans']['delivery_type'] = "SLATS Delivery";        }        $data['transTypeText'] = "Order View";        $this->load->view('templates/header', [            '_page_title' => $data['transTypeText']        ]);        $this->load->view('orders/view', $data);        $this->load->view('templates/footer', [            '_moreJs' => [                'air-datepicker/js/datepicker.min', 'air-datepicker/js/i18n/datepicker.en',                'jquery.autocomplete.min', 'orders/index'            ]        ]);    }    public function exit($id)    {        $this->Transaction->update_edit_user_id_and_locked($id, 0, '');        redirect('orders/index');    }    public function create_order_for_item_from_qu()    {        $this->load->model(['Transaction_item', 'Warehouse']);        $warehouse = $this->input->post('warehouse');        $shelf = $this->input->post('shelf');        $warehouse_id = $this->Warehouse->fetch_warehouse_id_by_warehouse_shelf($warehouse, $shelf)['id'];        $item = $this->input->post('item');        $trans = $this->input->post('trans');        $transType = 'OS';        // if($trans['auto_no'] !== ''){        // 	$description = $trans['description']." *Note: ordered from quotation #".$trans['auto_no']."*";        // }else{        // 	$description = $trans['description'];        // }        $this->Transaction->set_field('auto_no', $this->Transaction->set_next_auto_number($transType));        $this->Transaction->set_field('trans_type', $transType);        $this->Transaction->set_field('trans_date', date('d-m-Y'));        $this->Transaction->set_field('account_id', $trans['account_id']);        $this->Transaction->set_field('account2_id', $trans['account2_id']);        $this->Transaction->set_field('currency_id', $trans['currency_id']);        $this->Transaction->set_field('currency_rate', $trans['currency_rate']);        $this->Transaction->set_field('VIN', $trans['VIN']);        $this->Transaction->set_field('model', $trans['model']);        $this->Transaction->set_field('OE', $trans['OE']);        $this->Transaction->set_field('description', $trans['description']);        $this->Transaction->set_field('pfand', 0);        $this->Transaction->set_field('delivery_charge', 0);        $this->Transaction->set_field('discount', 0);        $this->Transaction->set_field('TVA', 0);        $this->Transaction->set_field('fiscal_year_id', $this->violet_auth->get_fiscal_year_id());        $this->Transaction->set_field('user_id', $this->violet_auth->get_user_id());        $saved = $this->Transaction->insert();        if ($saved) {            $this->Transaction_item->set_fields($item);            $this->Transaction_item->set_field('transaction_id', $this->Transaction->get_field('id'));            $this->Transaction_item->set_field('warehouse_id', $warehouse_id);            $this->Transaction_item->set_field('mvt_type', 0);            $this->Transaction_item->set_field('net_cost', "0");            $done = $this->Transaction_item->insert();            if ($done) {                $trans = $this->Transaction->load_trans_data_by_trans_id($this->Transaction->get_field('id'));                // var_dump($trans);                $total = floatval($item["price"]) * floatval($item["qty"]) * (1 - (floatval($item["discount"]) / 100));                $added = $this->Transaction->save_transaction_in_journals($trans, $this->Transaction->get_field('id'), $total, "OS");                if ($added) {                    echo('Customer Items Ordered Successfully');                } else {                    echo('Customer Item not ordered, something went wrong!');                }            } else {                echo('Customer Item not ordered, something went wrong!');            }        } else {            echo('Customer Item not ordered, something went wrong!');        }    }    public function create_slats_order_for_item_from_qu()    {        $this->load->model(['Transaction_item', 'Warehouse', 'Item']);        $acc_id = $this->input->post('acc_id');        $trans = $this->input->post('trans');        $warehouse = $this->input->post('warehouse');        $shelf = $this->input->post('shelf');        $item_id = $this->input->post('item_id');        // $item = $this->Item->load_item_data($item_id);        // var_dump($item[0]);exit;        $qty = $this->input->post('qty');        $warehouse_id = $this->Warehouse->fetch_warehouse_id_by_warehouse_shelf($warehouse, $shelf)['id'];        $transType = 'OS';        $this->Transaction->set_field('auto_no', $this->Transaction->set_next_auto_number($transType));        $this->Transaction->set_field('trans_type', $transType);        $this->Transaction->set_field('trans_date', date('d-m-Y'));        $this->Transaction->set_field('account_id', $acc_id);        $this->Transaction->set_field('account2_id', $trans['account2_id']);        $this->Transaction->set_field('currency_id', $trans['currency_id']);        $this->Transaction->set_field('currency_rate', $trans['currency_rate']);        $this->Transaction->set_field('VIN', '');        $this->Transaction->set_field('model', '');        $this->Transaction->set_field('OE', '');        $this->Transaction->set_field('description', '');        $this->Transaction->set_field('pfand', 0);        $this->Transaction->set_field('discount', 0);        $this->Transaction->set_field('delivery_charge', 0);        $this->Transaction->set_field('TVA', 0);        $this->Transaction->set_field('fiscal_year_id', $this->violet_auth->get_fiscal_year_id());        $this->Transaction->set_field('user_id', $this->violet_auth->get_user_id());        $saved = $this->Transaction->insert();        if ($saved) {            $item = $this->Item->load_item_data($item_id);            $this->Transaction_item->set_field('item_id', $item_id);            $this->Transaction_item->set_field('transaction_id', $this->Transaction->get_field('id'));            $this->Transaction_item->set_field('warehouse_id', $warehouse_id);            $this->Transaction_item->set_field('qty', $qty);            $this->Transaction_item->set_field('mvt_type', 0);            $this->Transaction_item->set_field('cost', ($item[0]['cost']) ? $item[0]['cost'] : 0);            $this->Transaction_item->set_field('price', ($item[0]['cost']) ? $item[0]['cost'] : 0);            $this->Transaction_item->set_field('item_profit', 0);            $this->Transaction_item->set_field('net_cost', 0);            $this->Transaction_item->set_field('discount', 0);            $done = $this->Transaction_item->insert();            if ($done) {                $trans = $this->Transaction->load_trans_data_by_trans_id($this->Transaction->get_field('id'));                $total = floatval($item[0]["cost"]) * floatval($qty);                $added = $this->Transaction->save_transaction_in_journals($trans, $this->Transaction->get_field('id'), $total, "OS");                if ($added) {                    echo('SLATS Items Ordered Successfully');                } else {                    echo('Something went wrong!');                }            } else {                echo('Something went wrong!');            }        } else {            echo('Something went wrong!');        }    }    public function update_order_item_warehouse_and_shelf()    {        $this->load->model(['Transaction_item', 'Warehouse']);        $post = $this->input->post(null, true);        if ($post) {            $warehouse_id = $this->Warehouse->fetch_warehouse_id_by_warehouse_shelf($post['warehouse'], $post['shelf']);            if ($warehouse_id) {                $res = $this->Transaction_item->update_transaction_item_warehouse_id($post['trans_item_id'], $warehouse_id['id']);                if ($res) {                    echo "1";                } else {                    echo "0";                }            } else {                echo "0";            }        } else {            echo "0";        }    }    public function change_status()    {        $itemId = $this->input->post('itemId');        $status = 0;        $item = $this->Transaction->load_trans_data_by_trans_id($itemId);        if ($item['status'] == 0) {            $status = 1;        } elseif ($item['status'] == 1) {            $status = 0;        }        $data = array(            'status' => $status        );        $this->db->where('id', $itemId);        $this->db->update('transactions', $data);    }}