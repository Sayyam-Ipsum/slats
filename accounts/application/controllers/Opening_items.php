<?phpdefined('BASEPATH') or die('No direct script access allowed');/** * @property Account $Account * @property Currency $Currency * @property Item $Item * @property Transaction $Transaction * @property Warehouse $Warehouse */class Opening_items extends MY_Controller{    public $Transaction = NULL;    public function __construct()    {        parent::__construct();        $this->pageTitle = $this->lang->line('opening_items');        $this->load->model('Transaction');    }    public function index()    {        if ($this->input->is_ajax_request()) {            $this->_render_json($this->Transaction->load_opening_items_data_tables(Transaction::OpeningItemTransType));        } else {            $this->session->unset_userdata('previous_url');            $this->session->set_userdata('previous_url', 'opening_items/index');            $this->pageTitle = $this->lang->line('opening_items');            $this->load->model('Transaction_item');            $data['records'] = $this->Transaction->paginate_opening_items(Transaction::OpeningItemTransType);            $this->load->view('templates/header', [                '_page_title' => "Opening Items",                '_moreCss' => ['css/dataTables.bootstrap.min', 'css/fixedHeader.dataTables.min']            ]);            $this->load->view('opening_items/index', $data);            $this->load->view('templates/footer', ['_moreJs' => ['jquery.dataTables.min', 'dataTables.bootstrap.min', 'opening_items/index']]);        }    }    public function add()    {        $this->save(Transaction::OpeningItemTransType, 0);    }    public function edit($id = '0')    {        $this->save(Transaction::OpeningItemTransType, $id);    }    private function save($transType, $id = '0')    {        $fetched = ($id > 0 ? $this->Transaction->fetch(_gnv($id)) : false);        $this->load->model('Configuration');        $local_currency = $this->Configuration->fetch_local_currency()['valueInt'];        $post = $this->input->post(['trans', 'transItems', 'submitBtn'], true);        if ((!$fetched) and ($this->Transaction->set_next_auto_number($transType))) {            $this->Transaction->set_field('auto_no', $this->Transaction->set_next_auto_number($transType));        }        if ($post['submitBtn']) {            if ((!$fetched) and ($this->Transaction->set_next_auto_number($transType))) {                $post['trans']['auto_no'] = $this->Transaction->set_next_auto_number($transType);            }            $this->Transaction->set_fields($post['trans']);            $this->Transaction->set_field('account_id', 1);            $this->Transaction->set_field('account2_id', 1);            $this->Transaction->set_field('currency_id', $local_currency);            $this->Transaction->set_field('trans_type', $transType);            $this->Transaction->set_field('fiscal_year_id', $this->violet_auth->get_fiscal_year_id());            $this->Transaction->set_field('user_id', $this->violet_auth->get_user_id());            $saved = $fetched ? $this->Transaction->update() : $this->Transaction->insert();            if ($saved) {                $this->load->model('Item');                if (!$fetched) {                    $this->Transaction->save_opening_items_trans_items($post['transItems'], 1);                    $this->Transaction->update_items_open_qty($post['transItems']);                    $this->Transaction->update_items_qty($post['transItems']);                    redirect('opening_items/index');                } elseif ($fetched) {                    $this->load->model('Transaction_item');                    $trans_items = $this->Transaction_item->load_all_trans_items($this->Transaction->get_field('id'));                    //delete trans_items                                     $trans_items_id = $this->Transaction_item->fetch_trans_items_id_for_edit($this->Transaction->get_field('id'));                    foreach ($trans_items_id as $t) {                        $this->Transaction_item->delete($t["id"]);                    }                    //insert trans_items                    $this->Transaction->save_opening_items_trans_items($post['transItems'], 1);                    //update qty and open_qty                    $this->Transaction->update_items_open_qty($trans_items);                    $this->Transaction->update_items_qty($trans_items);                    $this->Transaction->update_items_open_qty($post['transItems']);                    $this->Transaction->update_items_qty($post['transItems']);                    $this->session->set_flashdata('message_op', '*Successfully Updated*');                    redirect($this->session->userdata('previous_url'));                }            } elseif ($this->Transaction->is_valid()) {                redirect($this->session->userdata('previous_url'));            }        }        $data = $this->_load_related_models($fetched, $transType);        $data['transTypeText'] = "Add Group Opening Product";        $this->load->view('templates/header', [            '_moreCss' => ['js/air-datepicker/css/datepicker.min', 'css/bootstrap-select.min'],            '_page_title' => $data['transTypeText']        ]);        $this->load->view('opening_items/group_opening', $data);        $this->load->view('templates/footer', [            '_moreJs' => [                'air-datepicker/js/datepicker.min', 'air-datepicker/js/i18n/datepicker.en',                'jquery.autocomplete.min', 'bootstrap-select.min', 'items/group_opening'            ]        ]);    }    private function _load_related_models($fetched, $transType)    {        $data = [];        $this->load->model(['Currency']);        $data['transTypeText'] = ($fetched ? 'Edit ' : 'Add New ') . $this->Transaction->get_transaction_types_list()[$transType];        $data['transType'] = $this->Transaction->get_transaction_types_list()[$transType];        $system_currency_id = $this->Currency->get_sys_config_cur()["valueint"];        $data['system_currency_rate'] = $this->Currency->fetch_currency_rate($system_currency_id)["currency_rate"];        $data['system_currency_code'] = $this->Currency->fetch_currency_code($system_currency_id)["currency_code"];        $this->load->model('Configuration');        $TVA1 = $this->Configuration->fetch_TVA1()["valueStr"];        $TVA2 = $this->Configuration->fetch_TVA2()["valueStr"];        $TVA = [0, doubleval($TVA1), doubleval($TVA2)];        $data['TVA'] = array_combine($TVA, $TVA);        if ($fetched) {            $this->load->model('Transaction_item');            $data['trans_items'] = $this->Transaction_item->load_all_trans_items($this->Transaction->get_field('id'));            $this->load->model('Warehouse');            $data['warehouse'] = [];            $data['shelf'] = [];            $data['shelf_list'] = [];            foreach ($data['trans_items'] as $t) {                $res = $this->Warehouse->fetch_warehouse_and_shelf($t["warehouse_id"]);                array_push($data['warehouse'], $res['warehouse']);                array_push($data['shelf'], $res['shelf']);                $s = $this->Warehouse->fetch_all_warehouse_shelfs($res['warehouse']);                $s = array_combine($s, $s);                array_push($data['shelf_list'], $s);            }            $w = $this->Warehouse->load_warehouses_list();            $data['warehouses_list'] = array_combine($w, $w);            $data['item_id'] = $data['trans_items'][0]["item_id"];            $data['trans_date'] = $this->Transaction->get_field('trans_date');            $currency_id = $this->Currency->fetch_currency_id_by_code("â‚¬")["id"];            $data['currency_rate'] = $this->Currency->fetch_currency_rate($currency_id)["currency_rate"];        } else {            $data['trans_items'] = [];            $this->load->model('Warehouse');            $w = $this->Warehouse->load_warehouses_list();            $data['warehouses_list'] = array_combine($w, $w);            $data['trans_date'] = date("d-m-Y");        }        return $data;    }    public function delete($id)    {        $this->load->model('Transaction_item');        $trans_items = $this->Transaction_item->load_all_trans_items($id);        $this->load->model('Item');        if ($this->Transaction->delete($id)) {            $this->Transaction->update_items_open_qty($trans_items);            $this->Transaction->update_items_qty($trans_items);            redirect('opening_items/index');        } else {            redirect('opening_items/index');        }    }    public function lookup_items()    {        $this->load->model('Item');        $this->_render_json(            $this->Item->search_suggestions(trim($this->input->get('query', true)))        );    }    public function product_openings($item_id)    {        $data["item_id"] = $item_id;        $this->load->model('Item');        $product = $this->Item->load_item_data($item_id);        $data["EAN"] = $product[0]["EAN"];        $data["artical_nb"] = $product[0]["artical_number"];        if ($this->input->is_ajax_request()) {            $this->_render_json($this->Transaction->load_product_openings_data_tables(Transaction::OpeningItemTransType, $item_id));        } else {            $this->session->unset_userdata('previous_url');            $this->session->set_userdata('previous_url', 'opening_items/index');            $this->pageTitle = $this->lang->line('opening_items');            $this->load->model('Transaction_item');            $data['records'] = $this->Transaction->paginate_product_openings(Transaction::OpeningItemTransType, $item_id);            $this->load->view('templates/header', [                '_page_title' => "Opening Items",                '_moreCss' => ['css/dataTables.bootstrap.min', 'css/fixedHeader.dataTables.min']            ]);            $this->load->view('opening_items/product_openings', $data);            $this->load->view('templates/footer', ['_moreJs' => ['jquery.dataTables.min', 'dataTables.bootstrap.min', 'opening_items/product_openings']]);        }    }}