<?phpdefined('BASEPATH') or die('No direct script access allowed');/** * @property Account $Account * @property Currency $Currency * @property Item $Item * @property Transaction $Transaction * @property Transaction_item $Transaction_item */class Sales extends MY_Controller{    public $Transaction = NULL;    public function __construct()    {        parent::__construct();        $this->pageTitle = $this->lang->line('invoices');        $this->load->model('Transaction');    }    public function index()    {        if ($this->input->is_ajax_request()) {            $this->_render_json($this->Transaction->load_sales_data_tables(Transaction::SaleTransType));        } else {            $this->session->unset_userdata('previous_url');            $this->session->set_userdata('previous_url', 'sales/index');            $this->pageTitle = $this->lang->line('Sales');            $this->load->model('Transaction_item');            $data['records'] = $this->Transaction->paginate_sales_data(Transaction::SaleTransType);            // var_dump($data['records']);            // exit;            $data['title'] = $this->lang->line('invoices');            $this->load->view('templates/header', [                '_page_title' => $this->lang->line('invoices'),                '_moreCss' => ['css/dataTables.bootstrap.min', 'css/fixedHeader.dataTables.min']            ]);            $this->load->view('sales/index', $data);            //$this->load->view('templates/footer', ['_moreJs' => ['jquery.dataTables.min', 'dataTables.bootstrap.min', 'dataTables.datetime.format', 'jquery.dataTable.pagination.input', 'jquery.autocomplete.min', 'sales/index']]);            $this->load->view('templates/footer', ['_moreJs' => ['jquery.dataTables.min', 'dataTables.bootstrap.min', 'jquery.dataTable.pagination.input', 'sales/index']]);        }    }    public function add()    {        $this->save(Transaction::SaleTransType, 0);    }    public function edit($id = '0')    {        if ($this->violet_auth->get_user_type() !== 'Master Admin') {            $trans = $this->Transaction->check_if_user_can_edit($id);            if ($trans["check"] === 1) {                // if ($trans["edit_user_id"] !== $this->violet_auth->get_user_id()) {                // 	$this->Transaction->update_edit_user_id_and_locked($id, 1, $this->violet_auth->get_user_id());                // }                $this->save(Transaction::SaleTransType, $id);            } else {                $this->load->model('User');                $user_name = $this->User->get_user_name($trans["edit_user_id"])['user_name'];                $this->session->set_flashdata('message', 'Warning: this invoice (#' . $trans["auto_no"] . ') is locked by ' . $user_name . '.');                redirect('sales/index');            }        } else {            $this->save(Transaction::SaleTransType, $id);        }    }    private function save($transType, $id = '0')    {        $fetched = ($id > 0 ? $this->Transaction->fetch(_gnv($id)) : false);        $post = $this->input->post(['trans', 'transItems', 'submitBtn'], true);        if ((!$fetched) and ($this->Transaction->set_next_auto_number($transType))) {            $this->Transaction->set_field('auto_no', $this->Transaction->set_next_auto_number($transType));        }        if ($post['submitBtn']) {            // var_dump($post['trans']);            // exit;            if ((!$fetched) and ($this->Transaction->set_next_auto_number($transType))) {                $post['trans']['auto_no'] = $this->Transaction->set_next_auto_number($transType);                $this->Transaction->set_field('user_id', $this->violet_auth->get_user_id());            }            $this->Transaction->set_fields($post['trans']);            $this->Transaction->set_field('trans_type', $transType);            $this->Transaction->set_field('fiscal_year_id', $this->violet_auth->get_fiscal_year_id());            if ($fetched) {                $this->Transaction->set_field('user2_id', $this->violet_auth->get_user_id());                $this->Transaction->set_field('locked', 0);                $this->Transaction->set_field('edit_user_id', '');                $this->load->model('Transaction_item');                $trans = $this->Transaction->load_trans_data_by_trans_id($id);                $trans_items = $this->Transaction_item->load_all_trans_items($id);            }            $saved = $fetched ? $this->Transaction->update() : $this->Transaction->insert();            if ($saved) {                if (!$fetched) {                    $this->Transaction->save_transaction_items($post['transItems'], -1);                    $total = $this->Transaction->calculate_transaction_total($post['transItems'], $post['trans']['discount'], $post['trans']['TVA']);                    $this->load->model('Account');                    $trans_id = $this->Transaction->fetch_transaction_id_by_autono($post['trans']['auto_no'], $transType);                    $this->Transaction->save_transaction_in_journals($post['trans'], $trans_id["0"]["id"], $total, "SA");                    $journal_id = $this->Transaction->fetch_journal_id_by_transaction_id($trans_id["0"]["id"], $transType);                    $name1 = $this->Account->fetch_account_name_by_id($post['trans']['account_id']);                    $name2 = $this->Account->fetch_account_name_by_id($post['trans']['account2_id']);                    $this->Transaction->save_in_journal_accounts($journal_id["0"]["id"], $post['trans']['account2_id'], $post['trans']['auto_no'], $total, "-1", $name1["0"]["account_name"], "Sale");                    $this->Transaction->save_in_journal_accounts($journal_id["0"]["id"], $post['trans']['account_id'], $post['trans']['auto_no'], $total, "1", $name2["0"]["account_name"], "Sale");                    //update items qty                    $this->Transaction->update_items_qty($post['transItems']);                    $this->load->model('Journal');                    //update balance debit credit for account 1                    $balance = $this->Journal->calculate_account_balance($post['trans']['account_id'])["total"];                    $credit = $this->Journal->calculate_account_credit($post['trans']['account_id'])["total"];                    $debit = $this->Journal->calculate_account_debit($post['trans']['account_id'])["total"];                    $this->Account->update_account_credit_debit_balance($post['trans']['account_id'], $balance, $credit, $debit);                    //update balance debit credit for account 2                    $balance = $this->Journal->calculate_account_balance($post['trans']['account2_id'])["total"];                    $credit = $this->Journal->calculate_account_credit($post['trans']['account2_id'])["total"];                    $debit = $this->Journal->calculate_account_debit($post['trans']['account2_id'])["total"];                    $this->Account->update_account_credit_debit_balance($post['trans']['account2_id'], $balance, $credit, $debit);                    if ($post['submitBtn'] === "Save") {                        redirect('sales/edit/' . $this->Transaction->get_field('id'));                    } else {                        redirect('sales/index');                    }                } elseif ($fetched) {                    //update balance debit credit                    $this->load->model('Account');                    $total = $this->Transaction->calculate_transaction_total($post['transItems'], $post['trans']['discount'], $post['trans']['TVA']);                    //delete journal                    $this->load->model('Journal');                    $journal_id = $this->Journal->fetch_journal_id_by_transaction_id($this->Transaction->get_field('id'));                    $this->Journal->delete($journal_id["id"]);                    //delete journal_acc                    $this->load->model('Journal_account');                    $journal_acc_ids = $this->Journal_account->fetch_journal_accounts_id_by_journal_id($journal_id["id"]);                    foreach ($journal_acc_ids as $j) {                        $this->Journal_account->delete($j["id"]);                    }                    //insert journal                    $total = $this->Transaction->calculate_transaction_total($post['transItems'], $post['trans']['discount'], $post['trans']['TVA']);                    $this->Transaction->save_transaction_in_journals($post['trans'], $this->Transaction->get_field('id'), $total, "SA");                    //get new journal id                    $new_journal_id = $this->Journal->fetch_journal_id_by_transaction_id($this->Transaction->get_field('id'));                    //insert journal accounts                    $this->load->model('Account');                    $name1 = $this->Account->fetch_account_name_by_id($post['trans']['account_id']);                    $name2 = $this->Account->fetch_account_name_by_id($post['trans']['account2_id']);                    $this->Transaction->save_in_journal_accounts($new_journal_id["id"], $post['trans']['account2_id'], $post['trans']['auto_no'], $total, "-1", $name1["0"]["account_name"], "Sale");                    $this->Transaction->save_in_journal_accounts($new_journal_id["id"], $post['trans']['account_id'], $post['trans']['auto_no'], $total, "1", $name2["0"]["account_name"], "Sale");                    //delete trans_items                    $this->load->model('Transaction_item');                    $trans_items_id = $this->Transaction_item->fetch_trans_items_id_for_edit($this->Transaction->get_field('id'));                    foreach ($trans_items_id as $t) {                        $this->Transaction_item->delete($t["id"]);                    }                    //insert trans_items                    $this->Transaction->save_transaction_items($post['transItems'], -1);                    //update items qty                    $this->Transaction->update_items_qty($trans_items);                    $this->Transaction->update_items_qty($post['transItems']);                    $this->load->model('Journal');                    //update balance debit credit for account 1                    $balance = $this->Journal->calculate_account_balance($post['trans']['account_id'])["total"];                    $credit = $this->Journal->calculate_account_credit($post['trans']['account_id'])["total"];                    $debit = $this->Journal->calculate_account_debit($post['trans']['account_id'])["total"];                    $this->Account->update_account_credit_debit_balance($post['trans']['account_id'], $balance, $credit, $debit);                    //update balance debit credit for account 2                    $balance = $this->Journal->calculate_account_balance($post['trans']['account2_id'])["total"];                    $credit = $this->Journal->calculate_account_credit($post['trans']['account2_id'])["total"];                    $debit = $this->Journal->calculate_account_debit($post['trans']['account2_id'])["total"];                    $this->Account->update_account_credit_debit_balance($post['trans']['account2_id'], $balance, $credit, $debit);                    if ($trans['account_id'] !== $post['trans']['account_id']) {                        $balance = $this->Journal->calculate_account_balance($trans['account_id'])["total"];                        $credit = $this->Journal->calculate_account_credit($trans['account_id'])["total"];                        $debit = $this->Journal->calculate_account_debit($trans['account_id'])["total"];                        $this->Account->update_account_credit_debit_balance($trans['account_id'], $balance, $credit, $debit);                    }                    if ($trans['account2_id'] !== $post['trans']['account2_id']) {                        $balance = $this->Journal->calculate_account_balance($trans['account2_id'])["total"];                        $credit = $this->Journal->calculate_account_credit($trans['account2_id'])["total"];                        $debit = $this->Journal->calculate_account_debit($trans['account2_id'])["total"];                        $this->Account->update_account_credit_debit_balance($trans['account2_id'], $balance, $credit, $debit);                    }                    if ($post['submitBtn'] === "Save") {                        redirect('sales/edit/' . $id);                    } else {                        redirect('sales/index');                    }                    // redirect($this->session->userdata('previous_url'));                }            } elseif ($this->Transaction->is_valid()) {                redirect($this->session->userdata('previous_url'));            }        }        $data = $this->_load_related_models($fetched, $transType, "Invoice");        $this->load->view('templates/header', [            '_moreCss' => ['js/air-datepicker/css/datepicker.min'],            '_page_title' => $data['transTypeText']        ]);        $this->load->view('sales/sales_form', $data);        $this->load->view('templates/footer', [            '_moreJs' => [                'air-datepicker/js/datepicker.min', 'air-datepicker/js/i18n/datepicker.en',                'jquery.autocomplete.min', 'transactions/form', 'accounts/account_modal', 'items/item_modal'            ]        ]);    }    private function _load_related_models($fetched, $transType, $transTypeText)    {        $data = [];        $this->load->model('Currency');        $this->load->model('User');        $data['transTypeText'] = ($fetched ? 'Edit ' : 'Add New ') . $transTypeText;        $data['transType'] = $this->Transaction->get_transaction_types_list()[$transType];        $data['currenciesList'] = $this->Currency->load_currencies_list();        $data['types'] = array(            "Individual" => "Individual", "Carage" => "Carage"        );        $data['account_type'] = array(            "Customer" => "Customer", "Supplier" => "Supplier",            "Cash" => "Cash", "Expenses" => "Expenses",            "Bank" => "Bank", "Sale VAT" => "Sale VAT",            "Purchase VAT" => "Purchase VAT"        );        $data["delivery_type"] = array(            " " => " ", "Delivery" => "SLATS Delivery",            "Self Pickup" => "Self Pickup", "DHL" => "DHL", "Post" => "Post"        );        $data["payment_methods"] = array(            " " => " ", "Cash" => "Cash", "TWINT" => "TWINT", "PayPal" => "PayPal",            "Postcard" => "Postcard", "Bank Transfer" => "Bank Transfer"        );        $this->load->model('Configuration');        $TVA1 = $this->Configuration->fetch_TVA1()["valueStr"];        $TVA2 = $this->Configuration->fetch_TVA2()["valueStr"];        $TVA = [0, doubleval($TVA1), doubleval($TVA2)];        $data['TVA'] = array_combine($TVA, $TVA);        $all_users = $this->User->load_all_users();        $drivers = $employees = $all_users;        // $drivers = $this->User->load_all_users_with_type_driver();        // $employees = $this->User->load_all_users_with_type_employee();        $data['drivers'] = [0 => ""];        foreach ($drivers as $d) {            $data['drivers'][$d["id"]] = $d["user_name"];        }        $data['employees'] = [0 => ""];        foreach ($employees as $e) {            $data['employees'][$e["id"]] = $e["user_name"];        }        $this->load->model('Warehouse');        $w = $this->Warehouse->load_warehouses_list();        $data['warehouse_list'] = array_combine($w, $w);        if ($fetched) {            $this->load->model('Account');            $account = $this->Account->load($this->Transaction->get_field('account_id'));            $data['account'] = "{$account['account_number']} - {$account['account_name']}";            $account2 = $this->Account->load($this->Transaction->get_field('account2_id'));            $data['account2'] = "{$account2['account_number']} - {$account2['account_name']}";            $this->load->model('Transaction_item');            $data['trans_items'] = $this->Transaction_item->load_all_trans_items($this->Transaction->get_field('id'));            $data['warehouse'] = [];            $data['shelf'] = [];            $data['shelf_list'] = [];            foreach ($data['trans_items'] as $t) {                $res = $this->Warehouse->fetch_warehouse_and_shelf($t["warehouse_id"]);                array_push($data['warehouse'], $res['warehouse']);                array_push($data['shelf'], $res['shelf']);                $s = $this->Warehouse->fetch_all_warehouse_shelfs($res['warehouse']);                $s = array_combine($s, $s);                array_push($data['shelf_list'], $s);            }            $data['trans_date'] = $this->Transaction->get_field('trans_date');            $data['value_date'] = $this->Transaction->get_field('value_date');            $data['status'] = $this->Transaction->get_field('status');            $data['delivered'] = $this->Transaction->get_field('delivered');            $this->load->model("User");            $driver = $this->User->get_user_name($this->Transaction->get_field('driver_id'));            if ($driver) {                $data['driver'] = $driver["user_name"];            } else {                $data['driver'] = '';            }            $user_add = $this->User->get_user_name($this->Transaction->get_field('user_id'));            if ($user_add) {                $data['user_add'] = $user_add['user_name'];            } else {                $data['user_add'] = '';            }            $user_edit = $this->User->get_user_name($this->Transaction->get_field('user2_id'));            if ($user_edit) {                $data['user_edit'] = $user_add['user_name'];            } else {                $data['user_edit'] = '';            }            $data['created_on'] = $this->Transaction->get_transaction_created_on_field($this->Transaction->get_field('id'))['created_on'];            $data['returns'] = $this->Transaction->load_all_return_sale_items_of_invoice($this->Transaction->get_field('id'));        } else {            $data['account'] = '';            $data['account2'] = '';            $data['trans_items'] = [];            $data['trans_date'] = date("d-m-Y");            $add_days = 6;            $data['value_date'] = date('d-m-Y', strtotime($data['trans_date']) + (24 * 3600 * $add_days));            $data['status'] = 0;            $data['driver'] = '';            $data['user_add'] = '';            $data['user_edit'] = '';            $data['created_on'] = '';            $data['delivered'] = 0;            $data['returns'] = [];        }        return $data;    }    public function delete($id)    {        $this->load->model('Account');        $this->load->model('Transaction_item');        $trans = $this->Transaction->load_trans_data_by_trans_id($id);        $trans_items = $this->Transaction_item->load_all_trans_items($id);        if ($this->Transaction->delete($id)) {            //update qty            $this->Transaction->update_items_qty($trans_items);            $this->load->model('Journal');            //update balance debit credit for account 1            $balance = $this->Journal->calculate_account_balance($trans['account_id'])["total"];            $credit = $this->Journal->calculate_account_credit($trans['account_id'])["total"];            $debit = $this->Journal->calculate_account_debit($trans['account_id'])["total"];            $this->Account->update_account_credit_debit_balance($trans['account_id'], $balance, $credit, $debit);            //update balance debit credit for account 2            $balance = $this->Journal->calculate_account_balance($trans['account2_id'])["total"];            $credit = $this->Journal->calculate_account_credit($trans['account2_id'])["total"];            $debit = $this->Journal->calculate_account_debit($trans['account2_id'])["total"];            $this->Account->update_account_credit_debit_balance($trans['account2_id'], $balance, $credit, $debit);            if ($trans['relation_id']) {                $this->Transaction->update_transfered($trans['relation_id'], 0);            }            redirect('sales/index');        } else {            // $this->add_msg($this->lang->line('record_not_deleted'), 'warning');            redirect('sales/index');        }    }    public function lookup_accounts()    {        $this->load->model('Account');        $this->_render_json(            $this->Account->search_suggestions(trim($this->input->get('query', true)))        );    }    public function lookup_items()    {        $this->load->model('Item');        $this->_render_json(            $this->Item->search_suggestions(trim($this->input->get('query', true)))        );    }    public function lookup_sales_accounts($currency_id)    {        $this->load->model('Account');        $this->_render_json(            $this->Account->search_sales_suggestions(trim($this->input->get('query', true)), $currency_id)        );    }    public function preview($id)    {        $this->load->model('Account');        $this->load->model('Transaction_item');        $this->load->model('Configuration');        $this->load->model('Currency');        $this->load->model('Warehouse');        $data['trans'] = $this->Transaction->load_trans_data_by_trans_id($id);        $data['returns'] = $this->Transaction->load_all_return_sale_items_of_invoice($id);        $data['customer_info'] = $this->Account->fetch_account_info($data['trans']["account_id"]);        $data['sales_info'] = $this->Account->fetch_account_info($data['trans']["account2_id"]);        $data['trans_items'] = $this->Transaction_item->load_all_trans_items($id);        $total = 0;        $subtotal = 0;        $tva_amount = 0;        foreach ($data['trans_items'] as $k => $t) {            $res = $this->Warehouse->fetch_warehouse_and_shelf($t['warehouse_id']);            $data['trans_items'][$k]["warehouse"] = $res["warehouse"];            $data['trans_items'][$k]["shelf"] = $res["shelf"];            $data['trans_items'][$k]["total"] = doubleval($t["price"]) * doubleval($t["qty"]) * (1 - (doubleval($t["discount"]) / 100));            $subtotal += $data['trans_items'][$k]["total"];            $data['trans_items'][$k]["sub_total"] = doubleval($t["price"]) * doubleval($t["qty"]);        }        $returned_tot = 0;        foreach ($data['returns'] as $k => $t) {            $data['returns'][$k]["total"] = doubleval($t["price"]) * doubleval($t["qty"]) * (1 - (doubleval($t["discount"]) / 100));            $returned_tot += $data['returns'][$k]["total"];            $data['returns'][$k]["sub_total"] = doubleval($t["price"]) * doubleval($t["qty"]);        }        $sub_total = $subtotal;        $data['sub_total'] = number_format($sub_total, 2, '.', '');        $tva_amount = ($subtotal + doubleval($data['trans']['delivery_charge'])) * (doubleval($data['trans']['TVA']) / 100);        $data['tva_amount'] = number_format($tva_amount, 2, '.', '');        $total = (($subtotal + doubleval($data['trans']['delivery_charge']) - doubleval($data['trans']["discount"])) * (1 + (doubleval($data['trans']['TVA']) / 100))) + doubleval($data['trans']["pfand"]);        $data['total'] = number_format($total - $returned_tot, 2, '.', '');        $data['company_name'] = $this->Configuration->fetch_company_name()["valueStr"];        $data['company_address'] = $this->Configuration->fetch_company_address()["valueStr"];        $data['company_phone'] = $this->Configuration->fetch_company_phone()["valueStr"];        $data['company_email'] = $this->Configuration->fetch_company_email()["valueStr"];        $data['company_website'] = $this->Configuration->fetch_company_website()["valueStr"];        $data['currency'] = $this->Currency->fetch_currency_code($data['trans']["currency_id"])["currency_code"];        $data['pfand_note'] = "Austauschartikel (zzgl. " . $data['trans']['pfand'] . " " . $data['currency'] . " Pfand / exkl. 7.7% MwSt) wird dem Kunden bei der Rücksendung des Altteils zurückerstattet";        $data['title'] = "Sale Invoice";        $this->load->view('templates/header', [            '_moreCss' => ['js/air-datepicker/css/datepicker.min'],            '_page_title' => "Print Sale"        ]);        $this->load->view('sales/preview', $data);        $this->load->view('templates/footer', [            '_moreJs' => [                'air-datepicker/js/datepicker.min', 'air-datepicker/js/i18n/datepicker.en',                'jquery.autocomplete.min', 'sales/preview'            ]        ]);    }    public function check($id)    {        $this->load->model('Transaction_item');        $this->load->model('Item');        $data['trans'] = $this->Transaction->load_trans_data_by_trans_id($id);        $data['trans_items'] = $this->Transaction_item->load_all_trans_items_grouped_by_item_id($id);        $post = $this->input->post(['trans', 'transItems', 'submitBtn', 'import'], true);        $data['missing_products'] = [];        $data['extra_products'] = [];        $data['posted_products'] = [];        $data['imported_items'] = [];        // var_dump($post);        // exit;        if ($post['import']) {            if ($_FILES["file"]["name"] !== "") {                $path = $_FILES["file"]["tmp_name"];                require_once APPPATH . "libraries/PHPExcel/Classes/PHPExcel.php";                $object = PHPExcel_IOFactory::load($path);                foreach ($object->getWorksheetIterator() as $worksheet) {                    $highestRow = $worksheet->getHighestRow();                    $highestColumn = $worksheet->getHighestColumn();                    for ($row = 2; $row <= $highestRow; $row++) {                        $artical_number = $worksheet->getCellByColumnAndRow(1, $row)->getValue();                        if ($artical_number !== NULL) {                            $qty = $worksheet->getCellByColumnAndRow(3, $row)->getValue();                            $price = $worksheet->getCellByColumnAndRow(4, $row)->getValue();                            if (!is_numeric($qty)) {                                $this->session->set_flashdata('message', '*Rejected: all Qty values in Excel File must be Numeric*');                                redirect("sales/check/" . $id);                            }                            if (!is_numeric($price)) {                                $this->session->set_flashdata('message', '*Rejected: all Price values in Excel File must be Numeric*');                                redirect("sales/check/" . $id);                            }                            $excel_data[] = array(                                'artical_number' => $artical_number,                                'qty' => $qty,                                'price' => $price                            );                        }                    }                }                if ($highestColumn === "E") {                    $this->load->model('Item');                    foreach ($excel_data as $k => $e) {                        $item = $this->Item->fetch_item_data_by_artical_nb($e["artical_number"]);                        $data['imported_items'][$k]["item_id"] = $item["id"];                        $data['imported_items'][$k]["EAN"] = $item["EAN"];                        $data['imported_items'][$k]["artical_number"] = $e["artical_number"];                        $data['imported_items'][$k]["qty"] = $e["qty"];                    }                } else {                    $this->session->set_flashdata('message', '*Rejected: The selected Excel File columns number not equal to 5*');                    redirect("sales/check/" . $id);                }            }        }        if ($post['submitBtn']) {            foreach ($post['transItems'] as $k => $p) {                $item = $this->Item->fetch_item($p["item_id"]);                $data['posted_products'][$k] = ["item_id" => $p["item_id"], "EAN" => $item[0]["EAN"], "artical_number" => $item[0]["artical_number"], "qty" => $p["qty"]];            }            $items_ids = [];            foreach ($post['transItems'] as $k => $p) {                $items_ids[$k] = $p["item_id"];            }            $array_item_ids = array_unique($items_ids);            $items_posted = [];            foreach ($array_item_ids as $id) {                $qty = 0;                foreach ($post['transItems'] as $p) {                    if ($id === $p["item_id"]) {                        $qty += $p["qty"];                    }                }                array_push($items_posted, ["item_id" => $id, "qty" => $qty]);            }            foreach ($data['trans_items'] as $t) {                $count = 0;                $qty = 0;                foreach ($items_posted as $p) {                    if ($t["item_id"] === $p["item_id"]) {                        if (floatval($t["qty"]) > floatval($p["qty"])) {                            $qty = floatval($t["qty"]) - floatval($p["qty"]);                            $count = 0;                            break;                        } else {                            $count++;                        }                    } else {                        $qty = floatval($t["qty"]);                    }                }                if ($count === 0) {                    $item = $this->Item->fetch_item($t["item_id"]);                    array_push($data['missing_products'], ["item_id" => $t["item_id"], "EAN" => $item[0]["EAN"], "artical_number" => $item[0]["artical_number"], "qty" => $qty]);                }            }            foreach ($items_posted as $p) {                $count = 0;                $qty = 0;                $barcode = "";                $desc = "";                foreach ($data['trans_items'] as $t) {                    if ($p["item_id"] === $t["item_id"]) {                        if (floatval($t["qty"]) < floatval($p["qty"])) {                            $qty = floatval($p["qty"]) - floatval($t["qty"]);                            $count = 0;                            break;                        } else {                            $count++;                        }                    } else {                        $qty = floatval($p["qty"]);                    }                }                if ($count === 0) {                    $item = $this->Item->fetch_item($p["item_id"]);                    array_push($data['extra_products'], ["item_id" => $p["item_id"], "EAN" => $item[0]["EAN"], "artical_number" => $item[0]["artical_number"], "qty" => $qty]);                }            }            if ($data['extra_products'] === [] && $data['missing_products'] === []) {                $this->session->set_flashdata('message', '*All Items are Found*');            }        }        $data['title'] = "Check Sale Products";        $this->load->view('templates/header', [            '_moreCss' => ['js/air-datepicker/css/datepicker.min'],            '_page_title' => $data['title']        ]);        $this->load->view('transactions/check_items', $data);        $this->load->view('templates/footer', [            '_moreJs' => [                'air-datepicker/js/datepicker.min', 'air-datepicker/js/i18n/datepicker.en',                'jquery.autocomplete.min', 'transactions/check'            ]        ]);    }    public function driver_page()    {        $driver_id = $this->violet_auth->get_user_id();        if ($this->input->is_ajax_request()) {            $this->_render_json($this->Transaction->load_driver_delivery_notes_data_tables($driver_id));        } else {            $this->pageTitle = $this->lang->line('Driver Page');            $data['records'] = $this->Transaction->paginate_driver_delivery_notes($driver_id);            $this->load->view('templates/header', [                '_page_title' => "Driver Page",                '_moreCss' => ['css/dataTables.bootstrap.min', 'css/fixedHeader.dataTables.min']            ]);            $this->load->view('sales/driver_page', $data);            $this->load->view('templates/footer', ['_moreJs' => ['jquery.dataTables.min', 'dataTables.bootstrap.min', 'sales/driver_page']]);        }    }    public function lookup_drivers()    {        $this->load->model('User');        $this->_render_json(            $this->User->search_suggestions(trim($this->input->get('query', true)))        );    }    public function update_delivered($id)    {        $this->Transaction->update_delivered_field($id);        $this->session->set_flashdata('message', '*update complete*');        redirect('sales/driver_page');    }    public function get_order_auto_no()    {        $order_id = $this->input->post('id');        $auto_no = $this->Transaction->fetch_trans_autono($order_id);        echo($auto_no["auto_no"]);    }    public function lookup_customers_accounts()    {        $this->load->model('Account');        $this->_render_json(            $this->Account->search_customers_suggestions(trim($this->input->get('query', true)))        );    }    public function pickup_notes($id)    {        $this->load->model('Account');        $this->load->model('Transaction_item');        $this->load->model('Configuration');        $this->load->model('Currency');        $data['trans'] = $this->Transaction->load_trans_data_by_trans_id($id);        $data['customer_info'] = $this->Account->fetch_account_info($data['trans']["account_id"]);        $data['trans_items'] = $this->Transaction_item->load_all_trans_items($id);        $data['company_name'] = $this->Configuration->fetch_company_name()["valueStr"];        $data['company_address'] = $this->Configuration->fetch_company_address()["valueStr"];        $data['company_phone'] = $this->Configuration->fetch_company_phone()["valueStr"];        $data['company_email'] = $this->Configuration->fetch_company_email()["valueStr"];        $data['company_website'] = $this->Configuration->fetch_company_website()["valueStr"];        $data['currency'] = $this->Currency->fetch_currency_code($data['trans']["currency_id"])["currency_code"];        $this->load->view('templates/header', [            '_moreCss' => ['js/air-datepicker/css/datepicker.min'],            '_page_title' => "Pickup Note"        ]);        $this->load->view('pickup_notes/pickup_note', $data);        $this->load->view('templates/footer', [            '_moreJs' => [                'air-datepicker/js/datepicker.min', 'air-datepicker/js/i18n/datepicker.en',                'jquery.autocomplete.min', 'delivery_notes/preview',            ]        ]);    }    public function update_pickup($id)    {        $this->Transaction->update_pickup_field($id);        $this->session->set_flashdata('message', '*update complete*');        redirect('sales/employee_page');    }    public function get_sales_account_with_the_same_currency()    {        $currency_id = $this->input->post('whatselected');        $this->load->model('Account');        $this->_render_json(            $this->Account->fetch_account_by_type_and_currency_id("Sales", $currency_id)        );    }    public function view($id)    {        $data = [];        $this->load->model(['Currency', 'User', 'Account', 'Transaction_item']);        $data['transType'] = $this->Transaction->get_transaction_types_list()[Transaction::QuatationTransType];        $data['currenciesList'] = $this->Currency->load_currencies_list();        $data['trans'] = $this->Transaction->load_trans_data_by_trans_id($id);        $account = $this->Account->load($data['trans']['account_id']);        $data['account'] = "{$account['account_number']} - {$account['account_name']}";        $account2 = $this->Account->load($data['trans']['account2_id']);        $data['account2'] = "{$account2['account_number']} - {$account2['account_name']}";        $data['trans_items'] = $this->Transaction_item->load_all_trans_items_for_QO_AND_OS($id);        $subtotal = 0;        foreach ($data['trans_items'] as $k => $t) {            $data['trans_items'][$k]["total"] = doubleval($t["price"]) * doubleval($t["qty"]) * (1 - (doubleval($t["discount"]) / 100));            $subtotal += $data['trans_items'][$k]["total"];            $data['trans_items'][$k]["sub_total"] = doubleval($t["price"]) * doubleval($t["qty"]);        }        $data['final_subtotal'] = number_format($subtotal, 2, '.', '');        $total = (($subtotal + doubleval($data['trans']['delivery_charge'])) * (1 + (doubleval($data['trans']['TVA']) / 100))) - doubleval($data['trans']["discount"]) + doubleval($data['trans']["pfand"]);        $data['final_total'] = number_format($total, 2, '.', '');        $user_add = $this->User->get_user_name($data['trans']['user_id']);        if ($user_add) {            $data['user_add'] = $user_add['user_name'];        } else {            $data['user_add'] = '';        }        $user_edit = $this->User->get_user_name($data['trans']['user2_id']);        if ($user_edit) {            $data['user_edit'] = $user_edit['user_name'];        } else {            $data['user_edit'] = '';        }        $employee_name = $this->User->get_user_name($data['trans']['employee_id']);        if ($employee_name) {            $data['employee_name'] = $employee_name['user_name'];        } else {            $data['employee_name'] = '';        }        $driver_name = $this->User->get_user_name($data['trans']['driver_id']);        if ($driver_name) {            $data['driver_name'] = $driver_name['user_name'];        } else {            $data['driver_name'] = '';        }        if ($data['trans']['delivery_type'] === "Post" || $data['trans']['delivery_type'] === "DHL") {            $data["dt_hide"] = 1;        } else {            $data["dt_hide"] = 0;        }        if ($data['trans']['delivery_type'] === "Delivery") {            $data['trans']['delivery_type'] = "SLATS Delivery";        }        if ($data['trans']['payment_method'] === " " || $data['trans']['payment_method'] === "Cash") {            $data["pm_hide"] = 1;        } else {            $data["pm_hide"] = 0;        }        $data['transTypeText'] = "Invoice View";        $this->load->view('templates/header', [            '_page_title' => $data['transTypeText']        ]);        $this->load->view('sales/view', $data);        $this->load->view('templates/footer');    }    public function exit($id = null)    {        if ($id) {            $this->Transaction->update_edit_user_id_and_locked($id, 0, '');        }        redirect('sales/index');    }    public function return_pfand($sale_id)    {        $this->load->model(['Journal']);        $sale = $this->Transaction->load_trans_data_by_trans_id($sale_id);        if (doubleval($sale['pfand']) > 0) {            $journalType = Journal::PaymentJournalType;            $this->Journal->set_field('auto_no', $this->Journal->set_next_auto_number($journalType));            $this->Journal->set_field('account_id', $sale['account_id']);            $this->Journal->set_field('account2_id', $sale['account_id']);            $this->Journal->set_field('journal_type', $journalType);            $this->Journal->set_field('journal_date', date('d-m-Y'));            $this->Journal->set_field('currency_id', $sale['currency_id']);            $this->Journal->set_field('currency_rate', $sale['currency_rate']);            $this->Journal->set_field('amount', $sale['pfand']);            $this->Journal->set_field('description', 'Return Pfand of Invoice #' . $sale['auto_no']);            $this->Journal->set_field('fiscal_year_id', $this->violet_auth->get_fiscal_year_id());            $this->Journal->set_field('user_id', $this->violet_auth->get_user_id());            $saved = $this->Journal->insert();            if ($saved) {                $this->load->model('Account');                $journal_id = $this->Journal->fetch_journal_id_by_autono($sale['auto_no'], $journalType);                $name1 = $this->Account->fetch_account_name_by_id($sale['account_id']);                $name2 = $this->Account->fetch_account_name_by_id($sale['account2_id']);                $this->Journal->save_in_journal_accounts($journal_id["0"]["id"], $sale['account_id'], $sale['auto_no'], $sale['pfand'], "-1", $name2["0"]["account_name"], "Return Pfand of Invoice");                $this->Journal->save_in_journal_accounts($journal_id["0"]["id"], $sale['account2_id'], $sale['auto_no'], $sale['pfand'], "1", $name1["0"]["account_name"], "Return Pfand of Invoice");                //update balance debit credit for account 1                $balance = $this->Journal->calculate_account_balance($sale['account_id'])["total"];                $credit = $this->Journal->calculate_account_credit($sale['account_id'])["total"];                $debit = $this->Journal->calculate_account_debit($sale['account_id'])["total"];                $this->Account->update_account_credit_debit_balance($sale['account_id'], $balance, $credit, $debit);                //update balance debit credit for account 2                $balance = $this->Journal->calculate_account_balance($sale['account2_id'])["total"];                $credit = $this->Journal->calculate_account_credit($sale['account2_id'])["total"];                $debit = $this->Journal->calculate_account_debit($sale['account2_id'])["total"];                $this->Account->update_account_credit_debit_balance($sale['account2_id'], $balance, $credit, $debit);            }            $this->session->set_flashdata('message_success', '*Pfand Returned Successfully*');        } else {            $this->session->set_flashdata('message', '*Sorry, This Invoice Does Not have Pfand*');        }        redirect("sales/index");    }    public function return_invoice_item($trans_item_id)    {        $transType = Transaction::ReturnSaleTransType;        $data = $this->_load_related_models_for_return_invoice_item($transType, $trans_item_id);        $post = $this->input->post(['trans', 'transItems', 'submitBtn'], true);        if ($post['submitBtn']) {            $post['trans']['auto_no'] = $this->Transaction->set_next_auto_number($transType);            $this->Transaction->set_field('user_id', $this->violet_auth->get_user_id());            $this->Transaction->set_fields($post['trans']);            $this->Transaction->set_field('trans_type', $transType);            $this->Transaction->set_field('relation_id', $data['trans']['id']);            $this->Transaction->set_field('fiscal_year_id', $this->violet_auth->get_fiscal_year_id());            $this->Transaction->set_field('user2_id', $this->violet_auth->get_user_id());            $saved = $this->Transaction->insert();            if ($saved) {                $this->Transaction->save_trans_items_with_cost($post['transItems'], 1);                $total = $this->Transaction->calculate_transaction_total($post['transItems'], $post['trans']['discount'], 0);                $this->load->model('Account');                $trans_id = $this->Transaction->fetch_transaction_id_by_autono($post['trans']['auto_no'], $transType);                $this->Transaction->save_transaction_in_journals($post['trans'], $trans_id["0"]["id"], $total, "RS");                $journal_id = $this->Transaction->fetch_journal_id_by_transaction_id($trans_id["0"]["id"], $transType);                $name1 = $this->Account->fetch_account_name_by_id($post['trans']['account_id']);                $name2 = $this->Account->fetch_account_name_by_id($post['trans']['account2_id']);                $this->Transaction->save_in_journal_accounts($journal_id["0"]["id"], $post['trans']['account_id'], $post['trans']['auto_no'], $total, "-1", $name2["0"]["account_name"], "Retrurn Sale");                $this->Transaction->save_in_journal_accounts($journal_id["0"]["id"], $post['trans']['account2_id'], $post['trans']['auto_no'], $total, "1", $name1["0"]["account_name"], "Retrurn Sale");                //update items qty                $this->Transaction->update_items_qty($post['transItems']);                $this->load->model('Journal');                //update balance debit credit for account 1                $balance = $this->Journal->calculate_account_balance($post['trans']['account_id'])["total"];                $credit = $this->Journal->calculate_account_credit($post['trans']['account_id'])["total"];                $debit = $this->Journal->calculate_account_debit($post['trans']['account_id'])["total"];                $this->Account->update_account_credit_debit_balance($post['trans']['account_id'], $balance, $credit, $debit);                //update balance debit credit for account 2                $balance = $this->Journal->calculate_account_balance($post['trans']['account2_id'])["total"];                $credit = $this->Journal->calculate_account_credit($post['trans']['account2_id'])["total"];                $debit = $this->Journal->calculate_account_debit($post['trans']['account2_id'])["total"];                $this->Account->update_account_credit_debit_balance($post['trans']['account2_id'], $balance, $credit, $debit);                redirect('return_sales/index');            }        }        $this->load->view('templates/header', [            '_moreCss' => ['js/air-datepicker/css/datepicker.min'],            '_page_title' => $data['transTypeText']        ]);        $this->load->view('sales/return_sales_from_sales', $data);        $this->load->view('templates/footer', [            '_moreJs' => [                'air-datepicker/js/datepicker.min', 'air-datepicker/js/i18n/datepicker.en',                'jquery.autocomplete.min', 'transactions/return_sale', 'accounts/account_modal', 'items/item_modal'            ]        ]);    }    private function _load_related_models_for_return_invoice_item($transType, $trans_item_id)    {        $data = [];        $this->load->model(['Currency', 'User', 'Transaction_item']);        $data['trans'] = $this->Transaction_item->fetch_trans_data_by_trans_item_id($trans_item_id);        $data['transTypeText'] = 'Return Sale of Invoice #' . $data['trans']['auto_no'];        $data['transType'] = $this->Transaction->get_transaction_types_list()[$transType];        $data['currenciesList'] = $this->Currency->load_currencies_list();        $data['types'] = array(            "Individual" => "Individual", "Carage" => "Carage"        );        $data['account_type'] = array(            "Customer" => "Customer", "Supplier" => "Supplier",            "Cash" => "Cash", "Expenses" => "Expenses",            "Bank" => "Bank", "Sale VAT" => "Sale VAT",            "Purchase VAT" => "Purchase VAT"        );        $this->load->model('Configuration');        $TVA1 = $this->Configuration->fetch_TVA1()["valueStr"];        $TVA2 = $this->Configuration->fetch_TVA2()["valueStr"];        $TVA = [0, doubleval($TVA1), doubleval($TVA2)];        $data['TVA'] = array_combine($TVA, $TVA);        $data['account'] = '';        $data['account2'] = '';        $data['trans_items'] = [];        $this->load->model('Warehouse');        $w = $this->Warehouse->load_warehouses_list();        $data['warehouses_list'] = array_combine($w, $w);        $data['trans_date'] = date("d-m-Y");        $data['value_date'] = date("d-m-Y");        $data['user_add'] = '';        $data['user_edit'] = '';        $data['created_on'] = '';        ///        $this->load->model('Account');        $account = $this->Account->load($data['trans']['account_id']);        $data['account'] = "{$account['account_number']} - {$account['account_name']}";        $account2 = $this->Account->load($data['trans']['account2_id']);        $data['account2'] = "{$account2['account_number']} - {$account2['account_name']}";        $this->load->model('Transaction_item');        $data['trans_items'][] = $this->Transaction_item->fetch_trans_item_data($trans_item_id);        $this->load->model('Warehouse');        $data['warehouse'] = [];        $data['shelf'] = [];        $data['shelf_list'] = [];        foreach ($data['trans_items'] as $t) {            $res = $this->Warehouse->fetch_warehouse_and_shelf($t["warehouse_id"]);            array_push($data['warehouse'], $res['warehouse']);            array_push($data['shelf'], $res['shelf']);            $s = $this->Warehouse->fetch_all_warehouse_shelfs($res['warehouse']);            $s = array_combine($s, $s);            array_push($data['shelf_list'], $s);        }        $w = $this->Warehouse->load_warehouses_list();        $data['warehouses_list'] = array_combine($w, $w);        $data['trans_date'] = $data['trans']['trans_date'];        $data['value_date'] = $data['trans']['value_date'];        return $data;    }    public function invoice_print($id)    {        $this->load->model(['Account', 'Transaction_item', 'Configuration', 'Currency', 'Warehouse']);        $data['trans'] = $this->Transaction->load_trans_data_by_trans_id($id);        $data['returns'] = $this->Transaction->load_all_return_sale_items_of_invoice($id);        $data['customer_info'] = $data['trans'] ? $this->Account->fetch_account_info($data['trans']["account_id"]) : null;        $data['sales_info'] = $data['trans'] ? $this->Account->fetch_account_info($data['trans']["account2_id"]) : null;        // var_dump($data['trans']);exit;        $data['trans_items'] = $this->Transaction_item->load_all_trans_items($id);        $total = 0;        $subtotal = 0;        $tva_amount = 0;        foreach ($data['trans_items'] as $k => $t) {            $res = $this->Warehouse->fetch_warehouse_and_shelf($t['warehouse_id']);            $data['trans_items'][$k]["warehouse"] = $res["warehouse"];            $data['trans_items'][$k]["shelf"] = $res["shelf"];            $data['trans_items'][$k]["total"] = doubleval($t["price"]) * doubleval($t["qty"]) * (1 - (doubleval($t["discount"]) / 100));            $subtotal += $data['trans_items'][$k]["total"];            $data['trans_items'][$k]["sub_total"] = doubleval($t["price"]) * doubleval($t["qty"]);        }        $returned_tot = 0;        foreach ($data['returns'] as $k => $t) {            $data['returns'][$k]["total"] = doubleval($t["price"]) * doubleval($t["qty"]) * (1 - (doubleval($t["discount"]) / 100));            $returned_tot += $data['returns'][$k]["total"];            $data['returns'][$k]["sub_total"] = doubleval($t["price"]) * doubleval($t["qty"]);        }        $sub_total = $subtotal;        $data['sub_total'] = number_format($sub_total, 2, '.', '');        $tva_amount = 0;        if ($data['trans']) {            $tva_amount = ($subtotal + doubleval($data['trans']['delivery_charge'])) * (doubleval($data['trans']['TVA']) / 100);        }        $data['tva_amount'] = number_format($tva_amount, 2, '.', '');        $total = 0;        if ($data['trans']) {            $total = (($subtotal + doubleval($data['trans']['delivery_charge']) - doubleval($data['trans']["discount"])) * (1 + (doubleval($data['trans']['TVA']) / 100))) + doubleval($data['trans']["pfand"]);        }        $data['total'] = number_format($total - $returned_tot, 2, '.', '');        $data['company_name'] = $this->Configuration->fetch_company_name()["valueStr"];        $data['company_address'] = $this->Configuration->fetch_company_address()["valueStr"];        $data['company_phone'] = $this->Configuration->fetch_company_phone()["valueStr"];        $data['company_email'] = $this->Configuration->fetch_company_email()["valueStr"];        $data['company_website'] = $this->Configuration->fetch_company_website()["valueStr"];        $data['currency'] = $data['trans'] ? $this->Currency->fetch_currency_code($data['trans']["currency_id"])["currency_code"] : null;        $data['pfand_note'] = "Austauschartikel (zzgl. " . $data['trans'] ?? $data['trans']['pfand'] . " " . $data['trans'] ?? $data['currency'] . " Pfand / exkl. 7.7% MwSt) wird dem Kunden bei der Rücksendung des Altteils zurückerstattet";        $data['title'] = "Invoice";        $this->load->view('templates/header', [            '_moreCss' => ['js/air-datepicker/css/datepicker.min'],            '_page_title' => " Invoice"        ]);        $this->load->view('sales/print_view', $data);        $this->load->view('templates/footer', [            '_moreJs' => [                'air-datepicker/js/datepicker.min', 'air-datepicker/js/i18n/datepicker.en',                'jquery.autocomplete.min', 'sales/preview'            ]        ]);    }    public function lookup_tracking_nbs()    {        $this->_render_json(            $this->Transaction->search_tracking_nbs_suggestions(trim($this->input->get('query', true)))        );    }    public function multi_invoices()    {        $post = $this->input->post(null, true);        if ($post) {            if ($post['multi_auto_no']) {                // var_dump();                // exit;                $this->load->model(['Account', 'Transaction_item', 'Configuration', 'Currency', 'Warehouse']);                $auto_nos = explode(",", $post['multi_auto_no']);                $data['trans_items'] = [];                $data['sale_nbs'] = '';                $total = 0;                $subtotal = 0;                $tva_amount = 0;                foreach ($auto_nos as $auto_no) {                    $data['sale_nbs'] = $data['sale_nbs'] . "#" . $auto_no . " ";                    $data['trans'] = $this->Transaction->load_trans_data_by_auto_no_and_trans_type($auto_no, 'SA');                    $id = $data['trans']['id'];                    // $data['returns'] = $this->Transaction->load_all_return_sale_items_of_invoice($id);                    $data['customer_info'] = $this->Account->fetch_account_info($data['trans']["account_id"]);                    $data['sales_info'] = $this->Account->fetch_account_info($data['trans']["account2_id"]);                    // var_dump($data['trans']);exit;                    $trans_items = $this->Transaction_item->load_all_trans_items($id);                    foreach ($trans_items as $k => $t) {                        $res = $this->Warehouse->fetch_warehouse_and_shelf($t['warehouse_id']);                        $trans_items[$k]["warehouse"] = $res["warehouse"];                        $trans_items[$k]["shelf"] = $res["shelf"];                        $trans_items[$k]["total"] = doubleval($t["price"]) * doubleval($t["qty"]) * (1 - (doubleval($t["discount"]) / 100));                        $subtotal += $trans_items[$k]["total"];                        $trans_items[$k]["sub_total"] = doubleval($t["price"]) * doubleval($t["qty"]);                        $data['trans_items'][] = $trans_items[$k];                    }                    $returned_tot = 0;                    $data['returns'] = [];                    // foreach ($data['returns'] as $k => $t) {                    // 	$data['returns'][$k]["total"] = doubleval($t["price"]) * doubleval($t["qty"]) * (1 - (doubleval($t["discount"]) / 100));                    // 	$returned_tot += $data['returns'][$k]["total"];                    // 	$data['returns'][$k]["sub_total"] = doubleval($t["price"]) * doubleval($t["qty"]);                    // }                    $sub_total = $subtotal;                    $data['sub_total'] = number_format($sub_total, 2, '.', '');                    $tva_amount = ($subtotal + doubleval($data['trans']['delivery_charge'])) * (doubleval($data['trans']['TVA']) / 100);                    $data['tva_amount'] = number_format($tva_amount, 2, '.', '');                    $total = (($subtotal + doubleval($data['trans']['delivery_charge']) - doubleval($data['trans']["discount"])) * (1 + (doubleval($data['trans']['TVA']) / 100))) + doubleval($data['trans']["pfand"]);                    $data['total'] = number_format($total - $returned_tot, 2, '.', '');                    $data['company_name'] = $this->Configuration->fetch_company_name()["valueStr"];                    $data['company_address'] = $this->Configuration->fetch_company_address()["valueStr"];                    $data['company_phone'] = $this->Configuration->fetch_company_phone()["valueStr"];                    $data['company_email'] = $this->Configuration->fetch_company_email()["valueStr"];                    $data['company_website'] = $this->Configuration->fetch_company_website()["valueStr"];                    $data['currency'] = $this->Currency->fetch_currency_code($data['trans']["currency_id"])["currency_code"];                    $data['pfand_note'] = "Austauschartikel (zzgl. " . $data['trans']['pfand'] . " " . $data['currency'] . " Pfand / exkl. 7.7% MwSt) wird dem Kunden bei der Rücksendung des Altteils zurückerstattet";                }                $data["title"] = 'Invoice Print';                $this->load->view('templates/header_print', [                    '_page_title' => $data["title"]                ]);                $this->load->view('sales/multi_print', $data);            } else {                redirect('sales/index');            }        } else {            redirect('sales/index');        }    }    public function change_status()    {        $itemId = $this->input->post('itemId');        $status = 0;        $item = $this->Transaction->load_trans_data_by_trans_id($itemId);        if ($item['status'] == 0) {            $status = 1;        } elseif ($item['status'] == 1) {            $status = 0;        }        $data = array(            'status' => $status        );        $this->db->where('id', $itemId);        $this->db->update('transactions', $data);    }    public function change_delivered()    {        $itemId = $this->input->post('itemId');        $delivered = 0;        $item = $this->Transaction->load_trans_data_by_trans_id($itemId);        if ($item['delivered'] == 0) {            $delivered = 1;        } elseif ($item['delivered'] == 1) {            $delivered = 0;        }        $data = array(            'delivered' => $delivered        );        $this->db->where('id', $itemId);        $this->db->update('transactions', $data);    }    public function change_pickup()    {        $itemId = $this->input->post('itemId');        $pickup = 0;        $item = $this->Transaction->load_trans_data_by_trans_id($itemId);        if ($item['pickup'] == 0) {            $pickup = 1;        } elseif ($item['pickup'] == 1) {            $pickup = 0;        }        $data = array(            'pickup' => $pickup        );        $this->db->where('id', $itemId);        $this->db->update('transactions', $data);    }}