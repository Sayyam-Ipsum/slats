<?phpdefined('BASEPATH') or die('No direct script access allowed');/** * @property Account $Account * @property User $User * @property Transaction $Transaction * @property Warehouse $Warehouse * @property Transaction_item $Transaction_item */class Reports extends MY_Controller{    public $Authentication = NULL;    public function __construct()    {        parent::__construct();        // $this->load->model('Authentication');        $this->load->model('Account');    }    public function employees()    {        $this->load->model('Transaction');        $data["title"] = $this->lang->line('employee_report');        $data["employee_name"] = '';        $data["employee_id"] = 0;        $data["emp_records"] = [];        $this->load->model('User');        $result = $this->User->load_all_users_with_type_employee();        $data["employee"][0] = "All";        foreach ($result as $r) {            $data["employee"][$r["id"]] = $r["user_name"];        }        if ($this->input->is_ajax_request()) {            $this->_render_json($this->Transaction->load_employees_sale_orders_data_tables());        } else {            $data["records"] = $this->Transaction->paginate_employees_sale_orders();            $this->load->view('templates/header', [                '_page_title' => $data["title"],                '_moreCss' => ['css/dataTables.bootstrap.min', 'css/fixedHeader.dataTables.min']            ]);            $this->load->view('reports/employee', $data);            $this->load->view('templates/footer', ['_moreJs' => ['jquery.dataTables.min', 'dataTables.bootstrap.min', 'reports/employee_report']]);        }    }    public function employee($employee_id)    {        $this->load->model('Transaction');        $data["title"] = $this->lang->line('employee_report');        $data["employee_id"] = 0;        $this->load->model('User');        $result = $this->User->load_all_users();        $data["employee"][0] = "All";        foreach ($result as $r) {            $data["employee"][$r["id"]] = $r["user_name"];        }        if ($employee_id === "0") {            $data["employee_name"] = '';            $data["employee_id"] = 0;            $data["emp_records"] = [];            if ($this->input->is_ajax_request()) {                $this->_render_json($this->Transaction->load_employees_sale_orders_data_tables());            } else {                $data["records"] = $this->Transaction->paginate_employees_sale_orders();                $this->load->view('templates/header', [                    '_page_title' => $data["title"],                    '_moreCss' => ['css/dataTables.bootstrap.min', 'css/fixedHeader.dataTables.min']                ]);                $this->load->view('reports/employee', $data);                $this->load->view('templates/footer', ['_moreJs' => ['jquery.dataTables.min', 'dataTables.bootstrap.min', 'reports/employee_report']]);            }        } else {            $data["employee_id"] = $employee_id;            $data["employee_name"] = $data["employee"][$employee_id];            $data["records"] = [];            if ($this->input->is_ajax_request()) {                $this->_render_json($this->Transaction->load_specific_employee_sale_orders_data_tables($employee_id));            } else {                $data["emp_records"] = $this->Transaction->paginate_specific_employee_sale_orders($employee_id);                $this->load->view('templates/header', [                    '_page_title' => $data["title"],                    '_moreCss' => ['css/dataTables.bootstrap.min', 'css/fixedHeader.dataTables.min']                ]);                $this->load->view('reports/employee', $data);                $this->load->view('templates/footer', ['_moreJs' => ['jquery.dataTables.min', 'dataTables.bootstrap.min', 'reports/employee_report']]);            }        }    }    public function orders()    {        $this->load->model('Warehouse');        $this->load->model('Transaction');        $post = $this->input->post(null, true);        $data["order_warehouses"]["All"] = "All";        $order_warehouses = $this->Warehouse->load_all_order_warehouses();        foreach ($order_warehouses as $w) {            $data["order_warehouses"][$w["warehouse"]] = $w["warehouse"];        }        $data['warehouse'] = '';        $data['date'] = '';        $data['to_date'] = '';        $data['brand'] = '';        $data['status1'] = 'All';        $data["artical_nb"] = '';        $data["customer_name"] = '';        $data["records"] = [];        if ($post) {            // var_dump($post);            // exit;            if ($post['trans_date'] !== '') {                $date = date("Y-m-d", strtotime($post['trans_date']));            } else {                $date = $post['trans_date'];            }            if ($post['to_date'] !== '') {                $to = date("Y-m-d", strtotime($post['to_date']));            } else {                $to = $post['to_date'];            }            $data["records"] = $this->Warehouse->load_all_order_warehouses_items($post['warehouses_select_report'], $date, $to, $post['brand'], $post["status_list"], $post["artical_nb"], $post["customer_name"]);            foreach ($data["records"] as $k => $r) {                if ($r['relation_id']) {                    $data["records"][$k]['QU'] = $this->Transaction->load_trans_data_by_trans_id($r['relation_id'])['auto_no'] ?? NULL;                } else {                    $data["records"][$k]['QU'] = NULL;                }                $result = $this->Transaction->check_if_order_transfered_to_sale($r['trans_id']);                if ($result['auto_no'] ?? '') {                    $data["records"][$k]['SA'] = $result['auto_no'];                } else {                    $data["records"][$k]['SA'] = NULL;                }            }            $data['warehouse'] = $post['warehouses_select_report'];            $data['date'] = $post['trans_date'];            $data['to_date'] = $post['to_date'];            $data['brand'] = $post['brand'];            $data['status1'] = $post["status_list"];            $data["artical_nb"] = $post["artical_nb"];            $data["customer_name"] = $post["customer_name"];        }        $data["title"] = $this->lang->line('orders_report');        $data["status_list"] = array(            "To order" => "To order",            "Ordered" => "Ordered",            "Delivered" => "Delivered"        );        $data["status_list1"] = array(            "All" => "All",            "To order" => "To order",            "Ordered" => "Ordered",            "Delivered" => "Delivered"        );        $this->load->view('templates/header', [            '_moreCss' => ['js/air-datepicker/css/datepicker.min'],            '_page_title' => $data["title"]        ]);        $this->load->view('reports/orders', $data);        $this->load->view('templates/footer', [            '_moreJs' => [                'air-datepicker/js/datepicker.min', 'air-datepicker/js/i18n/datepicker.en',                'jquery.autocomplete.min', 'reports/orders'            ]        ]);    }    public function orders_report_bulk_action()    {        $this->load->model('Transaction_item');        $ids = $this->input->post("ids");        $status = $this->input->post("status");        $date = $this->input->post("date");        $this->Transaction_item->group_update_of_status($ids, $status, $date);    }    public function activity()    {        $this->load->model('Transaction_item');        $post = $this->input->post(null, true);        $data['date'] = '';        $data['to_date'] = '';        $data['VIN'] = '';        $data["customer_name"] = '';        $data["records"] = [];        if ($post) {            $data['date'] = $post['trans_date'];            $data['to_date'] = $post['to_date'];            $data['VIN'] = $post['VIN'];            $data["customer_name"] = $post["customer_name"];            $data["records"] = $this->Transaction_item->load_activity_report_data($post);        }        $data["title"] = $this->lang->line('activity_report');        $this->load->view('templates/header', [            '_moreCss' => ['js/air-datepicker/css/datepicker.min'],            '_page_title' => $data["title"]        ]);        $this->load->view('reports/activity', $data);        $this->load->view('templates/footer', [            '_moreJs' => [                'air-datepicker/js/datepicker.min', 'air-datepicker/js/i18n/datepicker.en',                'jquery.autocomplete.min', 'reports/activity'            ]        ]);    }    public function receiving_items()    {        $this->load->model('Transaction');        $post = $this->input->post(null, true);        // $data['from'] = '';        // $data['to'] = '';        $data['item_id'] = '';        $data['select_item'] = '';        $data['date'] = '';        $data['to_date'] = '';        $data["records"] = [];        if ($post) {            // $data['from'] = $post['from'];            // $data['to'] = $post['to'];            $data['item_id'] = $post['item_id'];            $data['select_item'] = $post['select_item'];            $data['date'] = $post['trans_date'];            $data['to_date'] = $post['to_date'];            if ($post['trans_date'] !== '') {                $date = date("Y-m-d", strtotime($post['trans_date']));            } else {                $date = $post['trans_date'];            }            if ($post['to_date'] !== '') {                $to = date("Y-m-d", strtotime($post['to_date']));            } else {                $to = $post['to_date'];            }            $data["records"] = $this->Transaction->load_receiving_items_report_data($post, $date, $to);            // var_dump($data["records"]);exit;        }        $data["title"] = $this->lang->line('pickup_report');        $this->load->view('templates/header', [            '_moreCss' => ['js/air-datepicker/css/datepicker.min'],            '_page_title' => $data["title"]        ]);        $this->load->view('reports/receiving_items', $data);        $this->load->view('templates/footer', [            '_moreJs' => [                'air-datepicker/js/datepicker.min', 'air-datepicker/js/i18n/datepicker.en',                'jquery.autocomplete.min', 'reports/receiving_items'            ]        ]);    }    public function report_to_order_purchase()    {        $transType = 'OP';        $post = $this->input->post(null, true);        $data = $this->_load_related_models($transType, $post['trans_item_id']);        // var_dump($data['trans_items']);        // exit;        $this->load->view('templates/header', [            '_moreCss' => ['js/air-datepicker/css/datepicker.min'],            '_page_title' => $data['title']        ]);        $this->load->view('order_purchases/to_order_PU_form', $data);        $this->load->view('templates/footer', [            '_moreJs' => [                'air-datepicker/js/datepicker.min', 'air-datepicker/js/i18n/datepicker.en',                'jquery.autocomplete.min', 'transactions/purchase', 'accounts/account_modal', 'items/item_modal'            ]        ]);    }    private function _load_related_models($transType, $trans_items)    {        $data = [];        $this->load->model(['Currency', 'User', 'Transaction']);        $data['title'] = 'Order Report to Order Purchase';        $data['transType'] = $this->Transaction->get_transaction_types_list()[$transType];        $data['currenciesList'] = $this->Currency->load_currencies_list();        $data['types'] = array(            "Individual" => "Individual", "Carage" => "Carage"        );        $data['account_type'] = array(            "Customer" => "Customer", "Supplier" => "Supplier",            "Cash" => "Cash", "Expenses" => "Expenses",            "Bank" => "Bank", "Sale VAT" => "Sale VAT",            "Purchase VAT" => "Purchase VAT"        );        $this->load->model('Configuration');        $TVA1 = $this->Configuration->fetch_TVA1()["valueStr"];        $TVA2 = $this->Configuration->fetch_TVA2()["valueStr"];        $TVA = [0, doubleval($TVA1), doubleval($TVA2)];        $data['TVA'] = array_combine($TVA, $TVA);        if (($this->Transaction->set_next_auto_number($transType))) {            $data['auto_no'] = $this->Transaction->set_next_auto_number($transType);        }        $this->load->model('Transaction_item');        foreach ($trans_items as $t) {            $res = $this->Transaction_item->fetch_trans_item_data($t);            $res['price'] = $res['cost'];            $res['cost'] = 0;            $data['trans_items'][] = $res;        }        $this->load->model('Warehouse');        $data['warehouse'] = [];        $data['shelf'] = [];        $data['shelf_list'] = [];        foreach ($data['trans_items'] as $t) {            $res = $this->Warehouse->fetch_warehouse_and_shelf($t["warehouse_id"]);            $data['trans_warehouse'] = $res['warehouse'];            $data['trans_shelf'] = $res['shelf'];            array_push($data['warehouse'], $res['warehouse']);            array_push($data['shelf'], $res['shelf']);            $s = $this->Warehouse->fetch_all_warehouse_shelfs($res['warehouse']);            $s = array_combine($s, $s);            array_push($data['shelf_list'], $s);            $data['trans_shelf_list'] = $s;        }        $w = $this->Warehouse->load_warehouses_list();        $data['warehouses_list'] = array_combine($w, $w);        $data["status"] = 0;        return $data;    }    public function purchase_orders()    {        $this->load->model('Transaction');        $post = $this->input->post(null, true);        $data['date'] = '';        $data['to_date'] = '';        $data['brand'] = '';        $data["artical_nb"] = '';        $data["supplier_name"] = '';        $data["supplier_id"] = '';        $data["records"] = [];        if ($post) {            if ($post['trans_date'] !== '') {                $date = date("Y-m-d", strtotime($post['trans_date']));            } else {                $date = $post['trans_date'];            }            if ($post['to_date'] !== '') {                $to = date("Y-m-d", strtotime($post['to_date']));            } else {                $to = $post['to_date'];            }            $data["records"] = $this->Transaction->load_order_purchase_report_data($date, $to, $post['brand'], $post["artical_nb"], $post["supplier_id"]);            $data['date'] = $post['trans_date'];            $data['to_date'] = $post['to_date'];            $data['brand'] = $post['brand'];            $data["artical_nb"] = $post["artical_nb"];            $data["supplier_name"] = $post["supplier_name"];            $data["supplier_id"] = $post["supplier_id"];        }        $data["title"] = $this->lang->line('order_purchase_report');        $this->load->view('templates/header', [            '_moreCss' => ['js/air-datepicker/css/datepicker.min'],            '_page_title' => $data["title"]        ]);        $this->load->view('reports/purchase_orders', $data);        $this->load->view('templates/footer', [            '_moreJs' => [                'air-datepicker/js/datepicker.min', 'air-datepicker/js/i18n/datepicker.en',                'jquery.autocomplete.min', 'reports/purchase_orders'            ]        ]);    }    public function customer_receiving_items()    {        $this->load->model('Transaction');        $data['date'] = '';        $data['to_date'] = '';        $data['records'] = [];        $this->load->model('Warehouse');        $warehouses = $this->Warehouse->fetch_all_warehouse_shelf();        foreach ($warehouses as $w) {            $data['warehouses'][$w['id']] = $w['w_s'];        }        // var_dump($data['warehouses']);        // exit;        $post = $this->input->post(null, true);        if ($post) {            $data['date'] = $post['trans_date'];            $data['to_date'] = $post['to_date'];            if ($post['trans_date'] !== '') {                $date = date("Y-m-d", strtotime($post['trans_date']));            } else {                $date = $post['trans_date'];            }            if ($post['to_date'] !== '') {                $to = date("Y-m-d", strtotime($post['to_date']));            } else {                $to = $post['to_date'];            }            $data["rows"] = [];            $data["customers"] = $this->Transaction->load_all_customers_for_customer_receiving_items_report_data($date, $to);            $results = $this->Transaction->load_customer_receiving_items_report_data($date, $to);            foreach ($results as $r) {                $res = $this->Transaction->check_if_order_transfered_to_sale($r['transaction_id']);                if (!$res) {                    $data["rows"][] = $r;                }            }            if ($data["rows"]) {                foreach ($data["customers"] as $customer) {                    foreach ($data["rows"] as $row) {                        if ($customer['account_id'] == $row['account_id']) {                            $data['records'][$row['account_name']][] = $row;                        }                    }                }            }        }        // var_dump($data['records']);        // exit;        $data["title"] = $this->lang->line('customer_receiving_items');        $this->load->view('templates/header', [            '_moreCss' => ['js/air-datepicker/css/datepicker.min'],            '_page_title' => $data["title"]        ]);        $this->load->view('reports/customer_receiving_items', $data);        $this->load->view('templates/footer', [            '_moreJs' => [                'air-datepicker/js/datepicker.min', 'air-datepicker/js/i18n/datepicker.en',                'jquery.autocomplete.min', 'reports/customer_receiving_items'            ]        ]);    }    public function pickup()    {        $post = $this->input->post(null, true);        $data['type'] = '';        $data['auto_no'] = '';        $data['customer'] = '';        $data['account_id'] = '';        $data['records'] = [];        $data['rows'] = [];        if ($post) {            $data['type'] = $post['type'];            $data['type_name'] = ($data['type'] == 'SA') ? 'Invoice' : 'Order';            $data['auto_no'] = $post['auto_no'];            $data['customer'] = $post['customer'];            $data['account_id'] = $post['account_id'];            $this->load->model(['Transaction', 'Warehouse']);            $data['records'] = $this->Transaction->load_all_pickup_report_data($post['auto_no'], $post['type'], $post['account_id']);            foreach ($data['records'] as $k => $r) {                $t = $this->Warehouse->fetch_item_available_qty_in_specific_warehouse_shelf($r['item_id'], $r['warehouse_id']);                $data['records'][$k]['available_qty'] = $t['total_qty'];                $data['rows'][$r['transaction_id']][] = $data['records'][$k];            }            // var_dump($data['rows']);            // exit;        }        $data["title"] = $this->lang->line('pickup_report');        $this->load->view('templates/header', [            '_moreCss' => ['js/air-datepicker/css/datepicker.min'],            '_page_title' => $data["title"]        ]);        $this->load->view('reports/pickup', $data);        $this->load->view('templates/footer', [            '_moreJs' => [                'air-datepicker/js/datepicker.min', 'air-datepicker/js/i18n/datepicker.en',                'jquery.autocomplete.min', 'reports/pickup'            ]        ]);    }    public function pfand()    {        $post = $this->input->post(null, true);        $data['types'] = array("All" => "All", "QU" => "Quotation", "OS" => "Order", "SA" => "Invoice");        $data['account'] = '';        $data['account_id'] = '';        $data['auto_no'] = '';        $data['type'] = '';        $this->load->model('Transaction');        $data['records'] = $this->Transaction->load_all_pfand_report_data('', '', 'All');        if ($post) {            $data['account'] = $post['account'];            $data['account_id'] = $post['account_id'];            $data['auto_no'] = $post['auto_no'];            $data['type'] = $post['type'];            $data['records'] = $this->Transaction->load_all_pfand_report_data($post['account_id'], $post['auto_no'], $post['type']);            // var_dump($data['records']);        }        $data["title"] = $this->lang->line('pfand_report');        $this->load->view('templates/header', [            '_moreCss' => ['js/air-datepicker/css/datepicker.min'],            '_page_title' => $data["title"]        ]);        $this->load->view('reports/pfand', $data);        $this->load->view('templates/footer', [            '_moreJs' => [                'air-datepicker/js/datepicker.min', 'air-datepicker/js/i18n/datepicker.en',                'jquery.autocomplete.min', 'reports/pfand'            ]        ]);    }    public function change_transaction_item_warehouse_id()    {        $this->load->model('Transaction_item');        $post = $this->input->post(null, true);        if ($post) {            $res = $this->Transaction_item->update_transaction_item_warehouse_id($post['trans_item_id'], $post['warehouse_id']);            if ($res) {                $this->session->set_flashdata('message_success_header', 'Warehouse-Shelf Updated Successfully.');            } else {                $this->session->set_flashdata('message_error_header', 'Sorry, Something Went Wrong!');            }        } else {            $this->session->set_flashdata('message_error_header', 'Sorry, Something Went Wrong!');        }        redirect('reports/customer_receiving_items');    }    public function updated_trans_item_pickedup_qty()    {        $this->load->model('Transaction_item');        $trans_item_id = $this->input->post('trans_item_id');        $pickuped_qty = $this->input->post('pickuped_qty');        $res = $this->Transaction_item->updated_pickedup_qty($trans_item_id, $pickuped_qty);        echo($res);    }    public function pickup_items()    {        $this->load->model('Transaction');        $post = $this->input->post(null, true);        $data['date'] = '';        $data['to_date'] = '';        $data['order_nb'] = '';        $data["customer_name"] = '';        $data["customer_id"] = '';        $data["item_name"] = '';        $data["item_id"] = '';        $data["records"] = [];        $data["orders"] = [];        $data['order_items'] = [];        $data['hide_SA_btn'] = 0;        if ($post) {            $data['date'] = $post['trans_date'];            $data['to_date'] = $post['to_date'];            $data['order_nb'] = $post['order_nb'];            $data["customer_name"] = $post["customer_name"];            $data["customer_id"] = $post["customer_id"];            $data["item_name"] = $post["item"];            $data["item_id"] = $post["item_id"];            if ($post["item_id"]) {                $data['records'] = $this->Transaction->load_pickup_items_report_data_with_one_item($post);                if ($data['records']) {                    foreach ($data['records'] as $k => $r) {                        $orders = $this->Transaction->load_all_customer_sale_orders($r['account_id'], $post['trans_date'], $post['to_date']);                        $count = 0;                        foreach ($orders as $o) {                            if ($o['sa_id']) {                                $count++;                            }                        }                        if ($count == count($orders)) {                            $data['records'][$k]['done'] = 1;                        } else {                            $data['records'][$k]['done'] = 0;                        }                    }                    $data["orders"] = $this->Transaction->load_all_customer_sale_orders_with_specific_item($post["customer_id"], $post['trans_date'], $post['to_date'], $post['item_id']);                    if ($data["orders"]) {                        $this->load->model('Transaction_item');                        $data['order_items'] = $this->Transaction_item->load_all_trans_items_by_auto_no_and_type($post['order_nb'], 'OS');                        // var_dump($data['order_items']);exit;                        foreach ($data['order_items'] as $i => $item) {                            $data['order_items'][$i]['needed_qty'] = intval($item['qty']) - intval($item['pickedup_qty']);                            if ($data['order_items'][$i]['needed_qty'] == 0) {                                $data['order_items'][$i]['status'] = 'Done';                            } else {                                $data['order_items'][$i]['status'] = 'Missing';                            }                        }                        foreach ($data["orders"] as $key => $order) {                            $order_items = $this->Transaction_item->load_all_trans_items_by_auto_no_and_type($order['auto_no'], 'OS');                            $count_done = 0;                            foreach ($order_items as $item) {                                if (intval($item['qty']) == intval($item['pickedup_qty'])) {                                    $count_done++;                                }                            }                            $data["orders"][$key]['pick_not_sale'] = 0;                            if ($count_done == count($order_items)) {                                if (!$order['sa_id']) {                                    $data["orders"][$key]['pick_not_sale'] = 1;                                }                            }                        }                    }                }            } else {                if ($post['customer_id'] && $post['order_nb']) {                    // exit;                    $data['records'] = $this->Transaction->load_pickup_items_report_data($post);                    if ($data['records']) {                        foreach ($data['records'] as $k => $r) {                            $orders = $this->Transaction->load_all_customer_sale_orders($r['account_id'], $post['trans_date'], $post['to_date']);                            $count = 0;                            foreach ($orders as $o) {                                if ($o['sa_id']) {                                    $count++;                                }                            }                            if ($count == count($orders)) {                                $data['records'][$k]['done'] = 1;                            } else {                                $data['records'][$k]['done'] = 0;                            }                        }                        $data["orders"] = $this->Transaction->load_all_customer_sale_orders($post["customer_id"], $post['trans_date'], $post['to_date']);                        if ($data["orders"]) {                            $sale_id = NULL;                            $index = NULL;                            $this->load->model('Transaction_item');                            foreach ($data["orders"] as $k => $order) {                                $data["orders"][$k]['pick_not_sale'] = 0;                                if ($order['auto_no'] == $post['order_nb']) {                                    $index = $k;                                    if ($order['sa_id']) {                                        $sale_id = $order['sa_id'];                                        $data['hide_SA_btn'] = 1;                                    }                                }                                $o_items = $this->Transaction_item->load_all_trans_items_by_auto_no_and_type($order['auto_no'], 'OS');                                $count_done1 = 0;                                foreach ($o_items as $key1 => $oi) {                                    $needed_qty = intval($oi['qty']) - intval($oi['pickedup_qty']);                                    if ($needed_qty == 0) {                                        $count_done1++;                                    }                                }                                // var_dump($o_items, $count_done1, count($o_items));                                if ($count_done1 == count($o_items)) {                                    $data["orders"][$k]['pick_not_sale'] = 1;                                }                            }                            // exit;                            $data['order_items'] = $this->Transaction_item->load_all_trans_items_by_auto_no_and_type($post['order_nb'], 'OS');                            // var_dump($data['order_items']);exit;                            $count_done = 0;                            foreach ($data['order_items'] as $i => $item) {                                $data['order_items'][$i]['needed_qty'] = intval($item['qty']) - intval($item['pickedup_qty']);                                if ($data['order_items'][$i]['needed_qty'] == 0) {                                    $data['order_items'][$i]['status'] = 'Done';                                    $count_done++;                                } else {                                    $data['order_items'][$i]['status'] = 'Missing';                                }                            }                            // if ($count_done == count($data['order_items'])) {                            //     if (!$sale_id) {                            //         if ($index) {                            //             $data["orders"][$index]['pick_not_sale'] = 1;                            //         }                            //     }                            // }                            // var_dump($data["orders"]);                            // exit;                        }                    }                } elseif ($post['customer_id'] && !$post['order_nb']) {                    $data['records'] = $this->Transaction->load_pickup_items_report_data($post);                    if ($data['records']) {                        foreach ($data['records'] as $k => $r) {                            $orders = $this->Transaction->load_all_customer_sale_orders($r['account_id'], $post['trans_date'], $post['to_date']);                            $count = 0;                            foreach ($orders as $o) {                                if ($o['sa_id']) {                                    $count++;                                }                            }                            if ($count == count($orders)) {                                $data['records'][$k]['done'] = 1;                            } else {                                $data['records'][$k]['done'] = 0;                            }                        }                        $data["orders"] = $this->Transaction->load_all_customer_sale_orders($post["customer_id"], $post['trans_date'], $post['to_date']);                        $this->load->model('Transaction_item');                        // var_dump($data["orders"]);                        // exit;                        foreach ($data["orders"] as $key => $order) {                            $order_items = $this->Transaction_item->load_all_trans_items_by_auto_no_and_type($order['auto_no'], 'OS');                            $count_done = 0;                            foreach ($order_items as $item) {                                if (intval($item['qty']) == intval($item['pickedup_qty'])) {                                    $count_done++;                                }                            }                            $data["orders"][$key]['pick_not_sale'] = 0;                            if ($count_done == count($order_items)) {                                if (!$order['sa_id']) {                                    $data["orders"][$key]['pick_not_sale'] = 1;                                }                            }                        }                    }                } elseif (!$post['customer_id'] && $post['order_nb']) {                    $os_data = $this->Transaction->load_trans_data_by_auto_no_and_trans_type($post['order_nb'], 'OS');                    if ($os_data) {                        $post['customer_id'] = $os_data['account_id'];                        $post['customer_name'] = $os_data['account_number'] . " - " . $os_data['account_name'];                        $data["customer_name"] = $post["customer_name"];                        $data["customer_id"] = $post["customer_id"];                        $data['records'] = $this->Transaction->load_pickup_items_report_data($post);                        if ($data['records']) {                            foreach ($data['records'] as $k => $r) {                                // $data["orders"][$k]['pick_not_sale'] = 0;                                $orders = $this->Transaction->load_all_customer_sale_orders($r['account_id'], $post['trans_date'], $post['to_date']);                                $count = 0;                                foreach ($orders as $o) {                                    if ($o['sa_id']) {                                        $count++;                                    }                                }                                if ($count == count($orders)) {                                    $data['records'][$k]['done'] = 1;                                } else {                                    $data['records'][$k]['done'] = 0;                                }                            }                            $data["orders"] = $this->Transaction->load_all_customer_sale_orders($post["customer_id"], $post['trans_date'], $post['to_date']);                            // var_dump($data["orders"]);exit;                            if ($data["orders"]) {                                $sale_id = NULL;                                $index = NULL;                                $count_done = 0;                                foreach ($data["orders"] as $k => $order) {                                    $data["orders"][$k]['pick_not_sale'] = 0;                                    if ($order['auto_no'] == $post['order_nb']) {                                        $index = $k;                                        if ($order['sa_id']) {                                            $sale_id = $order['sa_id'];                                            $data['hide_SA_btn'] = 1;                                        }                                    }                                    if ($count_done == count($data['order_items'])) {                                        if (!$sale_id) {                                            if ($index) {                                                $data["orders"][$index]['pick_not_sale'] = 1;                                            }                                        }                                    }                                }                                $this->load->model('Transaction_item');                                $data['order_items'] = $this->Transaction_item->load_all_trans_items_by_auto_no_and_type($post['order_nb'], 'OS');                                // var_dump($data['order_items']);exit;                                foreach ($data['order_items'] as $i => $item) {                                    $data['order_items'][$i]['needed_qty'] = intval($item['qty']) - intval($item['pickedup_qty']);                                    if ($data['order_items'][$i]['needed_qty'] == 0) {                                        $data['order_items'][$i]['status'] = 'Done';                                        $count_done++;                                    } else {                                        $data['order_items'][$i]['status'] = 'Missing';                                    }                                }                            }                        }                    } else {                        $data["records"] = [];                    }                } else {                    $data["records"] = $this->Transaction->load_pickup_items_report_data($post);                    if ($data['records']) {                        foreach ($data['records'] as $k => $r) {                            $orders = $this->Transaction->load_all_customer_sale_orders($r['account_id'], $post['trans_date'], $post['to_date']);                            $count = 0;                            foreach ($orders as $o) {                                if ($o['sa_id']) {                                    $count++;                                }                            }                            if ($count == count($orders)) {                                $data['records'][$k]['done'] = 1;                            } else {                                $data['records'][$k]['done'] = 0;                            }                        }                    }                }            }            // var_dump($data["order_items"]);exit;        }        $data["title"] = 'Pickup';        $data['customers'] = $this->Account->fetch_all_accounts_by_account_type('Customer');        $customer_options = array();        foreach ($data['customers'] as $customer) {            $customer_options[$customer['id']] = $customer['description'];        }        $data['customer_options'] = $customer_options;        $this->load->view('templates/header', [            '_moreCss' => ['js/air-datepicker/css/datepicker.min'],            '_page_title' => $data["title"]        ]);        $this->load->view('reports/pickup_items', $data);        $this->load->view('templates/footer', [            '_moreJs' => [                'air-datepicker/js/datepicker.min', 'air-datepicker/js/i18n/datepicker.en',                'jquery.autocomplete.min', 'reports/pickup_items'            ]        ]);    }    public function update_order_sale_items_pickedup_qty()    {        $post['transItems'] = $this->input->post('trans_items');        // var_dump($post['transItems']);        if ($post) {            $this->load->model('Transaction_item');            foreach ($post['transItems'] as $ti) {                if ($ti['qty']) {                    if (intval($ti['qty']) > 0) {                        if ($ti['pickedup_qty']) {                            $new_qty = intval($ti['pickedup_qty']) + intval($ti['qty']);                        } else {                            $new_qty = intval($ti['qty']);                        }                        $update = $this->Transaction_item->update_trans_item_pickedup_qty($ti['trans_item_id'], $new_qty);                    }                }            }            echo 'Updated Successfully';        } else {            echo 'Sory, Something Went Wrong';        }    }    public function order_to_sale()    {        $post = $this->input->post(null, true);        if ($post) {            $this->load->model('Transaction');            $trans_items = [];            foreach ($post['transItems'] as $item) {                if ($item['qty'] != 0) {                    $trans_items[] = $item;                }            }            if ($trans_items) {                $trans_items_posted = $trans_items;                $sale_data = $this->Transaction->load_sale_of_oreder_sale_by_relation_id($post['os_id']);                if ($sale_data) {                    $transType = 'SA';                    // only add items to invoice                    $this->load->model('Transaction_item');                    foreach ($trans_items as $ti) {                        $sale_item = $this->Transaction_item->load_trans_item_data_by_item_id_and_trans_id($ti['item_id'], $sale_data['id']);                        if ($sale_item) {                            $new_qty = intval($sale_item['qty']) + intval($ti['qty']);                            $s = $this->Transaction_item->update_trans_item_qty($sale_item['id'], $new_qty);                        } else {                            $this->Transaction_item->reset_fields();                            $this->Transaction_item->set_field('transaction_id', $sale_data['id']);                            $this->Transaction_item->set_fields($ti);                            $s = $this->Transaction_item->insert();                        }                    }                    //delete journal                    $this->load->model('Journal');                    $journal_id = $this->Journal->fetch_journal_id_by_transaction_id($sale_data['id']);                    $this->Journal->delete($journal_id["id"]);                    //delete journal_acc                    $this->load->model('Journal_account');                    $journal_acc_ids = $this->Journal_account->fetch_journal_accounts_id_by_journal_id($journal_id["id"]);                    if ($journal_acc_ids) {                        foreach ($journal_acc_ids as $j) {                            $this->Journal_account->delete($j["id"]);                        }                    }                    $trans_items = $this->Transaction_item->load_all_trans_items($sale_data['id']);                    $trans_id = $sale_data['id'];                    $sa_data = $sale_data;                    $total = $this->Transaction->calculate_transaction_total($trans_items, $sa_data['discount'], $sa_data['TVA']);                    $this->load->model('Account');                    $this->Transaction->save_transaction_in_journals($sa_data, $trans_id, $total, "SA");                    $journal_id = $this->Transaction->fetch_journal_id_by_transaction_id($trans_id, $transType);                    $name1 = $this->Account->fetch_account_name_by_id($sa_data['account_id']);                    $name2 = $this->Account->fetch_account_name_by_id($sa_data['account2_id']);                    $this->Transaction->save_in_journal_accounts($journal_id["0"]["id"], $sa_data['account2_id'], $sa_data['auto_no'], $total, "-1", $name1["0"]["account_name"], "Sale");                    $this->Transaction->save_in_journal_accounts($journal_id["0"]["id"], $sa_data['account_id'], $sa_data['auto_no'], $total, "1", $name2["0"]["account_name"], "Sale");                    //update items qty                    $this->Transaction->update_items_qty($trans_items);                    $this->load->model('Journal');                    //update balance debit credit for account 1                    $balance = $this->Journal->calculate_account_balance($sa_data['account_id'])["total"];                    $credit = $this->Journal->calculate_account_credit($sa_data['account_id'])["total"];                    $debit = $this->Journal->calculate_account_debit($sa_data['account_id'])["total"];                    $this->Account->update_account_credit_debit_balance($sa_data['account_id'], $balance, $credit, $debit);                    //update balance debit credit for account 2                    $balance = $this->Journal->calculate_account_balance($sa_data['account2_id'])["total"];                    $credit = $this->Journal->calculate_account_credit($sa_data['account2_id'])["total"];                    $debit = $this->Journal->calculate_account_debit($sa_data['account2_id'])["total"];                    $this->Account->update_account_credit_debit_balance($sa_data['account2_id'], $balance, $credit, $debit);                    //update_pickedup_qty                    foreach ($trans_items_posted as $tri) {                        $pickup_qty = intval($tri['qty']) + intval($tri['pickedup_qty']);                        $this->Transaction_item->updated_trans_item_pickedup_qty_by_trans_id_item_id_and_account_id($tri['op_id'], $tri['item_id'], $sa_data['account_id'], $pickup_qty);                        $this->Transaction_item->updated_pickedup_qty($tri['trans_item_id'], $pickup_qty);                    }                    redirect('sales/edit/' . $trans_id);                } else {                    //create new invoice                    $os_data = $this->Transaction->load_trans_data_by_trans_id($post['os_id']);                    $transType = 'SA';                    $this->Transaction->set_field('auto_no', $this->Transaction->set_next_auto_number($transType));                    $this->Transaction->set_field('trans_type', $transType);                    $this->Transaction->set_field('fiscal_year_id', $this->violet_auth->get_fiscal_year_id());                    $this->Transaction->set_field('user_id', $this->violet_auth->get_user_id());                    $this->Transaction->set_field('account_id', $os_data['account_id']);                    $this->Transaction->set_field('account2_id', $os_data['account2_id']);                    $this->Transaction->set_field('currency_id', $os_data['currency_id']);                    $this->Transaction->set_field('currency_rate', $os_data['currency_rate']);                    $this->Transaction->set_field('discount', $os_data['discount']);                    $this->Transaction->set_field('pfand', $os_data['pfand']);                    $this->Transaction->set_field('delivery_charge', $os_data['delivery_charge']);                    $this->Transaction->set_field('TVA', $os_data['TVA']);                    $this->Transaction->set_field('description', $os_data['description']);                    $this->Transaction->set_field('VIN', $os_data['VIN']);                    $this->Transaction->set_field('model', $os_data['model']);                    $this->Transaction->set_field('OE', $os_data['OE']);                    $this->Transaction->set_field('delivery_type', $os_data['delivery_type']);                    $this->Transaction->set_field('tracking_number', $os_data['tracking_number']);                    $this->Transaction->set_field('payment_method', $os_data['payment_method']);                    $this->Transaction->set_field('transaction_number', $os_data['transaction_number']);                    $this->Transaction->set_field('driver_id', $os_data['driver_id']);                    $this->Transaction->set_field('employee_id', $os_data['employee_id']);                    $this->Transaction->set_field('relation_id', $post['os_id']);                    $this->Transaction->set_field('trans_date', date('d-m-Y'));                    $saved = $this->Transaction->insert();                    if ($saved) {                        $this->load->model('Transaction_item');                        foreach ($trans_items as $ti) {                            $this->Transaction_item->reset_fields();                            $this->Transaction_item->set_field('transaction_id', $this->Transaction->get_field('id'));                            $this->Transaction_item->set_fields($ti);                            $s = $this->Transaction_item->insert();                        }                        $trans_id = $this->Transaction->get_field('id');                        $sa_data = $this->Transaction->load_trans_data_by_trans_id($trans_id);                        $total = $this->Transaction->calculate_transaction_total($trans_items, $sa_data['discount'], $sa_data['TVA']);                        $this->load->model('Account');                        $this->Transaction->save_transaction_in_journals($sa_data, $trans_id, $total, "SA");                        $journal_id = $this->Transaction->fetch_journal_id_by_transaction_id($trans_id, $transType);                        $name1 = $this->Account->fetch_account_name_by_id($sa_data['account_id']);                        $name2 = $this->Account->fetch_account_name_by_id($sa_data['account2_id']);                        $this->Transaction->save_in_journal_accounts($journal_id["0"]["id"], $sa_data['account2_id'], $sa_data['auto_no'], $total, "-1", $name1["0"]["account_name"], "Sale");                        $this->Transaction->save_in_journal_accounts($journal_id["0"]["id"], $sa_data['account_id'], $sa_data['auto_no'], $total, "1", $name2["0"]["account_name"], "Sale");                        //update items qty                        $this->Transaction->update_items_qty($trans_items);                        $this->load->model('Journal');                        //update balance debit credit for account 1                        $balance = $this->Journal->calculate_account_balance($sa_data['account_id'])["total"];                        $credit = $this->Journal->calculate_account_credit($sa_data['account_id'])["total"];                        $debit = $this->Journal->calculate_account_debit($sa_data['account_id'])["total"];                        $this->Account->update_account_credit_debit_balance($sa_data['account_id'], $balance, $credit, $debit);                        //update balance debit credit for account 2                        $balance = $this->Journal->calculate_account_balance($sa_data['account2_id'])["total"];                        $credit = $this->Journal->calculate_account_credit($sa_data['account2_id'])["total"];                        $debit = $this->Journal->calculate_account_debit($sa_data['account2_id'])["total"];                        $this->Account->update_account_credit_debit_balance($sa_data['account2_id'], $balance, $credit, $debit);                        //update_pickedup_qty                        foreach ($trans_items_posted as $tri) {                            $pickup_qty = intval($tri['qty']) + intval($tri['pickedup_qty']);                            $this->Transaction_item->updated_trans_item_pickedup_qty_by_trans_id_item_id_and_account_id($tri['op_id'], $tri['item_id'], $sa_data['account_id'], $pickup_qty);                            $this->Transaction_item->updated_pickedup_qty($tri['trans_item_id'], $pickup_qty);                        }                        redirect('sales/edit/' . $trans_id);                    } else {                        redirect('reports/order_to_sale');                    }                }            } else {                redirect('reports/pickup_items');            }        }    }    public function monthly_accounts()    {        $data["customer_name"] = '';        $data["customer_id"] = '';        $data["report"] = '';        $data["year"] = date("Y");        $post = $this->input->post(null, true);        $data['post_case'] = 0;        if ($post) {            $data['post_case'] = 1;            $data['unpaid_invoices_count'] = 0;            $data['unpaid_invoices_total'] = 0;            $data['unpaid_invoices_total_no_tva'] = 0;            $data["customer_name"] = $post["customer_name"];            $data["customer_id"] = $post['customer_id'];            $data["report"] = $post['reports'];            $data["year"] = $post['year'];            $data['first_date'] = $post['year'] . '-' . $post['reports'] . '-1';            $data['last_date'] = date("Y-m-t", strtotime($data['first_date']));            $this->load->model(['Transaction', 'Transaction_item', 'Journal']);            $data['invoices'] = $this->Transaction->load_all_monthly_customer_unpaid_invoices($post['customer_id'], $data['first_date'], $data['last_date']);            $data['net_tot_vat'] = 0;            $data['TVA_amount'] = 0;            $data['subtot'] = 0;            $data['delivery_tot'] = 0;            $data['pfand_tot'] = 0;            $unpaid_invoices_total = 0;            $unpaid_invoices_total_no_tva = 0;            if ($data['invoices']) {                $data['unpaid_invoices_count'] = count($data['invoices']);                $data["trans_items"] = [];                foreach ($data['invoices'] as $k => $i) {                    $data['subtot'] += doubleval($i['subtot']);                    $data['pfand_tot'] += doubleval($i['pfand']);                    $data['delivery_tot'] += doubleval($i['delivery_charge']);                    $data['unpaid_invoices_total'] += doubleval($i['total']);                    $data['unpaid_invoices_total_no_tva'] += doubleval($i['total_no_tva']);                    $data["trans_items"][$k] = $this->Transaction_item->load_all_trans_items($i['trans_id']);                }                $unpaid_invoices_total_no_tva = $data['unpaid_invoices_total_no_tva'];                // $data['net_tot_vat'] = $data['unpaid_invoices_total'];                // $data['TVA_amount'] = number_format(($data['unpaid_invoices_total'] - $data['unpaid_invoices_total_no_tva']), 2) . " " . $data['invoices'][0]['currency_code'];                $data['unpaid_invoices_total_no_tva'] = number_format($data['unpaid_invoices_total_no_tva'], 2) . " " . $data['invoices'][0]['currency_code'];            }            $data['receipts'] = $this->Journal->load_all_monthly_customer_receipts($post['customer_id'], $data['first_date'], $data['last_date']);            foreach ($data['receipts'] as $r) {                $data['net_tot_vat'] -= $r['amount'];            }            $data['old_invoices'] = $this->Transaction->load_all_customer_unpaid_invoices_before_specific_date($post['customer_id'], $data['first_date']);            $data['old_invoices_tot'] = 0;            $data['old_subtot'] = 0;            $data['old_delivery'] = 0;            $data['old_pfand'] = 0;            foreach ($data['old_invoices'] as $ko => $o) {                $data['old_invoices_tot'] += doubleval($o['total_no_tva']);                $data['old_subtot'] += doubleval($o['subtot']);                $data['old_delivery'] += doubleval($o['delivery_charge']);                $data['old_pfand'] += doubleval($o['pfand']);                $data["trans_items_old"][$ko] = $this->Transaction_item->load_all_trans_items($o['id']);            }            // $data['net_tot_vat'] += $data['old_invoices_tot'];            $tva_amount = ($data['subtot'] + $data['old_subtot']) * (0.077);            $data['TVA_amount'] = number_format($tva_amount, 2) . " CHF";            $data['total_delivery_charge'] = $data['old_delivery'] + $data['delivery_tot'];            $data['total_pfand'] = $data['old_pfand'] + $data['pfand_tot'];            $unpaid_invoices_total = $data['subtot'] + $data['old_subtot'] + $tva_amount + $data['delivery_tot'] + $data['pfand_tot'] + $data['old_delivery'] + $data['old_pfand'];            // var_dump($unpaid_invoices_total, $data['old_invoices_tot'], $data['TVA_amount']);exit;            $data['old_invoices_tot'] = number_format($data['old_invoices_tot'], 2) . " CHF";            $data['unpaid_invoices_total'] = number_format($unpaid_invoices_total, 2) . " CHF";            $data['net_tot_vat'] += $unpaid_invoices_total;            $data['net_tot_vat'] = number_format($data['net_tot_vat'], 2) . " CHF";        }        // $lastDateOfMonth = date("Y-m-t", strtotime('2022-02-24'));        // var_dump($lastDateOfMonth);        $count = 0;        $months = array(            1 => "January",            2 => "February",            3 => "March",            4 => "April",            5 => "May",            6 => "June",            7 => "July",            8 => "August",            9 => "September",            10 => "October",            11 => "November",            12 => "December"        );        while ($count < 12) {            $count++;            $data["reports"][$count] = $months[$count];        }        $data["title"] = 'Monthly Accounts';        $data['customers'] = $this->Account->fetch_all_accounts_by_account_type('Customer');        $customer_options = array();        foreach ($data['customers'] as $customer) {            $customer_options[$customer['id']] = $customer['description'];        }        $data['customer_options'] = $customer_options;        $this->load->view('templates/header', [            '_moreCss' => ['js/air-datepicker/css/datepicker.min'],            '_page_title' => $data["title"]        ]);        $this->load->view('reports/monthly_accounts', $data);        $this->load->view('templates/footer', [            '_moreJs' => [                'air-datepicker/js/datepicker.min', 'air-datepicker/js/i18n/datepicker.en',                'jquery.autocomplete.min', 'reports/monthly_accounts'            ]        ]);    }    public function monthly_accounts_print($customer_id, $month, $year)    {        // if ($customer_id && $month && $year) {        $data["customer_name"] = '';        $data["customer_id"] = '';        $data["report"] = '';        $data["year"] = date("Y");        // $post = $this->input->post(null, true);        $data['post_case'] = 0;        $data['post_case'] = 1;        $data['unpaid_invoices_count'] = 0;        $data['unpaid_invoices_total'] = 0;        $data['unpaid_invoices_total_no_tva'] = 0;        $data["customer_name"] = '';        $data["customer_id"] = $customer_id;        $this->load->model('Account');        $data["customer"] = $this->Account->load($customer_id);        // var_dump($data["customer"]);exit;        $data["report"] = $month;        $data["year"] = $year;        $data['first_date'] = $year . '-' . $month . '-1';        $data['last_date'] = date("Y-m-t", strtotime($data['first_date']));        $this->load->model(['Transaction', 'Transaction_item', 'Journal']);        $data['invoices'] = $this->Transaction->load_all_monthly_customer_unpaid_invoices($customer_id, $data['first_date'], $data['last_date']);        // var_dump($data['invoices']);exit;        $data['net_tot_vat'] = 0;        $data['TVA_amount'] = 0;        $data['subtot'] = 0;        $data['delivery_tot'] = 0;        $data['pfand_tot'] = 0;        $unpaid_invoices_total = 0;        $unpaid_invoices_total_no_tva = 0;        if ($data['invoices']) {            $data['unpaid_invoices_count'] = count($data['invoices']);            $data["trans_items"] = [];            foreach ($data['invoices'] as $k => $i) {                $data['subtot'] += doubleval($i['subtot']);                $data['pfand_tot'] += doubleval($i['pfand']);                $data['delivery_tot'] += doubleval($i['delivery_charge']);                $data['unpaid_invoices_total'] += doubleval($i['total']);                $data['unpaid_invoices_total_no_tva'] += doubleval($i['total_no_tva']);                $data["trans_items"][$k] = $this->Transaction_item->load_all_trans_items($i['trans_id']);            }            $unpaid_invoices_total_no_tva = $data['unpaid_invoices_total_no_tva'];            // $data['net_tot_vat'] = $data['unpaid_invoices_total'];            // $data['TVA_amount'] = number_format(($data['unpaid_invoices_total'] - $data['unpaid_invoices_total_no_tva']), 2) . " " . $data['invoices'][0]['currency_code'];            $data['unpaid_invoices_total_no_tva'] = number_format($data['unpaid_invoices_total_no_tva'], 2) . " " . $data['invoices'][0]['currency_code'];        }        $data['receipts'] = $this->Journal->load_all_monthly_customer_receipts($customer_id, $data['first_date'], $data['last_date']);        foreach ($data['receipts'] as $r) {            $data['net_tot_vat'] -= $r['amount'];        }        $data['old_invoices'] = $this->Transaction->load_all_customer_unpaid_invoices_before_specific_date($customer_id, $data['first_date']);        $data['old_invoices_tot'] = 0;        $data['old_subtot'] = 0;        $data['old_delivery'] = 0;        $data['old_pfand'] = 0;        foreach ($data['old_invoices'] as $ko => $o) {            $data['old_invoices_tot'] += doubleval($o['total_no_tva']);            $data['old_subtot'] += doubleval($o['subtot']);            $data['old_delivery'] += doubleval($o['delivery_charge']);            $data['old_pfand'] += doubleval($o['pfand']);            $data["trans_items_old"][$ko] = $this->Transaction_item->load_all_trans_items($o['id']);        }        // $data['net_tot_vat'] += $data['old_invoices_tot'];        $tva_amount = ($data['subtot'] + $data['old_subtot']) * (0.077);        $data['TVA_amount'] = number_format($tva_amount, 2) . " CHF";        $data['total_delivery_charge'] = $data['old_delivery'] + $data['delivery_tot'];        $data['total_pfand'] = $data['old_pfand'] + $data['pfand_tot'];        $unpaid_invoices_total = $data['subtot'] + $data['old_subtot'] + $tva_amount + $data['delivery_tot'] + $data['pfand_tot'] + $data['old_delivery'] + $data['old_pfand'];        // var_dump($unpaid_invoices_total, $data['old_invoices_tot'], $data['TVA_amount']);exit;        $data['old_invoices_tot'] = number_format($data['old_invoices_tot'], 2) . " CHF";        $data['unpaid_invoices_total'] = number_format($unpaid_invoices_total, 2) . " CHF";        $data['net_tot_vat'] += $unpaid_invoices_total;        $data['net_tot_vat'] = number_format($data['net_tot_vat'], 2) . " CHF";        // $lastDateOfMonth = date("Y-m-t", strtotime('2022-02-24'));        // var_dump($lastDateOfMonth);        $count = 0;        $months = array(            1 => "January",            2 => "February",            3 => "March",            4 => "April",            5 => "May",            6 => "June",            7 => "July",            8 => "August",            9 => "September",            10 => "October",            11 => "November",            12 => "December"        );        while ($count < 12) {            $count++;            $data["reports"][$count] = $months[$count];        }        $data["title"] = 'Monthly Accounts Print';        $this->load->view('templates/header_print', [            '_page_title' => $data["title"]        ]);        $this->load->view('reports/monthly_acc_print', $data);    }    public function receiving_missing_items()    {        $this->load->model(['Transaction', 'Transaction_item']);        $data['from_date'] = date('d-m-Y', strtotime("-1 days"));        $data['to_date'] = date('d-m-Y');        $data['extra_items'] = [];        $data['missing_items'] = [];        $post = $this->input->post(null, true);        if ($post) {            $data['from_date'] = $post['from_date'];            $data['to_date'] = $post['to_date'];        }        $all_pu = $this->Transaction->load_all_purchases_linked_to_op($data['from_date'], $data['to_date']);        foreach ($all_pu as $k => $pu) {            $pu_nb = $pu['pu_nb'];            $op_items = $this->Transaction_item->load_all_trans_items_grouped_by_item($pu['op_id']);            if ($op_items) {                $pu_items = $this->Transaction_item->load_all_trans_items_grouped_by_item($pu['pu_id']);                // var_dump($pu_items);exit;                if ($pu_items) {                    $trans_items1 = $pu_items;                    $op_ids = [];                    foreach ($op_items as $op) {                        $op_ids[] = $op['item_id'];                    }                    $pu_ids = [];                    foreach ($pu_items as $pu) {                        $pu_ids[] = $pu['item_id'];                    }                    $missing = array_diff($op_ids, $pu_ids);                    $extra = array_diff($pu_ids, $op_ids);                    $common = array_intersect($op_ids, $pu_ids);                    $missing_items = [];                    $countm = 0;                    // var_dump($op_items);                    foreach ($op_items as $op) {                        foreach ($missing as $m) {                            if ($m == $op['item_id']) {                                $op['pu_nb'] = $pu_nb;                                $missing_items[$countm] = $op;                                $countm++;                                break;                            }                        }                    }                    $extra_items = [];                    foreach ($trans_items1 as $t) {                        foreach ($extra as $e) {                            if ($e == $t['item_id']) {                                $extra_items[] = $t;                                break;                            }                        }                    }                    $common_items = [];                    foreach ($common as $k => $c) {                        $qty_pu = $qty_op = 0;                        foreach ($trans_items1 as $t) {                            if ($c == $t['item_id']) {                                $common_items[$k] = $t;                                $qty_pu = $t['qty'];                                break;                            }                        }                        foreach ($op_items as $op) {                            if ($c == $op['item_id']) {                                $qty_op = $op['qty'];                                break;                            }                        }                        $diff = $qty_op - $qty_pu;                        if ($diff > 0) {                            $common_items[$k]['qty'] = $diff;                            $common_items[$k]['qty_diff'] = 1;                            $common_items[$k]['pu_nb'] = $pu_nb;                            $res = $this->Transaction->load_trans_data_by_trans_id($common_items[$k]['relation_id']);                            if ($res) {                                $common_items[$k]['op_nb'] = $res['auto_no'];                            } else {                                $common_items[$k]['op_nb'] = '';                            }                            // var_dump($common_items[$k]);exit;                            $missing_items[] = $common_items[$k];                        }                        if ($diff < 0) {                            $common_items[$k]['qty'] = abs($diff);                            $common_items[$k]['qty_diff'] = 1;                            $extra_items[] = $common_items[$k];                        }                    }                    // $data['extra_items'][$k] = $extra_items;                    // $data['missing_items'][$k] = $missing_items;                    if ($missing_items) {                        foreach ($missing_items as $m) {                            $data['missing_items'][] = $m;                        }                    }                }            }            // exit;        }        $data["title"] = 'Receiving Missing Items Report';        $this->load->view('templates/header', [            '_moreCss' => ['js/air-datepicker/css/datepicker.min'],            '_page_title' => $data["title"]        ]);        $this->load->view('reports/receiving_missing_items', $data);        $this->load->view('templates/footer', [            '_moreJs' => [                'air-datepicker/js/datepicker.min', 'air-datepicker/js/i18n/datepicker.en',                'jquery.autocomplete.min', 'reports/receiving_missing_items'            ]        ]);    }}