<?phpdefined('BASEPATH') or die('No direct script access allowed');class Warehouse extends MY_Model{    protected $modelName = 'Warehouse';    protected $_table = 'warehouses';    protected $_listFieldName = 'warehouse';    protected $_fieldsNames = ['id', 'warehouse', 'shelf'];    protected $allowedNulls = [];    protected $_dateFields = [];    public function __construct()    {        parent::__construct();        $this->validate = [            'warehouse' => [                'required' => [                    'required' => true, 'allowEmpty' => false, 'rule' => ['maxLength', 255],                    'message' => sprintf($this->lang->line('required_rule'), 'Name', 255)                ],            ],            'shelf' => [                'required' => [                    'required' => true, 'allowEmpty' => false, 'rule' => ['maxLength', 255],                    'message' => sprintf($this->lang->line('required_rule'), 'Name', 255)                ],            ],        ];    }    public function paginate_warehouses()    {        $query = [            'select' => "warehouses.*",            'group_by'  => ['warehouse'],            'order_by' => [['id', 'ASC']]        ];        return parent::paginate($query, ['urlPrefix' => '']);    }    public function load_warehouses_data_tables()    {        $dt = [            'columns' => ['warehouses.warehouse', 'warehouses.id'],            'query' => [                'group_by'  => ['warehouse']            ],            'search_in' => ['warehouses.warehouse', 'warehouses.shelf']        ];        return parent::load_datatables_pagedata($dt);    }    public function paginate_expand_shelfs($warehouse)    {        $query = [            'select' => "warehouses.*",            'where'  => ['warehouse', $warehouse],            'order_by' => [['id', 'ASC']]        ];        return parent::paginate($query, ['uri_segment' => 4, 'urlPrefix' => '']);    }    public function load_expand_shelfs_data_tables($warehouse)    {        $dt = [            'columns' => ['warehouses.warehouse', 'warehouses.shelf', 'warehouses.id'],            'query' => [                'where'  => ['warehouse', $warehouse]            ],            'search_in' => ['warehouses.warehouse', 'warehouses.shelf']        ];        return parent::load_datatables_pagedata($dt);    }    public function load_warehouses_list()    {        $this->db->select('warehouse');        $this->db->from('warehouses');        $this->db->group_by('warehouse');        $warehouses = $this->db->get()->result_array();        $query = [];        foreach ($warehouses as $w) {            array_push($query, $w["warehouse"]);        }        return $query;    }    public function fetch_all_warehouse_shelfs($warehouse)    {        $this->db->select('shelf');        $this->db->from('warehouses');        $this->db->where('warehouses.warehouse', $warehouse);        $shelfs = $this->db->get()->result_array();        $query = [];        foreach ($shelfs as $s) {            array_push($query, $s["shelf"]);        }        return $query;    }    public function fetch_all_shelfs_for_warehouse($warehouse)    {        $this->db->select('shelf');        $this->db->from('warehouses');        $this->db->where('warehouses.warehouse', $warehouse);        $query = $this->db->get()->result_array();        return $query;    }    public function get_warehouse_id_by_warehouse_and_shelf($warehouse, $shelf)    {        $this->db->select('id');        $this->db->from('warehouses');        $this->db->where('warehouses.warehouse', $warehouse);        $this->db->where('warehouses.shelf', $shelf);        $query = $this->db->get()->row_array();        return $query;    }    public function fetch_warehouse_and_shelf($warehouse_id)    {        $this->db->select('warehouse, shelf');        $this->db->from('warehouses');        $this->db->where('warehouses.id', $warehouse_id);        $this->db->group_by('warehouse');        $query = $this->db->get()->row_array();        return $query;    }    public function get_warehouse_ids_of_item($item_id)    {        $this->db->select('warehouse_id');        $this->db->from('transaction_items');        $this->db->where('transaction_items.item_id', $item_id);        $this->db->where('transaction_items.warehouse_id !=', '0');        $this->db->group_by('warehouse_id');        $query = $this->db->get()->result_array();        return $query;    }    public function is_warhouse_id_active_in_trans_items($id)    {        $this->db->select('warehouse_id');        $this->db->from('transaction_items');        $this->db->where('transaction_items.warehouse_id', $id);        $this->db->group_by('warehouse_id');        $query = $this->db->get()->result_array();        if ($query === []) {            return false;        } else {            return true;        }    }    public function  fetch_all_warehouse_shelfs_of_item($warehouse, $item_id)    {        $query = [            'select' => [                ["warehouses.shelf"]            ],            'join' => [                ['transaction_items', 'transaction_items.warehouse_id = warehouses.id', 'inner'],            ],            'where' => [                ["transaction_items.item_id", $item_id],                ["warehouses.warehouse", $warehouse]            ],            'group_by' => ["warehouses.shelf"]        ];        return $this->load_all($query);    }    public function warehouses_count()    {        $this->db->select('count(*) as count');        $this->db->from('warehouses');        $query = $this->db->get()->row_array();        return $query;    }    public function is_warehouse_shelf_exists($warehouse, $shelf)    {        $this->db->select('count(*) as count');        $this->db->from('warehouses');        $this->db->where('warehouse', $warehouse);        $this->db->where('shelf', $shelf);        $query = $this->db->get()->row_array();        if ($query["count"] === "0") {            return false;        } else {            return true;        }    }    public function fetch_warehouse_id_by_item_id($item_id)    {        $this->db->select('warehouse_id');        $this->db->from('transaction_items');        $this->db->where('transaction_items.item_id', $item_id);        $this->db->where('transaction_items.warehouse_id !=', 0);        $this->db->group_by('warehouse_id');        $query = $this->db->get()->result_array();        return $query;    }    public function load_item_all_warehouses_and_shelfs($warehouse_id, $item_id)    {        $query = [            'select' => [                ["warehouses.warehouse, warehouses.shelf, SUM(transaction_items.qty * transaction_items.mvt_type) as qty"]            ],            'join' => [                ['transaction_items', 'transaction_items.warehouse_id = warehouses.id', 'inner'],                ['transactions', 'transactions.id = transaction_items.transaction_id', 'inner'],            ],            'where' => [                ["transaction_items.warehouse_id", $warehouse_id],                ["transaction_items.item_id", $item_id],                ['transactions.fiscal_year_id', $this->violet_auth->get_fiscal_year_id()]            ],        ];        return $this->load($query);    }    public function check_if_item_exists_in_any_warehouse($item_id)    {        $this->db->select('count(*) as count');        $this->db->from('transaction_items');        $this->db->where('transaction_items.item_id', $item_id);        $this->db->where('transaction_items.warehouse_id !=', 0);        $this->db->group_by('warehouse_id');        $query = $this->db->get()->row_array();        return $query;    }    public function fetch_all__items_by_ware($ware_id)    {        $this->db->select('*');        $this->db->from('transaction_items');        $this->db->where('transaction_items.warehouse_id', $ware_id);        $query = $this->db->get()->result_array();        return $query;    }    public function fetch_items_by_warehouse_only($warehouse_name)    {        $query = [            'select' => [                "items.barcode, Min(items.EAN) as EAN,  Min(items.brand) as brand,                Min(items.description) as description, Min(items.artical_number) as artical_number, 				SUM(transaction_items.qty * transaction_items.mvt_type) as total_qty,				warehouses.warehouse, warehouses.shelf, Min(items.id) as item_id"            ],            'join' => [                ['transaction_items', 'warehouses.id = transaction_items.warehouse_id', 'inner'],                ['items', 'items.id = transaction_items.item_id', 'inner'],                ['transactions', 'transaction_items.transaction_id = transactions.id', 'inner'],            ],            'where' => [                ["transactions.fiscal_year_id", $this->violet_auth->get_fiscal_year_id()],            ],            'group_by' => ['warehouses.warehouse, warehouses.shelf, items.barcode'],            'having' => [                ['SUM(transaction_items.qty * transaction_items.mvt_type) !=', 0],            ],        ];        if ($warehouse_name !== "All") {            $query['where'][] = ['warehouses.warehouse', $warehouse_name];        }        return $this->load_all($query);    }    public function fetch_items_by_warehouse_and_shelf($warehouse_name, $shelf_name)    {        $query = [            'select' => [                "items.barcode, Min(items.EAN) as EAN, Min(items.brand) as brand,                Min(items.description) as description, Min(items.artical_number) as artical_number, 				SUM(transaction_items.qty * transaction_items.mvt_type) as total_qty,				warehouses.warehouse, warehouses.shelf, Min(items.id) as item_id"            ],            'join' => [                ['transaction_items', 'warehouses.id = transaction_items.warehouse_id', 'inner'],                ['items', 'items.id = transaction_items.item_id', 'inner'],                ['transactions', 'transaction_items.transaction_id = transactions.id', 'inner'],            ],            'where' => [                ["transactions.fiscal_year_id", $this->violet_auth->get_fiscal_year_id()],                ['warehouses.warehouse', $warehouse_name],                ['warehouses.shelf', $shelf_name]            ],            'group_by' => ['warehouses.warehouse, warehouses.shelf, items.barcode'],            'having' => [                ['SUM(transaction_items.qty * transaction_items.mvt_type) !=', 0],            ],        ];        return $this->load_all($query);    }    public function fetch_items_by_warehouse_only_group_by($warehouse_name)    {        $query = [            'select' => [                "items.barcode, Min(items.EAN) as EAN, Min(items.brand) as brand,                Min(items.description) as description, Min(items.artical_number) as artical_number, 				SUM(transaction_items.qty * transaction_items.mvt_type) as total_qty,				warehouses.warehouse, warehouses.shelf, Min(items.id) as item_id"            ],            'join' => [                ['transaction_items', 'warehouses.id = transaction_items.warehouse_id', 'inner'],                ['items', 'items.id = transaction_items.item_id', 'inner'],                ['transactions', 'transaction_items.transaction_id = transactions.id', 'inner'],            ],            'where' => [                ["transactions.fiscal_year_id", $this->violet_auth->get_fiscal_year_id()],            ],            'group_by' => ['items.barcode'],            'having' => [                ['SUM(transaction_items.qty * transaction_items.mvt_type) !=', 0],            ],        ];        if ($warehouse_name !== "All") {            $query['where'][] = ['warehouses.warehouse', $warehouse_name];        }        return $this->load_all($query);    }    public function fetch_items__by_warehouse_and_shelf_group_by($warehouse_name, $shelf_name)    {        $this->db->select('MIN(items.description) AS description, MIN(items.barcode) AS barcode, SUM(transaction_items.qty * transaction_items.mvt_type) as qty');        $this->db->from('transaction_items');        $this->db->join('warehouses', 'warehouses.id = transaction_items.warehouse_id');        $this->db->join('items', 'items.id = transaction_items.item_id');        $this->db->join('transactions', 'transactions.id = transaction_items.transaction_id');        $this->db->where('transactions.fiscal_year_id', $this->violet_auth->get_fiscal_year_id());        $this->db->where('warehouses.warehouse', $warehouse_name);        $this->db->where('warehouses.shelf', $shelf_name);        $this->db->group_by('items.id');        $query = $this->db->get()->result_array();        return $query;    }    public function fetch_warehouse_shelf($warehouse_id)    {        $query = $this->db->select("warehouse, shelf")            ->select("CONCAT_WS(' - ', warehouse, shelf) AS w_s")            ->from($this->_table)            ->where('id', $warehouse_id)            ->get();        if (false !== $query && $query->num_rows() > 0) {            return $query->row_array();        }        return [];    }    public function fetch_all_warehouse_shelf()    {        $query = $this->db->select("id")            ->select("CONCAT_WS(' - ', warehouse, shelf) AS w_s")            ->from($this->_table)            ->get();        if (false !== $query && $query->num_rows() > 0) {            return $query->result_array();        }        return [];    }    public function load_warehouses_list_for_OP($item_id)    {        $this->db->select('warehouses.id');        $this->db->from('warehouses');        $this->db->join('transaction_items', 'transaction_items.warehouse_id = warehouses.id');        $this->db->join('transactions', 'transactions.id = transaction_items.transaction_id');        $this->db->where('transaction_items.item_id =', $item_id);        $this->db->where('transactions.trans_type =', "OI");        // $this->db->group_by('warehouse');        $warehouses = $this->db->get()->result_array();        $query = [];        foreach ($warehouses as $w) {            array_push($query, $w["id"]);        }        return $query;    }    public function load_warehouses_ids_list()    {        $this->db->select('id');        $this->db->from('warehouses');        $warehouses = $this->db->get()->result_array();        $query = [];        foreach ($warehouses as $w) {            array_push($query, $w["id"]);        }        return $query;    }    public function fetch_item_warehouse_shelfs_for_OP($warehouse, $item_id)    {        $this->db->select('warehouses.shelf');        $this->db->from('warehouses');        $this->db->join('transaction_items', 'transaction_items.warehouse_id = warehouses.id');        $this->db->join('transactions', 'transactions.id = transaction_items.transaction_id');        $this->db->where('transactions.fiscal_year_id', $this->violet_auth->get_fiscal_year_id());        $this->db->where('transaction_items.item_id =', $item_id);        $this->db->where('transactions.trans_type =', "OI");        $this->db->where('warehouses.warehouse =', $warehouse);        // $this->db->group_by('warehouse');        $warehouses = $this->db->get()->result_array();        $query = [];        foreach ($warehouses as $w) {            array_push($query, $w["shelf"]);        }        return $query;    }    public function fetch_warehouse_id_by_warehouse_shelf($warehouse_name, $shelf_name)    {        $this->db->select('warehouses.id');        $this->db->from('warehouses');        $this->db->where('warehouses.warehouse', $warehouse_name);        $this->db->where('warehouses.shelf', $shelf_name);        $query = $this->db->get()->row_array();        return $query;    }    public function fetch_warehouse_id_by_shelf($shelf)    {        $this->db->select('*');        $this->db->from('warehouses');        $this->db->where('warehouses.shelf', $shelf);        $query = $this->db->get()->result_array();        return $query;    }    public function paginate_inventory()    {        $query = [            'select' => [                "items.barcode, items.EAN, items.description, items.artical_number, items.brand, items.alternative,				SUM(transaction_items.qty * transaction_items.mvt_type) as total_qty,				warehouses.warehouse, warehouses.shelf, Min(items.id) as item_id"            ],            'join' => [                ['transaction_items', 'warehouses.id = transaction_items.warehouse_id', 'inner'],                ['items', 'items.id = transaction_items.item_id', 'inner'],                ['transactions', 'transaction_items.transaction_id = transactions.id', 'inner'],            ],            'where' => [                ["transactions.fiscal_year_id", $this->violet_auth->get_fiscal_year_id()],            ],            'group_by' => ['warehouses.warehouse, warehouses.shelf, items.barcode, items.EAN, items.description, items.artical_number, items.brand'],            //'limit' => '10000'            // 'having' => [            //     ['SUM(transaction_items.qty * transaction_items.mvt_type) !=', 0],            // ],        ];        return parent::paginate($query, ['inPage' => 10, 'urlPrefix' => '']);    }    public function load_inventory_data_tables()    {        $dt = [            'columns' => [                'items.barcode', 'items.EAN', 'items.description', 'items.artical_number', 'items.brand', 'items.alternative',                ['SUM(transaction_items.qty * transaction_items.mvt_type)', 'total_qty'],                'warehouses.warehouse', 'warehouses.shelf', ['Min(items.id)', 'item_id']            ],            'query' => [                'join' => [                    ['transaction_items', 'warehouses.id = transaction_items.warehouse_id', 'inner'],                    ['items', 'items.id = transaction_items.item_id', 'inner'],                    ['transactions', 'transaction_items.transaction_id = transactions.id', 'inner'],                ],                'where' => [                    ["transactions.fiscal_year_id", $this->violet_auth->get_fiscal_year_id()],                ],                'group_by' => ['warehouses.warehouse, warehouses.shelf, items.barcode, items.EAN, items.description, items.artical_number, items.brand'],                // 'having' => [                //     ["SUM(transaction_items.qty * transaction_items.mvt_type) !=", 0],                // ],            ],            'search_in' => ['items.barcode', 'items.description', 'items.EAN', 'items.artical_number', 'warehouses.warehouse', 'warehouses.shelf']        ];        $filters = $this->input->get(['warehouse', 'shelf', 'artical_number'], true);        if ($filters['artical_number'] !== '') {            $this->load->model('Item');            $alternative = $this->Item->fetch_item_alternative($filters['artical_number']);            if ($alternative['alternative']) {                $dt['query']['where'][] = ["items.artical_number = '" . $filters['artical_number'] . "' OR items.alternative = '" . $filters['artical_number'] . "'"];            } else {                $dt['query']['where'][] = ["items.artical_number", $filters['artical_number']];            }        } else {            if ($filters['warehouse'] !== 'All' && $filters['warehouse'] !== '') {                $dt['query']['where'][] = ['warehouses.warehouse', $filters['warehouse']];            }            if ($filters['shelf'] !== '' && $filters['shelf'] !== "0") {                $dt['query']['where'][] = ['warehouses.shelf', $filters['shelf']];            }        }        // var_dump($dt['query']);        return parent::load_datatables_pagedata($dt);    }    public function fetch_all_order_warehouses()    {        $this->db->select('warehouse');        $this->db->from('warehouses');        $this->db->where(            "warehouse LIKE 'order%' or warehouse LIKE 'Order%'"        );        $query = $this->db->get()->result_array();        return $query;    }    public function fetch_shelf_of_order_warehouse($warehouse)    {        $this->db->select('shelf');        $this->db->from('warehouses');        $this->db->where('warehouse', $warehouse);        $query = $this->db->get()->result_array();        return $query;    }    public function fetch_item_warehouses($item_id)    {        $this->db->select('warehouses.warehouse');        $this->db->from('warehouses');        $this->db->join('transaction_items', 'transaction_items.warehouse_id = warehouses.id');        $this->db->join('transactions', 'transactions.id = transaction_items.transaction_id');        $this->db->where('transactions.fiscal_year_id', $this->violet_auth->get_fiscal_year_id());        $this->db->where('transaction_items.item_id =', $item_id);        $this->db->where('transactions.trans_type !=', "OS");        // $this->db->group_by('warehouse');        $warehouses = $this->db->get()->result_array();        $query = [];        foreach ($warehouses as $w) {            array_push($query, $w["warehouse"]);        }        return array_unique($query);    }    public function calculate_max_qty_for_sale_edit_validation($trans_id, $warehouse_id, $item_id)    {        $query = [            'select' => [                ["SUM(transaction_items.qty * transaction_items.mvt_type) as qty"]            ],            'join' => [                ['transaction_items', 'transaction_items.warehouse_id = warehouses.id', 'inner'],                ['transactions', 'transactions.id = transaction_items.transaction_id', 'inner'],            ],            'where' => [                ["transaction_items.warehouse_id", $warehouse_id],                ["transaction_items.item_id", $item_id],                ["transactions.id !=", $trans_id],                ['transactions.fiscal_year_id', $this->violet_auth->get_fiscal_year_id()]            ],        ];        return $this->load($query);    }    public function fetch_item_in_inventory($item_id)    {        $query = [            'select' => [                "items.barcode, Min(items.EAN) as EAN,                Min(items.description) as description, Min(items.artical_number) as artical_number, 				SUM(transaction_items.qty * transaction_items.mvt_type) as total_qty,				warehouses.warehouse, warehouses.shelf, Min(items.id) as item_id, warehouses.id, Min(items.brand) as brand"            ],            'join' => [                ['transaction_items', 'warehouses.id = transaction_items.warehouse_id', 'inner'],                ['items', 'items.id = transaction_items.item_id', 'inner'],                ['transactions', 'transaction_items.transaction_id = transactions.id', 'inner'],            ],            'where' => [                ["transactions.fiscal_year_id", $this->violet_auth->get_fiscal_year_id()],                ["transaction_items.item_id", $item_id]            ],            'group_by' => ['warehouses.warehouse, warehouses.shelf, warehouses.id, items.barcode'],            'having' => [                ['SUM(transaction_items.qty * transaction_items.mvt_type) >', 0],            ],        ];        return $this->load_all($query);    }    public function fetch_item_in_inventory_for_edit_Sale($item_id, $trans_id)    {        $query = [            'select' => [                "items.barcode, Min(items.EAN) as EAN,                Min(items.description) as description, Min(items.artical_number) as artical_number, 				SUM(transaction_items.qty * transaction_items.mvt_type) as total_qty,				warehouses.warehouse, warehouses.shelf, Min(items.id) as item_id, warehouses.id"            ],            'join' => [                ['transaction_items', 'warehouses.id = transaction_items.warehouse_id', 'inner'],                ['items', 'items.id = transaction_items.item_id', 'inner'],                ['transactions', 'transaction_items.transaction_id = transactions.id', 'inner'],            ],            'where' => [                ["transactions.fiscal_year_id", $this->violet_auth->get_fiscal_year_id()],                ["transaction_items.item_id", $item_id],                ["transactions.id !=", $trans_id]            ],            'group_by' => ['warehouses.warehouse, warehouses.shelf, warehouses.id, items.barcode'],            'having' => [                ['SUM(transaction_items.qty * transaction_items.mvt_type) >', 0],            ],        ];        return $this->load_all($query);    }    public function fetch_item_warehouse_shelfs($item_id, $warehouse)    {        $query = [            'select' => [                "warehouses.shelf"            ],            'join' => [                ['transaction_items', 'warehouses.id = transaction_items.warehouse_id', 'inner'],                ['items', 'items.id = transaction_items.item_id', 'inner'],                ['transactions', 'transaction_items.transaction_id = transactions.id', 'inner'],            ],            'where' => [                ["transactions.fiscal_year_id", $this->violet_auth->get_fiscal_year_id()],                ["transaction_items.item_id", $item_id],                ["warehouses.warehouse", $warehouse]            ],            'group_by' => ['warehouses.warehouse, warehouses.shelf, items.barcode'],            'having' => [                ['SUM(transaction_items.qty * transaction_items.mvt_type) >', 0],            ],        ];        return $this->load_all($query);    }    public function fetch_item_warehouse_shelfs_for_edit_Sale($item_id, $warehouse, $trans_id)    {        $query = [            'select' => [                "warehouses.shelf"            ],            'join' => [                ['transaction_items', 'warehouses.id = transaction_items.warehouse_id', 'inner'],                ['items', 'items.id = transaction_items.item_id', 'inner'],                ['transactions', 'transaction_items.transaction_id = transactions.id', 'inner'],            ],            'where' => [                ["transactions.fiscal_year_id", $this->violet_auth->get_fiscal_year_id()],                ["transaction_items.item_id", $item_id],                ["warehouses.warehouse", $warehouse],                ["transactions.id !=", $trans_id]            ],            'group_by' => ['warehouses.warehouse, warehouses.shelf, items.barcode'],            'having' => [                ['SUM(transaction_items.qty * transaction_items.mvt_type) >', 0],            ],        ];        return $this->load_all($query);    }    public function load_all_order_warehouses()    {        $query = [            'select' => [                ["warehouses.warehouse"]            ],            'where' => [                ["warehouses.warehouse LIKE '%order%'"]            ],        ];        return $this->load_all($query);    }    public function load_all_order_warehouses_items($warehouse, $from_date, $to_date, $brand, $status, $artical_nb, $customer_name)    {        $query = [            'select' => [                "Min(items.artical_number) as artical_number, Min(items.description) as description, Min(items.brand) as brand, 				SUM(transaction_items.qty) as total_qty, Min(items.cost) as cost, SUM(transaction_items.qty * items.cost) as total_cost,				warehouses.warehouse, warehouses.shelf, transaction_items.status, accounts.account_name, transaction_items.id as trans_item_id,                transactions.id as trans_id, transactions.auto_no, transactions.relation_id"            ],            'join' => [                ['transaction_items', 'warehouses.id = transaction_items.warehouse_id', 'inner'],                ['items', 'items.id = transaction_items.item_id', 'inner'],                ['transactions', 'transaction_items.transaction_id = transactions.id', 'inner'],                ['accounts', 'accounts.id = transactions.account_id', 'inner'],            ],            'where' => [                ["transactions.fiscal_year_id", $this->violet_auth->get_fiscal_year_id()],                ["transactions.trans_type", "OS"],            ],            'group_by' => ['warehouses.warehouse, warehouses.shelf, items.id, transactions.id, accounts.id'],            'having' => [                ['SUM(transaction_items.qty) >', 0],            ],        ];        if ($warehouse !== "All") {            $query["where"][] = ["warehouses.warehouse", $warehouse];        } else {            $query["where"][] = ["warehouses.warehouse LIKE '%order%'"];        }        if ($from_date !== '' && $to_date !== '') {            $query["where"][] = ["transactions.trans_date >=", $from_date];            $query["where"][] = ["transactions.trans_date <=", $to_date];        }        if ($brand !== '') {            $query["where"][] = ["items.brand", $brand];        }        if ($status !== 'All') {            $query["where"][] = ["transaction_items.status", $status];        }        if ($artical_nb !== '') {            $query["where"][] = ["items.artical_number", $artical_nb];        }        if ($customer_name !== '') {            $query["where"][] = ["accounts.account_name", $customer_name];        }        return $this->load_all($query);    }    public function load_warehouses_list_without_order_warehouses()    {        $this->db->select('warehouse');        $this->db->from('warehouses');        $this->db->where("warehouses.warehouse NOT LIKE '%order%'");        $this->db->group_by('warehouse');        $warehouses = $this->db->get()->result_array();        $query["All"] = "All";        foreach ($warehouses as $w) {            array_push($query, $w["warehouse"]);        }        return $query;    }    public function calculate_inventory_total_value($warehouse, $shelf)    {        $query = [            'select' => [                "SUM(transaction_items.qty * transaction_items.mvt_type) as total_qty,				Min(items.cost) as cost"            ],            'join' => [                ['transaction_items', 'warehouses.id = transaction_items.warehouse_id', 'inner'],                ['items', 'items.id = transaction_items.item_id', 'inner'],                ['transactions', 'transaction_items.transaction_id = transactions.id', 'inner'],            ],            'where' => [                ["transactions.fiscal_year_id", $this->violet_auth->get_fiscal_year_id()],            ],            'group_by' => ['warehouses.warehouse, warehouses.shelf, items.barcode'],            'having' => [                ['SUM(transaction_items.qty * transaction_items.mvt_type) >', 0],            ],        ];        if ($warehouse !== 'All' && $warehouse !== '') {            $query['where'][] = ['warehouses.warehouse', $warehouse];        }        if ($shelf !== '' && $shelf !== '0') {            $query['where'][] = ['warehouses.shelf', $shelf];        }        return $this->load_all($query);    }    public function insert_multi_shelfs_for_one_warehouse($warehouse, $shelfs)    {        foreach ($shelfs as $shelf) {            $data = [                'warehouse' => $warehouse,                'shelf' => $shelf            ];            $query = $this->db->insert('warehouses', $data);        }        return $query;    }    public function check_if_warehouse_shelf_exists($warehouse, $shelfs)    {        $exist = [];        foreach ($shelfs as $shelf) {            $this->db->select('count(*) as count');            $this->db->from('warehouses');            $this->db->where("warehouses.warehouse", $warehouse);            $this->db->where("warehouses.shelf", $shelf);            $query = $this->db->get()->row_array();            if (intval($query['count']) > 0) {                $exist[$shelf] = $shelf;            }        }        return $exist;    }    public function fetch_warehouse_shelf_in_inventory($warehouse_id)    {        $query = [            'select' => [                "items.id as item_id, SUM(transaction_items.qty * transaction_items.mvt_type) as total_qty"            ],            'join' => [                ['transaction_items', 'warehouses.id = transaction_items.warehouse_id', 'inner'],                ['items', 'items.id = transaction_items.item_id', 'inner'],                ['transactions', 'transaction_items.transaction_id = transactions.id', 'inner'],            ],            'where' => [                ["transactions.fiscal_year_id", $this->violet_auth->get_fiscal_year_id()],                ["transaction_items.warehouse_id", $warehouse_id]            ],            'group_by' => ['warehouses.id, items.id'],            'having' => [                ['SUM(transaction_items.qty * transaction_items.mvt_type) !=', 0],            ],        ];        return $this->load_all($query);    }    public function load_item_availabilty_table_with_alternatives($item_id, $artical_number)    {        $query = [            'select' => [                "items.id as item_id, items.artical_number, items.brand, warehouses.warehouse, warehouses.shelf,				SUM(transaction_items.qty * transaction_items.mvt_type) as total_qty"            ],            'join' => [                ['transaction_items', 'warehouses.id = transaction_items.warehouse_id', 'inner'],                ['items', 'items.id = transaction_items.item_id', 'inner'],                ['transactions', 'transaction_items.transaction_id = transactions.id', 'inner'],            ],            'where' => [                ["transactions.fiscal_year_id", $this->violet_auth->get_fiscal_year_id()],                ["items.id = '" . $item_id . "' OR items.alternative = '" . $artical_number . "'"]            ],            'group_by' => ['warehouses.warehouse, warehouses.shelf, items.id, items.artical_number, items.brand'],            'having' => [                ['SUM(transaction_items.qty * transaction_items.mvt_type) >', 0],            ],            'order_by' => [['item_id', 'ASC']]        ];        return $this->load_all($query);    }    public function load_item_availabilty_table_with_alternatives_for_QU($item_id, $artical_number)    {        $query = [            'select' => [                "items.id as item_id, items.artical_number, items.brand, warehouse, shelf,				SUM(transaction_items.qty * transaction_items.mvt_type) as total_qty"            ],            'join' => [                ['transaction_items', 'warehouses.id = transaction_items.warehouse_id', 'inner'],                ['items', 'items.id = transaction_items.item_id', 'inner'],                ['transactions', 'transaction_items.transaction_id = transactions.id', 'inner'],            ],            'where' => [                ["transactions.fiscal_year_id", $this->violet_auth->get_fiscal_year_id()],                ["items.id = '" . $item_id . "' OR items.alternative = '" . $artical_number . "'"]            ],            'group_by' => ['items.id, items.artical_number, items.brand, warehouse, shelf'],            'having' => [                ['SUM(transaction_items.qty * transaction_items.mvt_type) >', 0],            ],            'order_by' => [['item_id', 'ASC']]        ];        return $this->load_all($query);    }    public function fetch_item_available_qty_in_specific_warehouse_shelf($item_id, $warehouse_id)    {        $query = [            'select' => [                "SUM(transaction_items.qty * transaction_items.mvt_type) as total_qty,"            ],            'join' => [                ['transaction_items', 'warehouses.id = transaction_items.warehouse_id', 'inner'],                ['items', 'items.id = transaction_items.item_id', 'inner'],                ['transactions', 'transaction_items.transaction_id = transactions.id', 'inner'],            ],            'where' => [                ["transactions.fiscal_year_id", $this->violet_auth->get_fiscal_year_id()],                ["transaction_items.item_id", $item_id],                ["transaction_items.warehouse_id", $warehouse_id]            ],            'group_by' => ['warehouses.id, items.barcode']        ];        return $this->load($query);    }    public function load_all_shelfs_of_warehouse($warehouse_name)    {        $this->db->select('warehouses.shelf');        $this->db->from('warehouses');        $this->db->where('warehouses.warehouse', $warehouse_name);        $query = $this->db->get()->result_array();        return $query;    }}