jQuery(document).ready(function () {    window.salesDT = null;    let dtActionsHTML = '<a href="' + getAppURL('quotations/edit/') + '%d" class="btn bt-link btn-sm"><i style="color:#282828;" class="fas fa-edit" title="Edit"></i></a>' +        '<a href="#" data-id="%d"\n' + '                                               data-action="quotations/delete"\n' + '                                               class="btn bt-link btn-sm deleteBtn" title="Delete">\n' + '                                                <i class="fas fa-trash"></i>\n' + '                                            </a>' +        '<a href="' + getAppURL('accounts/customer_info_preview/') + '%d" class="btn bt-link btn-sm" title="Customer Info"><i style="color:#282828;" class="fas fa-user" ></i></a>' +        '<a href="' + getAppURL('quotations/view/') + '%d" class="btn bt-link btn-sm" title="View"><i style="color:#282828;" class="fas fa-info-circle" ></i></a>' +        '<a href="' + getAppURL('quotations/preview/') + '%d" class="btn bt-link btn-sm" title="Print"><i style="color:#282828;" class="fas fa-print" ></i></a>' +        '<a href="' + getAppURL('quotations/add_to_order/') + '%d" class="btn bt-link btn-sm" title="to Order"><i style="color:#282828;" class="fas fa-file-invoice" ></i></a>' +        '<a href="' + getAppURL('quotations/to_invoice/') + '%d" class="btn bt-link btn-sm" title="to Invoice"><i style="color:#282828;" class="fas fa-file-invoice" ></i></a>';    let statusHTML = '<input name="status" type="checkbox" id="status" class="input.i-status" onclick="return changeStatusList();" %s>';    /***************************************************/    var $dtTbl = $('#quotationsTbl');    BuildDataTableColumnSearch($dtTbl, 'salesDT');    EnhanceDataTableSearch(window.salesDT = $dtTbl.DataTable({        orderCellsTop: true, fixedHeader: {headerOffset: 0}, searchDelay: _GST, lengthMenu: _dtLengthMenu,        serverSide: true, processing: true, scrollX: false, scrollY: false, deferLoading: $dtTbl.attr('data-num-rows'),        responsive: true,        searching: true, // Enable the default search box        order: [[0, 'desc']], ajax: {            url: getAppURL('quotations/index'), type: 'GET', searchDelay: _GST,            complete: function () {                checkStatuses();            }        },        // initComplete: function () {        // 	var api = this.api();        // 	api.column(11).visible(false);        // },        columns: [{data: 'auto_no'}, {data: 'trans_date'}, {data: 'account1'}, {data: 'model'},            {data: 'VIN'}, {data: 'OE'}, {data: 'description'}, {data: 'user_name'}, {data: 'total'}, {data: 'status'}, {data: 'id'}, {data: 'transfered'}, {data: 'to_invoice'}],        columnDefs: [{            targets: 10,            orderable: false,            createdCell: (td, accId) => $(td).addClass('').html(dtActionsHTML.replace(/%d/g, parseInt(accId)))        }, {            targets: 9,            orderable: false,            createdCell: (td, status) => $(td).addClass('text-right').html(statusHTML.replace(/%s/g, status_check(status)))        },            {targets: 1, render: $.fn.dataTable.render.moment('YYYY-MM-DD', 'DD-MM-YYYY')}, {                targets: 5, // Target the 5th column (index starts at 0)                render: function (data, type, row, meta) {                    if (data !== null) { // Add a null check for the data variable                        // Perform the substring operation on the text in the cell                        var substring = data.substring(0, 50); // Extract the first 50 characters of the text                        // Add the "read more..." link to the anchor tag with the id parameter                        var anchor = '<a href="quotations/view/' + row[1] + '">...</a>'; // assuming id is in the second column                        var content = substring + anchor; // Concatenate the modified text and anchor tag                        return content; // Return the modified text and anchor tag                    }                }, createdCell: function (td, cellData, rowData, row, col) {                    $(td).attr('data-id', rowData[1]); // assuming id is in the second column                }            }, {                defaultContent: "-", targets: "_all"            }],        /*pagingType: "input",*/        stateSave: true,        stateSaveCallback: function (settings, data) {            localStorage.setItem('DataTables_' + settings.sInstance, JSON.stringify(data))        },        stateLoadCallback: function (settings) {            return JSON.parse(localStorage.getItem('DataTables_' + settings.sInstance))        },        "stateSaveParams": function (settings, data) {            var temp = {};            $('#quotationsTbl thead').find("tr:eq(1)").find('input').each(function (n) {                $(this).attr('id', 'input_' + n);                temp[$(this).attr('placeholder')] = document.getElementById($(this).attr('id')).value;            });            data.colsFilter = temp;            data.page_nb = $('.paginate_input').val();            // console.log(temp);        },        "stateLoadParams": function (settings, data) {            $.each(data.colsFilter, function (key, val) {                $('#quotationsTbl thead input[placeholder="' + key + '"]').val(val);            });            // alert(data.page_nb)            $('.paginate_input').val(data.page_nb);        },        "stateLoaded": function (settings, data) {            // $('#quotationsTbl').DataTable().ajax.reload();        },        initComplete: function () {            var api = this.api();            api.column(11).visible(false);            api.column(12).visible(false);            var table = $('#quotationsTbl').DataTable();            table.ajax.reload(null, false);        },        drawCallback: function (settings) {            checkStatuses();        }    }), 2048);    $('#reset_filters').on('click', function (e) {        location.reload();    });    checkStatuses();});function checkStatuses() {    $("#quotationsTbl tbody tr").each(function () {        let data = $('#quotationsTbl').DataTable().row($(this)).data();        if (data) {            let $row = $(this);            let transferedBadge = $row.find('.transfered-badge');            let invoiceBadge = $row.find('.invoice-badge');            if (data['transfered'] === '1' && data['to_invoice'] === '1') { // Added condition here                console.log('Both transfered and to_invoice are equal to 1');                if (transferedBadge.length === 0) {                    transferedBadge = $('<span></span>').addClass('badge badge-pill badge-primary bg-dark transfered-badge').text('To Order');                    $row.find('td:eq(9)').append(transferedBadge);                }                if (invoiceBadge.length === 0) {                    invoiceBadge = $('<span></span>').addClass('badge badge-pill badge-warning bg-dark invoice-badge').text('To Invoice');                    $row.find('td:eq(9)').append(invoiceBadge);                }                $row.css('background-color', '#87cefa');            } else {                if (data['transfered'] === '1') {                    console.log('Only transfered is equal to 1');                    if (transferedBadge.length === 0) {                        transferedBadge = $('<span></span>').addClass('badge badge-pill badge-primary bg-dark transfered-badge').text('To Order');                        $row.find('td:eq(9)').append(transferedBadge);                    }                    invoiceBadge.remove();                    $row.css('background-color', '#d3e3d4');                } else if (data['to_invoice'] === '1') {                    console.log('Only to_invoice is equal to 1');                    transferedBadge.remove();                    if (invoiceBadge.length === 0) {                        invoiceBadge = $('<span></span>').addClass('badge badge-pill badge-warning bg-dark invoice-badge').text('To Invoice');                        $row.find('td:eq(9)').append(invoiceBadge);                    }                    $row.css('background-color', '#87cefa');                } else {                    console.log('Neither transfered nor to_invoice is equal to 1');                    transferedBadge.remove();                    invoiceBadge.remove();                    $row.css('background-color', '');                }            }        }    });}function changeStatusView() {    var itemId = $("#transId").val();    $.ajax({        url: 'quotations/change_status', type: 'POST', data: {itemId: itemId}, success: function (response) {            // Handle the response from the server            window.location.reload();        }    });}function changeStatusList() {    let table = $('#quotationsTbl').DataTable();    $('#quotationsTbl tbody').on('click', 'tr', function () {        let rowData = table.row(this).data();        var itemId = rowData.id;        $.ajax({            url: 'quotations/change_status', type: 'POST', data: {itemId: itemId}, success: function (response) {                // Handle the response from the server                table.ajax.reload();                window.location.reload();            }        });    });}function status_check(status) {    if (parseInt(status) === 1) {        return 'checked';    } else {        return '';    }}