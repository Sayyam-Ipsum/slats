let $transactionForm, $itemLookup, $transactionLines, $submitted;jQuery(document).ready(function ($) {    // console.log(_userLogedInType);    $submitted = 0;    window.addEventListener("beforeunload", function (event) {        if ($submitted === 0) {            event.preventDefault();            event.returnValue = "Leave page?";        }    });    window.addEventListener("unload", function (event) {        $.ajax({            cache: false,            type: 'POST',            data: {'trans_id': $('#id').val()},            url: getAppURL('quotations/exit_page_js'),            success: function (data) {            }        });    });    window.addEventListener("load", function (event) {        if (window.location.href !== getAppURL('quotations/add')) {            $.ajax({                cache: false,                type: 'POST',                data: {'trans_id': $('#id').val()},                url: getAppURL('quotations/open_page_js'),                success: function (data) {                }            });        }    });    $transactionForm = $('form#transactionForm');    $transactionLines = $('tbody#transactionLines', $transactionForm);    $itemLookup = $('#itemLookup', $transactionForm);    inputToDatepickerA($('#trans_date, #value_date, #journal_date', $transactionForm));    let $acctLkupFrom = $('#acctLkupFrom', $transactionForm), $acctLkupTo = $('#acctLkupTo', $transactionForm),        $accountId = $('#account_id', $transactionForm), $account2Id = $('#account2_id', $transactionForm);    autoCompleteAccount($acctLkupTo, $accountId, accountSelected);    autoCompleteItem();    bindLinesEvents();    getcurrencyrate();    $('#sub_total').val('0');    if ($('#disc').val() == '') {        $('#disc').val('0');    }    calculateSubtotalAndTotal($('#disc'));    //$('#currency_id_list').prop('disabled', true).trigger("chosen:updated");    if (window.location.href == getAppURL('quotations/add') || window.location.href == getAppURL('orders/add')) {        document.getElementById("print").style.visibility = "hidden";        document.getElementById("customer_print").style.visibility = "hidden";        document.getElementById("to_order").style.visibility = "hidden";        document.getElementById("to_invoice").style.visibility = "hidden";        document.getElementById("bgback").href = "quotations/index";        $('#final_total').val('0');        $('#delivery_charge').val(0);        $('#pfand').val(0);    } else {        $.ajax({            cache: false,            type: 'POST',            data: {'whatselected': $('#currency_id').val()},            url: getAppURL('currencies/get_currency_rate'),            success: function (data) {                var result = data.split('-');                var cur_read = result[1];                if (cur_read == "readonly") {                    document.getElementById('currency_rate').setAttribute("readonly", true);                } else {                    document.getElementById('currency_rate').removeAttribute("readonly");                }            }        });        itemsAvailabilitytable();    }    // $('#bgback').on('click', function (e) {    // 	e.preventDefault();    // 	window.location.href = document.referrer;    // });    autoCompleteAccountInOrderModal($('#ois_account'));});function accountSelected(account, $accountId) {    $accountId.val(account.id);}function autoCompleteAccount($acctLkup, $accountId, onResultSelection) {    $acctLkup.autocomplete({        serviceUrl: getAppURL('sales/lookup_customers_accounts'),        appendTo: $acctLkup.parent()[0],        noCache: true,        showNoSuggestionNotice: true,        triggerSelectOnValidInput: false,        minChars: 2,        autoSelectFirst: true,        preventBadQueries: false,        noSuggestionNotice: 'Sorry, no matching results',        type: 'GET',        dataType: 'JSON',        deferRequestBy: 480,        onSearchStart: function (params) {        },        onSelect: function (result) {            onResultSelection(result.row, $accountId);            let $acctLkupFrom = $('#acctLkupFrom', $transactionForm);            let $account2Id = $('#account2_id', $transactionForm);            var id = $("#account_id").val();            $.ajax({                cache: false,                type: 'POST',                data: {'whatselected': id},                url: getAppURL('purchases/get_account_currency'),                success: function (data) {                    $('#currency_id_list').val(data);                    $('#currency_id').val(data);                    $.ajax({                        cache: false,                        type: 'POST',                        data: {'whatselected': data},                        url: getAppURL('sales/get_sales_account_with_the_same_currency'),                        success: function (data) {                            $('#acctLkupFrom').val(JSON.stringify(data["description"]).replace(/"/g, ""));                            $('#account2_id').val(JSON.stringify(data["id"]).replace(/"/g, ""));                        }                    });                    $.ajax({                        cache: false,                        type: 'POST',                        data: {'whatselected': data},                        url: getAppURL('currencies/get_currency_rate'),                        success: function (data) {                            var result = data.split('-');                            var cur_rate = result[0];                            var cur_read = result[1];                            //$('#currency_id_list').prop('disabled', true).trigger("chosen:updated");                            $('#currency_rate').val(cur_rate);                            if (cur_read == "readonly") {                                document.getElementById('currency_rate').setAttribute("readonly", true);                            } else {                                document.getElementById('currency_rate').removeAttribute("readonly");                            }                            let currency_code = $('#currency_id_list option:selected').text();                            if (currency_code == 'CHF') {                                $('#TVA1').val(7.7);                            } else {                                if (currency_code == 'EUR') {                                    $('#TVA1').val(19);                                }                            }                            var subtot1 = 0;                            jQuery('tr', $transactionLines).each(function (i, tr) {                                var currency_rate = $('#currency_rate').val();                                var profit = jQuery('input.i-item_profit', tr).val();                                var cost = parseFloat(jQuery('input.i-item_cost', tr).val());                                jQuery('input.i-cost', tr).val((parseFloat(cost) / parseFloat(currency_rate)).toFixed(2));                                // var tva = $('#TVA1').val();                                var price = ((cost * (1 + (parseFloat(profit) / 100)))) / parseFloat(currency_rate);                                jQuery('input.i-price', tr).val(price.toFixed(2));                                let net_cost = (parseFloat(jQuery('input.i-price', tr).val()) * (1 - (jQuery('input.i-discount', tr).val() / 100)));                                let total = jQuery('input.i-qty', tr).val() * net_cost;                                let subtot = parseFloat(jQuery('input.i-price', tr).val()) * parseFloat(jQuery('input.i-qty', tr).val());                                jQuery('td.i-total', tr).text(total.toFixed(2));                                jQuery('td.i-subtotal', tr).text(subtot.toFixed(2));                                subtot1 = subtot1 + parseFloat(jQuery('td.i-total', tr).text());                            });                            $('#sub_total').val(subtot1.toFixed(2));                            var tva = $('#TVA1').val();                            var ftot = (parseFloat(subtot1) + parseFloat($('#delivery_charge').val()) - parseFloat($('#disc').val())) * ((1 + (parseFloat(tva) / 100))) + parseFloat($('#pfand').val());                            $('#final_total').val(ftot.toFixed(2));                        }                    });                }            });        },        transformResult: function (response) {            return {                suggestions: jQuery.map(response, function (account) {                    return {value: account.description, row: account};                })            };        }    });}function autoCompleteItem() {    $itemLookup.on('keydown', function (e) {        if (e.keyCode == 13) {            // do not submit form on press of return key            e.preventDefault();            e.stopPropagation();            e.stopImmediatePropagation();            return false;        }    }).autocomplete({        serviceUrl: getAppURL('items/lookup_items_by_EAN_and_artical_nb'),        appendTo: $itemLookup.parent()[0],        noCache: true,        showNoSuggestionNotice: true,        triggerSelectOnValidInput: false,        minChars: 2,        autoSelectFirst: true,        preventBadQueries: false,        noSuggestionNotice: 'Sorry, no matching results',        type: 'GET',        dataType: 'JSON',        deferRequestBy: 480,        onSearchStart: function (params) {        },        onSelect: function (result) {            var currency_rate = $('#currency_rate').val();            if (currency_rate != '') {                $transactionitems = $('#transactionLines');                var flag = '';                jQuery('tr', $transactionitems).each(function (i, tr) {                    var id = jQuery('input.i-item_id', tr).val();                    if (result.row.id === id) {                        flag = $(this).attr('id');                        // console.log($(this).data('index'));                    }                });                if (flag === '') {                    addLineToTransaction(result.row, true);                } else {                    var qty = parseInt($('#' + flag).find('input.i-qty').val()) + 1;                    $('#' + flag).find('input.i-qty').val(qty);                    $('#itemLookup').val('');                }            } else {                alert("Please, you must select customer account first.")            }        },        transformResult: function (response) {            if (response.length === 1) {                if (response[0]['artical_number'] === $itemLookup.val() || response[0]['EAN'] === $itemLookup.val()) {                    $itemLookup.autocomplete('clear');                    $transactionitems = $('#transactionLines');                    var flag = '';                    jQuery('tr', $transactionitems).each(function (i, tr) {                        var id = jQuery('input.i-item_id', tr).val();                        if (response[0].id === id) {                            flag = $(this).attr('id');                            // console.log($(this).data('index'));                        }                    });                    if (flag === '') {                        addLineToTransaction(response[0], true);                    } else {                        var qty = parseInt($('#' + flag).find('input.i-qty').val()) + 1;                        $('#' + flag).find('input.i-qty').val(qty);                        $('#itemLookup').val('');                    }                }            }            return {                suggestions: jQuery.map(response, function (item) {                    return {value: item.suggestion, row: item};                })            };        }    });}// function add_btw(){// 	html ="<tr><td> test</td></tr>";// 	$('#transItemsTbl > tbody > tr').eq(1).after(html);// }function addLineToTransaction(item, newLine) {    $itemLookup.val('');    let $lastTr = jQuery('tr:last', $transactionLines);    let idx = 1 + parseInt($lastTr.length > 0 ? $lastTr.attr('data-index') : -1);    $transactionLines.append(ItemLineTpl.replace(/%d/g, String(idx)));    var nb = jQuery('td.i-nb', jQuery('tr#item-' + $lastTr.attr('data-index'), $transactionLines)).text();    if (newLine) {        var $tr = jQuery('tr#item-' + idx, $transactionLines);        jQuery('input.i-item_id', $tr).val(item.id);        jQuery('td.i-nb', $tr).text(Number(nb) + 1);        jQuery('td.i-name', $tr).text(item.description);        jQuery('td.i-brand', $tr).text(item.brand);        jQuery('td.i-artical_number', $tr).text(item.artical_number);        if (item.qty_multiplier == '2') {            jQuery('input.i-qty', $tr).val('2').focus();        } else {            jQuery('input.i-qty', $tr).val('1').focus();        }        var currency_rate = $('#currency_rate').val();        jQuery('input.i-item_cost', $tr).val(item.cost);        jQuery('input.i-cost', $tr).val((parseFloat(item.cost) / parseFloat(currency_rate)).toFixed(2));        jQuery('input.i-item_profit', $tr).val(0);        var tva = $('#TVA1').val();        var price = (parseFloat(item.cost) * (1 + (parseFloat(tva) / 100))) / parseFloat(currency_rate);        jQuery('input.i-discount', $tr).val('0');        jQuery('td.i-total', $tr).text('0');        jQuery('td.i-subtotal', $tr).text('0');        jQuery('td.i-net_cost', $tr).text('0');        $.ajax({            cache: false,            type: 'POST',            data: {'item_id': item.id, 'price': price},            url: getAppURL('quotations/get_last_sale_price_of_item'),            success: function (data) {                jQuery('input.i-price', $tr).val(parseFloat(data).toFixed(2));                //profit % =(profit / cost price)x100                //var profit_percent = ((parseFloat((parseFloat(data) - parseFloat(item.cost))) / parseFloat(item.cost))) * (100);                var item_prof = ((parseFloat(data) / parseFloat(item.cost)) - 1) * (100);                jQuery('input.i-item_profit', $tr).val(item_prof.toFixed(3));                //jQuery('input.i-profit_percent', $tr).val(profit_percent.toFixed(3));                itemsAvailabilitytable();                bindLineEvents($tr);            }        });        var getselected = jQuery('select.i-warehouse', $tr).children("option:selected").text();        $.ajax({            cache: false,            type: 'POST',            data: {'whatselected': getselected},            url: getAppURL('purchases/get_warehouse_shelfs'),            success: function (data) {                jQuery('select.i-shelf', $tr).empty();                for (let i = 0; i < data.length; i++) {                    jQuery('select.i-shelf', $tr).append(`<option value="${data[i]}">							${data[i]} </option>`).val(data[0]);                }            }        });    }}function bindLinesEvents() {    jQuery('tr', $transactionLines).each(function (i, tr) {        bindLineEvents(jQuery(tr));    });}function bindLineEvents($tr) {    jQuery('select.i-warehouse', $tr).on('change', function (e) {        var getselected = jQuery('select.i-warehouse', $tr).children("option:selected").text();        $.ajax({            cache: false,            type: 'POST',            data: {'whatselected': getselected},            url: getAppURL('purchases/get_warehouse_shelfs'),            success: function (data) {                jQuery('select.i-shelf', $tr).empty();                for (let i = 0; i < data.length; i++) {                    jQuery('select.i-shelf', $tr).append(`<option value="${data[i]}">							${data[i]} </option>`).val(data[0]);                }            }        });    });    jQuery('button.i-remove', $tr).on('click', function () {        jQuery(this.parentNode.parentNode).remove();        itemsAvailabilitytable();        calculateLineTotal();    });    $('#transItemsTbl thead').click(function () {        $('#itemAvTbDiv').hide();        $('#AvTbDiv').show();    });    $('#transItemsTbl tbody tr').click(function () {        $('#itemAvTbDiv').show();        $('#AvTbDiv').hide();        $('#row_id').val($(this).attr('id'));        var itemid = $(this).find("input[class='d-none i-item_id']").val();        var row_nb = $(this).find("td:eq(1)").text();        var itemname = $(this).find("td:eq(2)").text();        var itembrand = $(this).find("td:eq(3)").text();        var itemartical_nb = $(this).find("td:eq(4)").text();        $.ajax({            cache: false,            type: 'POST',            data: {'item_id': itemid},            url: getAppURL('warehouses/get_item_availabilty_table_with_alternatives_for_QU'),            success: function (data) {                $("#activityitemTbl td").remove();                if (itemid == undefined) {                    document.getElementById("item_info").style.display = "none";                } else {                    document.getElementById("item_info").style.display = "block";                    document.getElementById("item_info").innerHTML = "Product: " + itemname + " - " + itembrand + " - " + itemartical_nb;                }                if (data == "no") {                    r = "<tr><td colspan='5' style='text-align: center;'> No Data Found </td></tr>";                    $("#activityitemTbl tbody").append(r);                } else {                    for (let i = 0; i < data.length; i++) {                        if (data[i].artical_number === itemartical_nb) {                            var tr = "<tr>";                        } else {                            var tr = "<tr style='background: #FEC5BF'>";                        }                        var input_id = '<input type="text" name="item_id" value="' + data[i].item_id + '" hidden>';                        r = tr + "<td>" + data[i].brand + input_id +                            "</td><td>" + data[i].artical_number +                            "</td><td>" + data[i].warehouse +                            "</td><td>" + data[i].shelf +                            "</td><td>" + data[i].total_qty + "</td></tr>";                        $("#activityitemTbl tbody").append(r);                    }                }                $("#activityitemTbl tr").on('click', function (e) {                    var row_id = $('#row_id').val();                    var trans_item_id = $('#transItemsTbl tbody tr#' + row_id).find('td').find("input[class='d-none i-item_id']").val();                    var old_row_qty = $('#transItemsTbl tbody tr#' + row_id).find('td input.i-qty').val();                    var old_row_price = $('#transItemsTbl tbody tr#' + row_id).find('td input.i-price').val();                    var old_row_discount = $('#transItemsTbl tbody tr#' + row_id).find('td input.i-discount').val();                    var activity_item_id = $(this).find('td').find("input[name='item_id']").val();                    if (trans_item_id !== activity_item_id) {                        $.ajax({                            cache: false,                            type: 'POST',                            data: {'item_id': activity_item_id},                            url: getAppURL('items/get_item_data_by_item_id'),                            success: function (data) {                                let tr_pos = $('#transItemsTbl tbody tr#' + row_id).index();                                let tr_nb = $('#transItemsTbl tbody tr#' + row_id).find('td.i-nb').text();                                let rep_idx = $('#transItemsTbl tbody tr#' + row_id).attr('data-index');                                $('#transItemsTbl tbody tr#' + row_id).remove();                                addLineToTransactionReplacementCase(data, true, old_row_qty, old_row_price, old_row_discount, tr_pos, tr_nb, rep_idx);                                $("#activity_tbody").empty();                                let r = "<tr><td colspan='5' style='text-align: center;'> No Data Found </td></tr>";                                $("#activityitemTbl tbody").append(r);                                $('#row_id').val('');                                $('#item_info').text('');                            }                        });                    } else {                        var w = $(this).find('td').eq(2).text();                        var s = $(this).find('td').eq(3).text();                        $('#transItemsTbl tbody tr#' + row_id).find('td').eq(5).find('select').val(w);                        var shelf = $('#transItemsTbl tbody tr#' + row_id).find('td').eq(6).find('select');                        $.ajax({                            cache: false,                            type: 'POST',                            data: {'whatselected': w},                            url: getAppURL('purchases/get_warehouse_shelfs'),                            success: function (data) {                                shelf.empty();                                for (let i = 0; i < data.length; i++) {                                    shelf.append(`<option value="${data[i]}">                                            ${data[i]} </option>`);                                }                                shelf.val(s);                            }                        });                    }                })            }        });    });    jQuery('button.i-order', $tr).on('click', function () {        getWarehouseShelfs();        getWarehouseShelfs2()        $('#oi_warehouse').on('change', function () {            getWarehouseShelfs();        });        $('#ois_warehouse').on('change', function () {            getWarehouseShelfs2()        });        $('#OrderItemModal').modal('show');        $('#row_id').val($(this).closest('tr').attr('id'));    });    $('#TVA1').on('change', upate_line_price);    $('#currency_rate').on('change', upate_line_price);    var $qty = jQuery('input.i-qty', $tr).on('change', calculateLineTotal);    var $price = jQuery('input.i-price', $tr);    var $item_profit = jQuery('input.i-item_profit', $tr).on('change', upate_line_price);    var $discount = jQuery('input.i-discount', $tr).on('change', calculateLineTotal);    var $total_discount = $('#disc').on('change', calculateLineTotal);    var $pfand = $('#pfand').on('change', calculateLineTotal);    var $delivery_charge = $('#delivery_charge').on('change', calculateLineTotal);    calculateLineTotal();    function calculateLineTotal() {        let net_cost = (parseFloat($price.val()) * (1 - ($discount.val() / 100)));        let total = ($qty.val() * net_cost);        let subtot = parseFloat($price.val()) * parseFloat($qty.val());        jQuery('td.i-total', $tr).text(total.toFixed(2));        jQuery('td.i-subtotal', $tr).text(subtot.toFixed(2));        let tot_profit = 0;        let profit_percent = 0;        if (parseFloat(jQuery('input.i-cost', $tr).val()) > 0) {            // tot_profit = (((parseFloat(subtot) * (1 - (parseFloat($discount.val()) / 100))) - (parseFloat(jQuery('input.i-item_cost', $tr).val()) * parseFloat($qty.val()))) / ((parseFloat(jQuery('input.i-item_cost', $tr).val()) * parseFloat($qty.val())))) * 100;            //tot_profit = ((((parseFloat(jQuery('input.i-price', $tr).val()) - parseFloat(jQuery('input.i-cost', $tr).val())) * (1 - (parseFloat($discount.val()) / 100))) * 100) / (parseFloat(jQuery('input.i-cost', $tr).val()))) * parseFloat($qty.val());            //total profit = ((price - cost)) * (1 - (discount/100) * 100) / (cost * quantity))            //total profit= total - ( cost*Quantity)            tot_profit = parseFloat(total.toFixed(2)) - (parseFloat(jQuery('input.i-cost', $tr).val()) / parseFloat($qty.val()));            //profit % =(profit / cost price)x100            //profit_percent = ((tot_profit / cos) * 100)/ quantity            profit_percent = ((tot_profit / jQuery('input.i-cost', $tr).val()) * 100) / parseFloat($qty.val());        }        jQuery('td.i-total_profit', $tr).text(tot_profit.toFixed(2));        jQuery('input.i-profit_percent', $tr).val(profit_percent.toFixed(3));        calculateSubtotalAndTotal($total_discount);    }    function upate_line_price() {        // var tva = $('#TVA1').val();        jQuery('tr', $transactionLines).each(function (i, tr) {            var currency_rate = $('#currency_rate').val();            var profit = jQuery('input.i-item_profit', tr).val();            var cost = parseFloat(jQuery('input.i-item_cost', tr).val());            jQuery('input.i-cost', tr).val((cost / (parseFloat(currency_rate))).toFixed(2));            var price = ((cost * (1 + (parseFloat(profit) / 100)))) / (parseFloat(currency_rate));            jQuery('input.i-price', tr).val(price.toFixed(2));            calculateLineTotal();        });    }    jQuery('input.i-price', $tr).on('change', function (e) {        var cost = jQuery('input.i-cost', $tr).val();        var price = jQuery('input.i-price', $tr).val();        //profit % =(profit / cost price)x100        //var profit_percent = ((parseFloat((parseFloat(price) - parseFloat(cost))) / parseFloat(cost))) * (100);        var item_prof = ((parseFloat(price) / parseFloat(cost)) - 1) * (100);        jQuery('input.i-item_profit', $tr).val(item_prof.toFixed(4));        //jQuery('input.i-profit_percent', $tr).val(profit_percent.toFixed(4));        calculateLineTotal();    });}function getcurrencyrate() {    $('#currency_id').change(function (e) {        var id = $("#currency_id").val();        $.ajax({            cache: false,            type: 'POST',            data: {'whatselected': id},            url: getAppURL('currencies/get_currency_rate'),            success: function (data) {                var result = data.split('-');                $('#currency_rate').val(result[0]);            }        });    });}function calculateSubtotalAndTotal($total_discount) {    var subtot = 0;    jQuery('tr', $transactionLines).each(function (i, tr) {        subtot = subtot + parseFloat(jQuery('td.i-total', tr).text());    });    $('#sub_total').val(subtot.toFixed(2));    $('#final_total').val(((subtot + parseFloat($('#delivery_charge').val()) - parseFloat($total_discount.val())) * (1 + (parseFloat($('#TVA1').val()) / 100)) + parseFloat($('#pfand').val())).toFixed(2));}function validation() {    // window.onbeforeunload = null;    var count = 0;    jQuery('tr', $transactionLines).each(function (i, tr) {        var qty = jQuery('input.i-qty', tr).val();        var price = jQuery('input.i-price', tr).val();        var item_profit = jQuery('input.i-item_profit', tr).val();        var discount = jQuery('input.i-discount', tr).val();        var warehouse_tr = jQuery('select.i-warehouse', tr).val();        var shelf_tr = jQuery('select.i-shelf', tr).val();        if (isNaN(qty) == true || isNaN(price) == true || isNaN(discount) == true || isNaN(item_profit) == true) {            document.getElementById('error_transactionLines').innerHTML = "*All input fields must be numeric*";            document.getElementById('error_transactionLines').className = "alert alert-danger";            count++;        } else {            if (Math.sign(qty) == -1 || Math.sign(price) == -1 || Math.sign(discount) == -1 || Math.sign(item_profit) == -1) {                document.getElementById('error_transactionLines').innerHTML = "*All input fields must be positive numbers*";                document.getElementById('error_transactionLines').className = "alert alert-danger";                count++;            }        }        if (qty.trim() == "" || price.trim() == "" || discount.trim() == "" || item_profit.trim() == "") {            document.getElementById('error_transactionLines').innerHTML = "*All input fields must be numeric*";            document.getElementById('error_transactionLines').className = "alert alert-danger";            count++;        }        if (warehouse_tr == '') {            document.getElementById('error_transactionLines').innerHTML = "*Sorry, You Must Select Warehouse - Shelf For Each Row!*";            document.getElementById('error_transactionLines').className = "alert alert-danger";            count++;        }        if (shelf_tr == '') {            document.getElementById('error_transactionLines').innerHTML = "*Sorry, You Must Select Warehouse - Shelf For Each Row!*";            document.getElementById('error_transactionLines').className = "alert alert-danger";            count++;        }    });    var disc = $('#disc').val()    if (disc.trim() == "") {        document.getElementById('error_disc').innerHTML = "*please enter number for discount*";        document.getElementById('error_disc').className = "alert alert-danger";        count++;    }    if (isNaN(disc) == true) {        document.getElementById('error_disc').innerHTML = "*discount must be numeric*";        document.getElementById('error_disc').className = "alert alert-danger";        count++;    } else {        if (Math.sign(disc) == -1) {            document.getElementById('error_disc').innerHTML = "*discount must be positive number*";            document.getElementById('error_disc').className = "alert alert-danger";            count++;        }    }    var pfand = $('#pfand').val()    if (pfand.trim() == "") {        document.getElementById('error_pfand').innerHTML = "*please enter number for Pfand*";        document.getElementById('error_pfand').className = "alert alert-danger";        count++;    }    if (isNaN(pfand) == true) {        document.getElementById('error_pfand').innerHTML = "*Pfand must be numeric*";        document.getElementById('error_pfand').className = "alert alert-danger";        count++;    } else {        if (Math.sign(pfand) == -1) {            document.getElementById('error_pfand').innerHTML = "*Pfand must be positive number*";            document.getElementById('error_pfand').className = "alert alert-danger";            count++;        }    }    var delivery_charge = $('#delivery_charge').val()    if (delivery_charge.trim() == "") {        document.getElementById('error_delivery_charge').innerHTML = "*please enter number for delivery charge*";        document.getElementById('error_delivery_charge').className = "alert alert-danger";        count++;    }    if (isNaN(delivery_charge) == true) {        document.getElementById('error_delivery_charge').innerHTML = "*delivery charge must be numeric*";        document.getElementById('error_delivery_charge').className = "alert alert-danger";        count++;    } else {        if (Math.sign(delivery_charge) == -1) {            document.getElementById('error_delivery_charge').innerHTML = "*delivery charge must be positive number*";            document.getElementById('error_delivery_charge').className = "alert alert-danger";            count++;        }    }    if (document.transactionForm.acctLkupTo.value == "" || document.transactionForm.account_id.value == "") {        document.getElementById('error_acctLkupTo').innerHTML = "*Please select a Supplier Account*";        document.getElementById('error_acctLkupTo').className = "alert alert-danger";        count++;    }    if (document.transactionForm.acctLkupFrom.value == "" || document.transactionForm.account2_id.value == "") {        document.getElementById('error_acctLkupFrom').innerHTML = "*Please select a Purchases Account*";        document.getElementById('error_acctLkupFrom').className = "alert alert-danger";        count++;    }    if (document.transactionForm.currency_id.value == "") {        document.getElementById('error_currency_id').innerHTML = "*Please select a currency*";        document.getElementById('error_currency_id').className = "alert alert-danger";        count++;    }    var currency_rate = $('#currency_rate').val();    if (currency_rate.trim() == "") {        document.getElementById('error_currency_rate').innerHTML = "*please enter number for currency rate*";        document.getElementById('error_currency_rate').className = "alert alert-danger";        count++;    }    if (isNaN(currency_rate) == true) {        document.getElementById('error_currency_rate').innerHTML = "*currency rate must be numeric*";        document.getElementById('error_currency_rate').className = "alert alert-danger";        count++;    } else {        if (Math.sign(currency_rate) == -1) {            document.getElementById('error_currency_rate').innerHTML = "*currency rate must be positive number*";            document.getElementById('error_currency_rate').className = "alert alert-danger";            count++;        }    }    var date1 = change_date_format(document.transactionForm.trans_date.value);    if (document.transactionForm.trans_date.value == "" || isNaN(date1.getDate())) {        document.getElementById('error_trans_date').innerHTML = "*Please enter a valide date*";        document.getElementById('error_trans_date').className = "alert alert-danger";        count++;    }    if (document.transactionForm.value_date.value != '') {        var date2 = change_date_format(document.transactionForm.value_date.value);        if (isNaN(date2.getDate())) {            document.getElementById('error_value_date').innerHTML = "*Please enter a valide date*";            document.getElementById('error_value_date').className = "alert alert-danger";            count++;        }    }    // if (document.getElementById('transactionLines').rows.length == "0") {    // 	document.getElementById('error_transactionLines').innerHTML = "*Please enter an item*";    // 	document.getElementById('error_transactionLines').className = "alert alert-danger";    // 	count++;    // }    if (count > 0) {        return false;    } else {        $submitted = 1;        return true;    }}function AddAccount() {    window.open(getAppURL('accounts/add?TransAddAccount=1'), "_blank");}function AddItem() {    window.open(getAppURL('items/add?TransAddItem=1'), "_blank");}function change_date_format(date) {    var datearray = date.split("-");    var new_date_format = datearray[1] + "/" + datearray[0] + "/" + datearray[2]    var date_new = new Date(new_date_format);    return date_new;}function autoCompleteSalesAccount($acctLkup, $accountId, onResultSelection, $currency_id) {    $acctLkup.autocomplete({        serviceUrl: getAppURL('sales/lookup_sales_accounts/'.concat($currency_id)),        appendTo: $acctLkup.parent()[0],        noCache: true,        showNoSuggestionNotice: true,        triggerSelectOnValidInput: false,        minChars: 2,        autoSelectFirst: true,        preventBadQueries: false,        noSuggestionNotice: 'Sorry, no matching results',        type: 'GET',        dataType: 'JSON',        deferRequestBy: 480,        onSearchStart: function (params) {        },        onSelect: function (result) {            onResultSelection(result.row, $accountId);        },        transformResult: function (response) {            return {                suggestions: jQuery.map(response, function (account) {                    return {value: account.description, row: account};                })            };        }    });}function itemsAvailabilitytable() {    var itemid = [];    jQuery('tr', $transactionLines).each(function (i, tr) {        itemid[i] = jQuery('input.i-item_id', tr).val();    });    // console.log(itemid[0]);    if (itemid[0] !== undefined) {        $.ajax({            cache: false,            type: 'POST',            data: {'item_ids': itemid},            url: getAppURL('items/get_items_availability_table_data'),            success: function (data) {                $("#activityitemsTbl td").remove();                for (let j = 0; j < data.length; j++) {                    for (let i = 0; i < data[j].length; i++) {                        r =                            "<tr><td>" + data[j][i].description                            + "</td><td>" + data[j][i].brand + "</td>"                            + "<td>" + data[j][i].artical_number + "</td>"                            + "<td>" + data[j][i].warehouse + "</td>"                            + "<td>" + data[j][i].shelf + "</td><td>"                            + data[j][i].total_qty + "</td></tr>";                        $("#activityitemsTbl tbody").append(r);                        $("#activityitemsTbl tbody").append("<td colspan='6' style='color:white'>t</td>");                    }                }            }        });    } else {        $("#activityitemsTbl td").remove();        $("#activityitemsTbl tbody").append("<td colspan='6' style='text-align: center;'>No Data Found</td>");    }}function getWarehouseShelfs() {    $.ajax({        cache: false,        type: 'POST',        data: {'whatselected': $('#oi_warehouse').val()},        url: getAppURL('purchases/get_warehouse_shelfs'),        success: function (data) {            $('#oi_shelf').empty();            for (let i = 0; i < data.length; i++) {                $('#oi_shelf').append(`<option value="${data[i]}">						${data[i]} </option>`).val(data[0]);            }        }    });}function getWarehouseShelfs2() {    $.ajax({        cache: false,        type: 'POST',        data: {'whatselected': $('#ois_warehouse').val()},        url: getAppURL('purchases/get_warehouse_shelfs'),        success: function (data) {            $('#ois_shelf').empty();            for (let i = 0; i < data.length; i++) {                $('#ois_shelf').append(`<option value="${data[i]}">						${data[i]} </option>`).val(data[0]);            }        }    });}$('#order_submit').on('click', function () {    let isCheckedSlatsOrder = $('#activate_checkbox')[0].checked    let isCheckedCustomerOrder = $('#activate_customer')[0].checked;    if (isCheckedSlatsOrder) {        if (validationSlatsOderModal()) {            var msg = '';            if (isCheckedCustomerOrder) {                var res1 = add_order_customer(); // add customer order                if (res1 == 'Customer Items Ordered Successfully') {                    var res2 = add_order_slats();                    if (res2 == 'SLATS Items Ordered Successfully') {                        alert('Customer & SLATS Items Ordered Successfully');                        $('#OrderItemModal').modal('hide');                    } else {                        alert('Sorry, Something Went Wrong With SLATS Order Only Customer Items ordered!')                    }                } else {                    alert('Sorry, No Items Ordered Something Went Wrong!')                }            } else {                var res3 = add_order_slats(); // add slats order                alert(res3);                $('#OrderItemModal').modal('hide');            }        }    } else {        if (isCheckedCustomerOrder) {            var res4 = add_order_customer(); // add customer order only            alert(res4);            $('#OrderItemModal').modal('hide');        } else {            alert('Please Activate The Order You Want To Submit First!')        }    }});function autoCompleteAccountInOrderModal($acctLkup) {    $acctLkup.autocomplete({        serviceUrl: getAppURL('sales/lookup_customers_accounts'),        appendTo: $acctLkup.parent()[0],        noCache: true,        showNoSuggestionNotice: true,        triggerSelectOnValidInput: false,        minChars: 2,        autoSelectFirst: true,        preventBadQueries: false,        noSuggestionNotice: 'Sorry, no matching results',        type: 'GET',        dataType: 'JSON',        deferRequestBy: 480,        onSearchStart: function (params) {        },        onSelect: function (result) {            $('#ois_account_id').val(result.row.id);        },        transformResult: function (response) {            return {                suggestions: jQuery.map(response, function (account) {                    return {value: account.description, row: account};                })            };        }    });}function validationSlatsOderModal() {    var count = 0;    var account_id = $('#ois_account_id').val();    if (account_id.trim() == "") {        $('#error_ois_account_id').show();        document.getElementById('error_ois_account_id').innerHTML = "*Account Required*";        document.getElementById('error_ois_account_id').className = "alert alert-danger";        count++;    } else {        $('#error_ois_account_id').hide();    }    var qty = $('#ois_qty').val();    if (qty.trim() == "") {        $('#error_ois_qty').show();        document.getElementById('error_ois_qty').innerHTML = "*Required*";        document.getElementById('error_ois_qty').className = "alert alert-danger";        count++;    } else {        if (isNaN(qty) == true) {            $('#error_ois_qty').show();            document.getElementById('error_ois_qty').innerHTML = "*Must be numeric*";            document.getElementById('error_ois_qty').className = "alert alert-danger";            count++;        } else {            if (parseFloat(qty) <= 0) {                $('#error_ois_qty').show();                document.getElementById('error_ois_qty').innerHTML = "*Must be positive*";                document.getElementById('error_ois_qty').className = "alert alert-danger";                count++;            } else {                $('#error_ois_qty').hide();            }        }    }    if (count > 0) {        return false;    } else {        return true;    }}function add_order_slats() {    var result;    row = $("tr#" + $('#row_id').val());    var item_id = row.find('input#item_id').val();    var acc_id = $('#ois_account_id').val();    var trans = {};    $('input', $('#trans_form_div')).each(function () {        trans[$(this).attr("id")] = $(this).val();    });    var qty = $('#ois_qty').val();    var warehouse = $('#ois_warehouse').val();    var shelf = $('#ois_shelf').val();    $.ajax({        cache: false,        type: 'POST',        async: false,        data: {            'item_id': item_id,            'acc_id': acc_id,            'trans': trans,            'qty': qty,            'warehouse': warehouse,            'shelf': shelf,        },        url: getAppURL('orders/create_slats_order_for_item_from_qu'),        success: function (data) {            result = data;        }    });    return result;}function add_order_customer() {    var result;    row = $("tr#" + $('#row_id').val());    var item = {};    $('input', row).each(function () {        item[$(this).attr("id")] = $(this).val();    });    var trans = {};    $('input', $('#trans_form_div')).each(function () {        trans[$(this).attr("id")] = $(this).val();    });    trans['model'] = $('#model').val();    trans['OE'] = $('#OE').val();    trans['description'] = $('#description').val();    // console.log('ali');    $.ajax({        cache: false,        type: 'POST',        async: false,        data: {            'item': item,            'trans': trans,            'warehouse': $('#oi_warehouse').val(),            'shelf': $('#oi_shelf').val(),        },        url: getAppURL('orders/create_order_for_item_from_qu'),        success: function (data) {            result = data;        }    });    return result;}function addLineToTransactionReplacementCase(item, newLine, qty, price, discount, tr_pos, tr_nb, idx) {    $itemLookup.val('');    // let $lastTr = jQuery('tr:last', $transactionLines);    // let idx = 1 + parseInt($lastTr.length > 0 ? $lastTr.attr('data-index') : -1);    let tr_replace = ItemLineTpl.replace(/%d/g, String(idx));    // alert(tr_pos);parseInt(tr_pos)-1    // console.log(parseInt(tr_pos) - 1)    if (parseInt(tr_pos) - 1 >= 0) {        $('#transItemsTbl > tbody > tr').eq(parseInt(tr_pos) - 1).after(tr_replace);    } else {        $('#transItemsTbl > tbody').prepend(tr_replace);    }    // $transactionLines.append(ItemLineTpl.replace(/%d/g, String(idx)));    // var nb = jQuery('td.i-nb', jQuery('tr#item-' + $lastTr.attr('data-index'), $transactionLines)).text();    if (newLine) {        var $tr = jQuery('tr#item-' + idx, $transactionLines);        jQuery('input.i-item_id', $tr).val(item.id);        jQuery('td.i-nb', $tr).text(tr_nb);        jQuery('td.i-name', $tr).text(item.description);        jQuery('td.i-brand', $tr).text(item.brand);        jQuery('td.i-artical_number', $tr).text(item.artical_number);        // if (item.qty_multiplier == '2') {        // 	jQuery('input.i-qty', $tr).val('2').focus();        // } else {        // 	jQuery('input.i-qty', $tr).val('1').focus();        // }        jQuery('input.i-qty', $tr).val(qty).focus();        jQuery('input.i-price', $tr).val(price).focus();        var currency_rate = $('#currency_rate').val();        jQuery('input.i-item_cost', $tr).val(item.cost);        jQuery('input.i-cost', $tr).val((parseFloat(item.cost) / parseFloat(currency_rate)).toFixed(2));        jQuery('input.i-item_profit', $tr).val(0);        var tva = $('#TVA1').val();        var price = (parseFloat(item.cost) * (1 + (parseFloat(tva) / 100))) / parseFloat(currency_rate);        jQuery('input.i-discount', $tr).val(discount);        jQuery('td.i-total', $tr).text('0');        jQuery('td.i-subtotal', $tr).text('0');        jQuery('td.i-net_cost', $tr).text('0');        var getselected = jQuery('select.i-warehouse', $tr).children("option:selected").text();        $.ajax({            cache: false,            type: 'POST',            data: {'whatselected': getselected},            url: getAppURL('purchases/get_warehouse_shelfs'),            success: function (data) {                jQuery('select.i-shelf', $tr).empty();                for (let i = 0; i < data.length; i++) {                    jQuery('select.i-shelf', $tr).append(`<option value="${data[i]}">							${data[i]} </option>`).val(data[0]);                }            }        });        itemsAvailabilitytable();        bindLineEvents($tr);    }}